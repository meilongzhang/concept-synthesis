,Problem_num,accuracy,tr_code_concat,gen_code_concat,true_code_size,gen_code_size,num_stims_seen,stims_seen,passed_tests,failed_tests,tr_code_full,gen_code_full,tr_domain,gen_domain,gen_reshaped
0,1,0.5555555555555556,True,(color == 'red' or shape == 'circle'),4,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",9,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
1,1,0.5555555555555556,True,(color == 'red' or shape == 'square'),4,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",9,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
2,1,1.0,True,True,4,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
3,1,1.0,True,True,4,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
4,1,1.0,True,True,4,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
5,1,1.0,True,True,4,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
6,1,1.0,True,True,4,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
7,1,1.0,True,True,4,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
8,1,1.0,True,True,4,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True"""
9,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
10,2,0.6666666666666666,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
11,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
12,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
13,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
14,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
15,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
16,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
17,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(not shape == 'triangle'),53,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not shape == 'triangle')",8,6,"""lambda x: (not x['shape'] == 'triangle')"""
18,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
19,3,0.6666666666666666,(not (shape == 'circle') or not (color == 'green')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
20,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
21,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
22,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
23,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
24,3,0.7777777777777778,(not (shape == 'circle') or not (color == 'green')),(not color == 'green'),51,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",8,6,"""lambda x: (not x['color'] == 'green')"""
25,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),(color != 'green' or shape == 'square'),51,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color != 'green' or shape == 'square')",8,7,"""lambda x: (x['color'] != 'green' or x['shape'] == 'square')"""
26,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),((color == 'green' and shape == 'square') or (not color == 'green')),51,68,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'square') or (not color == 'green'))",8,7,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'square') or (not x['color'] == 'green'))"""
27,4,0.6666666666666666,not (color == 'green'),True,22,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
28,4,0.6666666666666666,not (color == 'green'),(color == 'red' or shape == 'square'),22,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
29,4,0.6666666666666666,not (color == 'green'),True,22,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
30,4,0.6666666666666666,not (color == 'green'),True,22,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
31,4,1.0,not (color == 'green'),(color == 'red' or color == 'blue'),22,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
32,4,0.6666666666666666,not (color == 'green'),True,22,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
33,4,1.0,not (color == 'green'),(not color == 'green'),22,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6,"""lambda x: (not x['color'] == 'green')"""
34,4,1.0,not (color == 'green'),(not color == 'green'),22,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6,"""lambda x: (not x['color'] == 'green')"""
35,4,1.0,not (color == 'green'),(not color == 'green'),22,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6,"""lambda x: (not x['color'] == 'green')"""
36,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
37,5,0.6666666666666666,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'square'),74,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
38,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(True),74,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (True)",8,9,"""lambda x: (True)"""
39,5,0.6666666666666666,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'circle'),74,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
40,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
41,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),not (color == 'blue' and shape == 'triangle'),74,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return not (color == 'blue' and shape == 'triangle')",8,8,"""lambda x: not (x['color'] == 'blue' and x['shape'] == 'triangle')"""
42,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
43,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
44,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),((not color == 'blue') or (not shape == 'triangle')),74,52,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'triangle'))",8,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'triangle'))"""
45,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),True,50,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
46,6,0.4444444444444444,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
47,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
48,6,0.6666666666666666,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle'),50,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
49,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle' or shape == 'triangle'),50,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle' or x['shape'] == 'triangle')"""
50,6,0.6666666666666666,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or color == 'blue' or shape == 'triangle'),50,58,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'triangle')"""
51,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",8,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
52,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",8,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
53,6,1.0,(not (shape == 'square') or not (color == 'blue')),(not (color == 'blue' and shape == 'square')),50,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",8,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))"""
54,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
55,7,0.5555555555555556,(not (color == 'blue') or shape == 'circle'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
56,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
57,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
58,7,0.8888888888888888,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))"""
59,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
60,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'circle')"""
61,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'circle')"""
62,7,0.8888888888888888,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))"""
63,8,0.4444444444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'circle'),50,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
64,8,0.6666666666666666,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
65,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
66,8,0.4444444444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red'),50,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",8,3,"""lambda x: (x['color'] == 'red')"""
67,8,0.6666666666666666,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
68,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
69,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
70,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'green' or color == 'red' or shape == 'square'),50,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or color == 'red' or shape == 'square')",8,7,"""lambda x: (x['color'] == 'green' or x['color'] == 'red' or x['shape'] == 'square')"""
71,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
72,9,0.5555555555555556,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
73,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
74,9,0.7777777777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
75,9,0.7777777777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
76,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
77,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
78,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
79,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
80,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
81,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),True,46,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
82,10,0.5555555555555556,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
83,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(True),46,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (True)",7,9,"""lambda x: (True)"""
84,10,0.8888888888888888,(not (color == 'blue') or shape == 'triangle'),(not color == 'blue'),46,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (not color == 'blue')",7,6,"""lambda x: (not x['color'] == 'blue')"""
85,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
86,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
87,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'triangle')"""
88,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'triangle')"""
89,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'triangle')"""
90,11,0.6666666666666666,not (color == 'blue'),(color == 'red' or shape == 'circle'),21,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
91,11,0.6666666666666666,not (color == 'blue'),(color == 'red' or shape == 'square'),21,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
92,11,0.6666666666666666,not (color == 'blue'),True,21,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
93,11,0.6666666666666666,not (color == 'blue'),(color == 'red'),21,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
94,11,1.0,not (color == 'blue'),(not color == 'blue'),21,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (not color == 'blue')",6,6,"""lambda x: (not x['color'] == 'blue')"""
95,11,0.6666666666666666,not (color == 'blue'),(color == 'red'),21,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
96,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
97,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
98,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
99,12,1.0,color == 'red',(color == 'red'),14,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
100,12,0.7777777777777778,color == 'red',(color == 'red' or shape == 'square'),14,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
101,12,1.0,color == 'red',(color == 'red'),14,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
102,12,1.0,color == 'red',(color == 'red'),14,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
103,12,1.0,color == 'red',(color == 'red'),14,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
104,12,1.0,color == 'red',(color == 'red'),14,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
105,12,1.0,color == 'red',(color == 'red'),14,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
106,12,1.0,color == 'red',(color == 'red'),14,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
107,12,1.0,color == 'red',(color == 'red'),14,16,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
108,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
109,13,0.4444444444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
110,13,0.4444444444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
111,13,0.6666666666666666,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),51,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",8,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
112,13,0.5555555555555556,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue'),51,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
113,13,0.6666666666666666,(not (shape == 'triangle') or not (color == 'red')),(color == 'blue' or color == 'red' or shape == 'circle'),51,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",8,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'red' or x['shape'] == 'circle')"""
114,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),51,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
115,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),True,51,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
116,13,1.0,(not (shape == 'triangle') or not (color == 'red')),(not (color == 'red' and shape == 'triangle')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'triangle'))",8,8,"""lambda x: (not (x['color'] == 'red' and x['shape'] == 'triangle'))"""
117,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'circle'),46,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
118,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
119,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
120,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),46,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
121,14,0.6666666666666666,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue'),46,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
122,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'blue' or color == 'red' or shape == 'circle'),46,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'red' or x['shape'] == 'circle')"""
123,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),True,46,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
124,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),46,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
125,14,0.8888888888888888,(color == 'blue' or not (shape == 'triangle')),(not shape == 'triangle'),46,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
126,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'circle'),25,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
127,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
128,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
129,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
130,15,0.7777777777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
131,15,0.7777777777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
132,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or color == 'green'),25,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
133,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
134,15,1.0,not (shape == 'triangle'),(not shape == 'triangle'),25,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')"""
135,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
136,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'circle'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
137,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
138,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
139,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle' or x['shape'] == 'circle')"""
140,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",7,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
141,16,0.8888888888888888,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),44,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",7,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
142,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))"""
143,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))"""
144,17,0.6666666666666666,not (shape == 'square'),r == 'red' and shape == 'circle':,23,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5,"""lambda x: r == 'red' and x['shape'] == 'circle':"""
145,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'circle'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
146,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
147,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
148,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
149,17,0.7777777777777778,not (shape == 'square'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),23,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
150,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or color == 'blue' or shape == 'circle'),23,56,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
151,17,1.0,not (shape == 'square'),(shape == 'circle' or shape == 'triangle'),23,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (shape == 'circle' or shape == 'triangle')",6,6,"""lambda x: (x['shape'] == 'circle' or x['shape'] == 'triangle')"""
152,17,1.0,not (shape == 'square'),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle')),23,104,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle'))",6,6,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
153,18,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
154,18,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
155,18,0.2222222222222222,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red'),92,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
156,18,0.5555555555555556,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue'),92,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
157,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))"""
158,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))"""
159,18,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue' or color == 'green'),92,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
160,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(not shape == 'triangle'),92,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')"""
161,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),((color == 'red' and shape == 'circle') or (color == 'blue')),92,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue'))"""
162,19,0.5555555555555556,(color == 'green' or shape == 'circle'),True,39,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True"""
163,19,0.5555555555555556,(color == 'green' or shape == 'circle'),(color == 'red' and shape == 'circle'),39,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
164,19,0.3333333333333333,(color == 'green' or shape == 'circle'),(color == 'red'),39,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
165,19,0.6666666666666666,(color == 'green' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),39,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
166,19,0.2222222222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
167,19,0.2222222222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
168,19,0.5555555555555556,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue' or color == 'green'),39,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",5,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
169,19,1.0,(color == 'green' or shape == 'circle'),(color == 'green' or shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'circle')"""
170,19,0.7777777777777778,(color == 'green' or shape == 'circle'),(color == 'green' or (not shape == 'square')),39,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",5,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'square'))"""
171,20,0.7777777777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
172,20,0.7777777777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
173,20,0.5555555555555556,shape == 'circle',(color == 'red'),17,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')"""
174,20,0.8888888888888888,shape == 'circle',(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),17,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",3,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle')"""
175,20,0.4444444444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",3,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
176,20,0.4444444444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",3,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
177,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
178,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
179,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
180,21,0.1111111111111111,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),False,78,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return False",8,0,"""lambda x: False"""
181,21,0.4444444444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square'),78,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
182,21,0.4444444444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),78,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
183,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
184,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
185,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
186,21,0.7777777777777778,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),78,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",8,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
187,21,0.8888888888888888,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),78,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",8,7,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
188,21,0.8888888888888888,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),True,78,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
189,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
190,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
191,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
192,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),44,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",7,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
193,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
194,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
195,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",7,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
196,22,0.8888888888888888,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),44,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",7,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
197,22,0.8888888888888888,(not (shape == 'circle') or color == 'blue'),(color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle'),44,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle')",7,8,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
198,23,0.3333333333333333,not (shape == 'circle'),False,23,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return False",6,0,"""lambda x: False"""
199,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
200,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
201,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
202,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
203,23,0.8888888888888888,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
204,23,0.8888888888888888,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
205,23,0.7777777777777778,not (shape == 'circle'),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),23,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
206,23,1.0,not (shape == 'circle'),(shape == 'square' or shape == 'triangle'),23,42,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",6,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')"""
207,24,0.5555555555555556,(not (shape == 'circle') and not (color == 'blue')),False,51,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
208,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
209,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
210,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
211,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
212,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
213,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
214,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
215,24,1.0,(not (shape == 'circle') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
216,25,0.6666666666666666,shape == 'square',False,17,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False"""
217,25,0.7777777777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
218,25,0.7777777777777778,shape == 'square',(color == 'red' and shape == 'square'),17,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",3,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
219,25,0.7777777777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
220,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
221,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
222,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
223,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
224,25,1.0,shape == 'square',((color == 'red' or color == 'blue' or color == 'green') and shape == 'square'),17,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and shape == 'square')",3,3,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green') and x['shape'] == 'square')"""
225,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
226,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
227,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' and shape == 'triangle'),45,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",7,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
228,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
229,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
230,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
231,26,1.0,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'triangle'),45,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')"""
232,26,0.8888888888888888,(shape == 'triangle' or not (color == 'red')),(not color == 'red'),45,20,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not color == 'red')",7,6,"""lambda x: (not x['color'] == 'red')"""
233,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'triangle'),45,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
234,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),True,41,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True"""
235,27,0.3333333333333333,(shape == 'triangle' or color == 'green'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
236,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
237,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
238,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
239,27,0.7777777777777778,(shape == 'triangle' or color == 'green'),(shape == 'triangle'),41,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')",5,3,"""lambda x: (x['shape'] == 'triangle')"""
240,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
241,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
242,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
243,28,0.6666666666666666,shape == 'triangle',False,19,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False"""
244,28,0.7777777777777778,shape == 'triangle',(color == 'blue' and shape == 'triangle'),19,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",3,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
245,28,0.7777777777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",3,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
246,28,0.7777777777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",3,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
247,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')"""
248,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')"""
249,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')"""
250,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')"""
251,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')"""
252,29,0.7777777777777778,(shape == 'triangle' and not (color == 'green')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
253,29,0.4444444444444444,(shape == 'triangle' and not (color == 'green')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
254,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
255,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
256,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
257,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')"""
258,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')"""
259,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(shape == 'triangle'),48,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (shape == 'triangle')",2,3,"""lambda x: (x['shape'] == 'triangle')"""
260,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')"""
261,30,0.4444444444444444,not (color == 'red'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),20,92,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))",6,3,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'circle') or ((not x['color'] == 'green') and x['shape'] == 'square'))"""
262,30,0.6666666666666666,not (color == 'red'),(color == 'green' or shape == 'square'),20,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')"""
263,30,0.4444444444444444,not (color == 'red'),(color == 'blue' and shape == 'square'),20,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
264,30,0.4444444444444444,not (color == 'red'),(color == 'blue' and shape == 'circle'),20,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",6,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
265,30,0.6666666666666666,not (color == 'red'),(color == 'blue' or shape == 'square'),20,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
266,30,0.6666666666666666,not (color == 'red'),(color == 'blue'),20,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue')",6,3,"""lambda x: (x['color'] == 'blue')"""
267,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
268,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
269,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
270,31,1.0,color == 'blue',(color == 'blue'),15,17,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
271,31,0.3333333333333333,color == 'blue',(color == 'red' or shape == 'square'),15,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
272,31,1.0,color == 'blue',(color == 'blue'),15,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
273,31,1.0,color == 'blue',(color == 'blue'),15,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
274,31,1.0,color == 'blue',(color == 'blue'),15,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
275,31,1.0,color == 'blue',(color == 'blue'),15,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
276,31,1.0,color == 'blue',(color == 'blue'),15,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
277,31,1.0,color == 'blue',(color == 'blue'),15,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
278,31,1.0,color == 'blue',(color == 'blue'),15,17,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')"""
279,32,0.4444444444444444,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'circle'),61,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
280,32,0.2222222222222222,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
281,32,0.8888888888888888,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'green'),61,18,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green')",4,3,"""lambda x: (x['color'] == 'green')"""
282,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
283,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
284,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
285,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
286,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),61,67,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')",4,4,"""lambda x: ((x['color'] == 'blue' or x['color'] == 'green') and not x['shape'] == 'triangle')"""
287,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
288,33,0.7777777777777778,(shape == 'circle' and not (color == 'red')),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
289,33,0.6666666666666666,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),44,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
290,33,0.7777777777777778,(shape == 'circle' and not (color == 'red')),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
291,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
292,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
293,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
294,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
295,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
296,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
297,34,0.7777777777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
298,34,0.2222222222222222,(shape == 'triangle' and not (color == 'red')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
299,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
300,34,0.7777777777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
301,34,0.6666666666666666,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
302,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
303,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
304,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
305,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(shape == 'triangle'),46,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'triangle')",2,3,"""lambda x: (x['shape'] == 'triangle')"""
306,35,0.6666666666666666,color == 'green',False,16,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False"""
307,35,0.3333333333333333,color == 'green',(color == 'red' or shape == 'square'),16,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
308,35,0.5555555555555556,color == 'green',(color == 'blue' and shape == 'square'),16,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",3,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
309,35,0.6666666666666666,color == 'green',False,16,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False"""
310,35,0.7777777777777778,color == 'green',(color == 'green' and shape == 'square'),16,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",3,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')"""
311,35,0.6666666666666666,color == 'green',False,16,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False"""
312,35,1.0,color == 'green',(color == 'green'),16,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3,"""lambda x: (x['color'] == 'green')"""
313,35,1.0,color == 'green',(color == 'green'),16,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3,"""lambda x: (x['color'] == 'green')"""
314,35,1.0,color == 'green',(color == 'green'),16,18,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3,"""lambda x: (x['color'] == 'green')"""
315,36,1.0,False,False,5,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False"""
316,36,0.4444444444444444,False,(color == 'red' or shape == 'square'),5,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",0,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
317,36,1.0,False,False,5,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False"""
318,36,0.8888888888888888,False,(color == 'blue' and shape == 'square'),5,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",0,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
319,36,0.8888888888888888,False,(color == 'blue' and shape == 'square'),5,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",0,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
320,36,1.0,False,False,5,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False"""
321,36,1.0,False,False,5,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False"""
322,36,1.0,False,False,5,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False"""
323,36,1.0,False,False,5,5,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False"""
324,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
325,37,0.6666666666666666,(not (color == 'green') or not (shape == 'square')),(color == 'red' or shape == 'circle'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
326,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
327,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
328,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
329,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
330,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
331,37,1.0,(not (color == 'green') or not (shape == 'square')),not (color == 'green' and shape == 'square'),51,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return not (color == 'green' and shape == 'square')",8,8,"""lambda x: not (x['color'] == 'green' and x['shape'] == 'square')"""
332,37,1.0,(not (color == 'green') or not (shape == 'square')),(not (color == 'green' and shape == 'square')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",8,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))"""
333,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,5,"""lambda x: (x['color'] == 'red')"""
334,38,0.5555555555555556,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
335,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
336,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
337,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
338,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
339,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
340,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))"""
341,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))"""
342,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
343,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
344,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
345,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
346,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
347,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
348,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(not color == 'green'),45,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')"""
349,39,1.0,(shape == 'square' or not (color == 'green')),((not color == 'green') or (shape == 'square')),45,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return ((not color == 'green') or (shape == 'square'))",7,7,"""lambda x: ((not x['color'] == 'green') or (x['shape'] == 'square'))"""
350,39,1.0,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue' or shape == 'square'),45,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')"""
351,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
352,40,0.5555555555555556,(shape == 'triangle' or not (color == 'green')),(color == 'red'),47,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
353,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
354,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
355,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
356,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
357,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')"""
358,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')"""
359,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')"""
360,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
361,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
362,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
363,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
364,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'circle'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
365,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
366,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
367,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
368,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
369,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),r == 'red' and shape == 'circle':,82,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5,"""lambda x: r == 'red' and x['shape'] == 'circle':"""
370,42,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
371,42,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
372,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
373,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
374,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')"""
375,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')"""
376,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')"""
377,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
378,43,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
379,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
380,43,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
381,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
382,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
383,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')"""
384,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square'),82,77,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square')",6,8,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle' or x['shape'] == 'square')"""
385,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')"""
386,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')"""
387,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
388,44,0.5555555555555556,(not (shape == 'square') or color == 'red'),(color == 'red'),43,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
389,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
390,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),True,43,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
391,44,1.0,(not (shape == 'square') or color == 'red'),(color == 'red' or (not shape == 'square')),43,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'square'))"""
392,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),((not color == 'blue') or (not shape == 'square')),43,50,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",7,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
393,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')",7,6,"""lambda x: (not x['shape'] == 'square')"""
394,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not (color == 'green' and shape == 'square')),43,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))"""
395,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')",7,6,"""lambda x: (not x['shape'] == 'square')"""
396,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),r == 'red' and shape == 'circle':,84,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5,"""lambda x: r == 'red' and x['shape'] == 'circle':"""
397,45,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
398,45,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
399,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
400,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or (not shape == 'square')),84,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'square'))"""
401,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not (color == 'blue' and shape == 'square')),84,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",6,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))"""
402,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
403,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not shape == 'square'),84,23,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'square')",6,6,"""lambda x: (not x['shape'] == 'square')"""
404,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
405,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
406,46,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red'),83,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
407,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
408,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
409,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
410,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
411,46,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
412,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'green' or shape == 'circle'),83,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'circle')"""
413,46,0.7777777777777778,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),((not color == 'blue') or (not shape == 'square')),83,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
414,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
415,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
416,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
417,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
418,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
419,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
420,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
421,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),85,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
422,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle' or x['shape'] == 'triangle')"""
423,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
424,48,0.7777777777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
425,48,0.7777777777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
426,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
427,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
428,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
429,48,0.5555555555555556,(shape == 'circle' or color == 'red'),(color == 'red' or color == 'blue' or color == 'green'),37,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",5,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
430,48,0.6666666666666666,(shape == 'circle' or color == 'red'),((not color == 'blue') or (not shape == 'square')),37,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",5,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))"""
431,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
432,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),True,43,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
433,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
434,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
435,49,0.5555555555555556,(color == 'red' or not (shape == 'circle')),(color == 'red'),43,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
436,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
437,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
438,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
439,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
440,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
441,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
442,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
443,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
444,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
445,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),84,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
446,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
447,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
448,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
449,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
450,51,0.5555555555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
451,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
452,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
453,51,0.5555555555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')"""
454,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
455,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
456,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'square')"""
457,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or (not shape == 'triangle')),44,45,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))",7,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'triangle'))"""
458,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'square')"""
459,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
460,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
461,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),True,83,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
462,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red'),83,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
463,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
464,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
465,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or color == 'green' or shape == 'square'),83,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'square')"""
466,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
467,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or (not shape == 'triangle')),83,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))",6,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'triangle'))"""
468,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
469,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
470,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
471,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
472,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
473,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
474,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
475,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
476,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
477,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
478,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
479,54,0.6666666666666666,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'circle'),59,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
480,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
481,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
482,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
483,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
484,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
485,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
486,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
487,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
488,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
489,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
490,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
491,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
492,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
493,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
494,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
495,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'circle'),39,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
496,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
497,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),True,39,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True"""
498,56,0.7777777777777778,(shape == 'triangle' or color == 'red'),(color == 'red'),39,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
499,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
500,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
501,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
502,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
503,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
504,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
505,57,0.6666666666666666,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'square'),60,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
506,57,0.4444444444444444,(color == 'red' or (color == 'green' and shape == 'circle')),True,60,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return True",4,9,"""lambda x: True"""
507,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
508,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
509,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
510,57,0.7777777777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
511,57,0.7777777777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
512,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
513,58,0.5555555555555556,(color == 'red' or (not (shape == 'circle') and color == 'green')),True,66,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return True",5,9,"""lambda x: True"""
514,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
515,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
516,58,0.8888888888888888,(color == 'red' or (not (shape == 'circle') and color == 'green')),(not color == 'blue'),66,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'blue')",5,6,"""lambda x: (not x['color'] == 'blue')"""
517,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'triangle'),66,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
518,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
519,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
520,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square'),66,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
521,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square' or shape == 'triangle'),66,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
522,59,0.6666666666666666,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
523,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
524,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
525,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
526,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
527,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
528,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
529,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
530,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
531,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
532,60,0.6666666666666666,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),62,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
533,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
534,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
535,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
536,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
537,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
538,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
539,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
540,61,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(shape == 'circle'),82,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')",6,3,"""lambda x: (x['shape'] == 'circle')"""
541,61,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
542,61,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
543,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
544,61,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
545,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'blue' or color == 'red' or shape == 'circle'),82,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'red' or x['shape'] == 'circle')"""
546,61,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),82,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
547,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or (x['color'] == 'green' and x['shape'] == 'circle'))"""
548,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or (x['color'] == 'green' and x['shape'] == 'circle'))"""
549,62,0.4444444444444444,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
550,62,0.6666666666666666,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
551,62,0.6666666666666666,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
552,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),82,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
553,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
554,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'blue' or (not shape == 'triangle')),82,46,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'triangle'))"""
555,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
556,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')"""
557,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')"""
558,63,0.7777777777777778,(color == 'green' or not (shape == 'triangle')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True"""
559,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
560,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
561,63,0.6666666666666666,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
562,63,0.7777777777777778,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'circle' or shape == 'square'),47,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle' or x['shape'] == 'square')"""
563,63,0.6666666666666666,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
564,63,0.8888888888888888,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
565,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),47,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
566,63,0.8888888888888888,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')"""
567,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
568,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red' or shape == 'square'),54,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
569,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
570,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
571,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
572,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
573,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
574,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
575,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
576,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),True,83,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
577,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
578,65,0.4444444444444444,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red'),83,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
579,65,0.5555555555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
580,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
581,65,0.5555555555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
582,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
583,65,0.7777777777777778,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square')),83,102,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square'))",6,6,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
584,65,0.8888888888888888,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'green' or (not shape == 'triangle')),83,47,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'triangle'))",6,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'triangle'))"""
585,66,0.8888888888888888,(shape == 'circle' or (shape == 'square' and color == 'red')),(shape == 'circle'),61,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'circle')",4,3,"""lambda x: (x['shape'] == 'circle')"""
586,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
587,66,0.6666666666666666,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red'),61,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
588,66,0.6666666666666666,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),61,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",4,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')"""
589,66,0.8888888888888888,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'circle'),61,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
590,66,0.7777777777777778,(shape == 'circle' or (shape == 'square' and color == 'red')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),61,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
591,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
592,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
593,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
594,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
595,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
596,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
597,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
598,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
599,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
600,67,0.7777777777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
601,67,0.7777777777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
602,67,1.0,(not (color == 'blue') and not (shape == 'triangle')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square')),53,83,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
603,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),True,49,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True"""
604,68,0.2222222222222222,(not (color == 'red') or not (shape == 'square')),(color == 'red'),49,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",8,3,"""lambda x: (x['color'] == 'red')"""
605,68,0.4444444444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
606,68,0.4444444444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
607,68,0.6666666666666666,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),49,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle' or x['shape'] == 'circle')"""
608,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),49,44,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",8,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))"""
609,68,0.7777777777777778,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),49,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",8,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
610,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),49,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",8,7,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
611,68,1.0,(not (color == 'red') or not (shape == 'square')),(not (color == 'red' and shape == 'square')),49,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))",8,8,"""lambda x: (not (x['color'] == 'red' and x['shape'] == 'square'))"""
612,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
613,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
614,69,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
615,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",6,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
616,69,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square'))"""
617,69,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
618,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
619,69,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'blue' or (not shape == 'square')),84,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))"""
620,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
621,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),True,109,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
622,70,0.4444444444444444,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'circle'),109,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
623,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
624,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
625,70,0.7777777777777778,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),109,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square'))"""
626,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),109,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
627,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or color == 'blue' or shape == 'triangle'),109,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'triangle')"""
628,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'blue' or shape == 'circle' or shape == 'triangle'),109,61,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'circle' or x['shape'] == 'triangle')"""
629,70,1.0,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),109,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
630,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
631,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
632,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
633,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
634,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
635,71,0.6666666666666666,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
636,71,0.6666666666666666,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
637,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or shape == 'circle' or shape == 'triangle'),45,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'green' or x['shape'] == 'circle' or x['shape'] == 'triangle')"""
638,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or (not shape == 'square')),45,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'square'))"""
639,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
640,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
641,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
642,72,0.8888888888888888,(not (shape == 'square') and not (color == 'green')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),52,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
643,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
644,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
645,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
646,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
647,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
648,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
649,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
650,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
651,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),66,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",5,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
652,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
653,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
654,73,0.7777777777777778,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
655,73,0.8888888888888888,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",5,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
656,73,1.0,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",5,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
657,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
658,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
659,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
660,74,0.7777777777777778,(not (shape == 'square') and not (color == 'blue')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),51,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
661,74,0.7777777777777778,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),51,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
662,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
663,74,0.8888888888888888,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
664,74,0.8888888888888888,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
665,74,1.0,(not (shape == 'square') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
666,75,0.6666666666666666,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'circle'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
667,75,0.8888888888888888,(not (shape == 'square') and color == 'red'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",2,3,"""lambda x: (x['color'] == 'red')"""
668,75,0.6666666666666666,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
669,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
670,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",2,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
671,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
672,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
673,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
674,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",2,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
675,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
676,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
677,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' and shape == 'circle'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",7,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
678,76,0.4444444444444444,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue'),43,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
679,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (not shape == 'triangle')),43,46,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",7,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'triangle'))"""
680,76,0.6666666666666666,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (color == 'red' and shape == 'circle')),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",7,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))"""
681,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
682,76,0.8888888888888888,(shape == 'circle' or not (color == 'red')),(not (color == 'red' and shape == 'square')),43,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'red' and x['shape'] == 'square'))"""
683,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
684,77,0.5555555555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
685,77,0.5555555555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
686,77,0.3333333333333333,(color == 'blue' or shape == 'circle'),(color == 'red'),38,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
687,77,0.6666666666666666,(color == 'blue' or shape == 'circle'),(color == 'red' or color == 'blue'),38,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
688,77,0.8888888888888888,(color == 'blue' or shape == 'circle'),(color == 'blue' or (color == 'red' and shape == 'circle')),38,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",5,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))"""
689,77,0.8888888888888888,(color == 'blue' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue')),38,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))",5,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue'))"""
690,77,0.7777777777777778,(color == 'blue' or shape == 'circle'),(color == 'blue' or color == 'green' or shape == 'circle'),38,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",5,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'circle')"""
691,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'circle')"""
692,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'circle')"""
693,78,0.6666666666666666,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True"""
694,78,0.4444444444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
695,78,0.4444444444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' and shape == 'circle'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
696,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
697,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))"""
698,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))"""
699,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'circle')"""
700,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'circle')"""
701,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (not color == 'red')),84,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (not color == 'red'))",6,7,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (not x['color'] == 'red'))"""
702,79,0.4444444444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' or shape == 'circle'),91,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
703,79,0.4444444444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle'),91,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
704,79,0.2222222222222222,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red'),91,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')"""
705,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),91,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
706,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' or color == 'blue') and shape == 'circle'),91,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')",6,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'circle')"""
707,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),91,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
708,79,0.6666666666666666,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),91,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",6,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
709,79,0.7777777777777778,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),91,171,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
710,79,1.0,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green'),91,148,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green')",6,6,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green')"""
711,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(shape == 'circle'),73,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')",5,3,"""lambda x: (x['shape'] == 'circle')"""
712,80,0.5555555555555556,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' or shape == 'circle'),73,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
713,80,0.3333333333333333,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red'),73,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')"""
714,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),73,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",5,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle')"""
715,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' or color == 'blue') and shape == 'circle'),73,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')",5,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'circle')"""
716,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),73,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
717,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
718,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
719,80,1.0,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),73,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))",5,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
720,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
721,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
722,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'circle'),63,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
723,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
724,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
725,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
726,81,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue' or color == 'green'),63,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
727,81,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or shape == 'circle'),63,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'circle')"""
728,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or (not shape == 'square')),63,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",4,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'square'))"""
729,82,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
730,82,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
731,82,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red'),65,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
732,82,0.7777777777777778,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),65,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",4,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle')"""
733,82,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
734,82,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')"""
735,82,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),65,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')"""
736,82,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(shape == 'circle'),65,19,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'circle')",4,3,"""lambda x: (x['shape'] == 'circle')"""
737,82,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'triangle')),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle')),65,129,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
738,83,0.6666666666666666,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
739,83,0.6666666666666666,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
740,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
741,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
742,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
743,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
744,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')",2,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle')"""
745,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')",2,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle')"""
746,83,0.5555555555555556,(not (color == 'blue') and shape == 'circle'),(color == 'red' or color == 'green'),45,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",2,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')"""
747,84,0.7777777777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",1,3,"""lambda x: (x['color'] == 'red')"""
748,84,0.7777777777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",1,3,"""lambda x: (x['color'] == 'red')"""
749,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
750,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
751,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
752,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
753,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
754,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
755,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
756,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
757,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
758,85,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
759,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",6,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
760,85,0.7777777777777778,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square'))"""
761,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
762,85,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
763,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
764,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
765,86,0.3333333333333333,(color == 'green' or not (shape == 'circle')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",7,5,"""lambda x: False"""
766,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
767,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
768,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
769,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
770,86,0.6666666666666666,(color == 'green' or not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
771,86,0.8888888888888888,(color == 'green' or not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),45,42,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",7,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')"""
772,86,0.7777777777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
773,86,0.7777777777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
774,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
775,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
776,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
777,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
778,87,0.7777777777777778,(not (color == 'green') and not (shape == 'circle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),52,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
779,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
780,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
781,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
782,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
783,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
784,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
785,88,0.4444444444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
786,88,0.4444444444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
787,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
788,88,0.5555555555555556,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),85,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
789,88,0.7777777777777778,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle')),85,171,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
790,88,0.8888888888888888,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square')),85,215,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'square'))"""
791,88,1.0,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),85,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
792,89,0.6666666666666666,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
793,89,0.8888888888888888,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
794,89,0.4444444444444444,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),63,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
795,89,0.7777777777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),63,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
796,89,0.8888888888888888,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
797,89,0.7777777777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),63,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
798,89,0.6666666666666666,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square' or shape == 'triangle'),63,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",4,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
799,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))",4,4,"""lambda x: (x['shape'] == 'square' or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
800,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))",4,4,"""lambda x: (x['shape'] == 'square' or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
801,90,0.5555555555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),True,70,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return True",5,9,"""lambda x: True"""
802,90,0.5555555555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'square'),70,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
803,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
804,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
805,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
806,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
807,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
808,90,0.8888888888888888,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(shape == 'square' or shape == 'triangle'),70,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",5,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')"""
809,90,0.8888888888888888,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),70,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))",5,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
810,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),r == 'red' and shape == 'circle':,66,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",5,5,"""lambda x: r == 'red' and x['shape'] == 'circle':"""
811,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'square'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
812,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
813,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),66,84,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))"""
814,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",5,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
815,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",5,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
816,91,0.7777777777777778,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
817,91,0.8888888888888888,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",5,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
818,91,1.0,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",5,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
819,92,0.8888888888888888,(color == 'red' and not (shape == 'circle')),r == 'red':,44,11,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	if color == 'red':",2,3,"""lambda x: r == 'red':"""
820,92,0.8888888888888888,(color == 'red' and not (shape == 'circle')),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",2,3,"""lambda x: (x['color'] == 'red')"""
821,92,0.6666666666666666,(color == 'red' and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')"""
822,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
823,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
824,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
825,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
826,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
827,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
828,93,0.5555555555555556,(shape == 'square' or not (color == 'red')),(shape == 'square'),43,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'square')",7,3,"""lambda x: (x['shape'] == 'square')"""
829,93,0.3333333333333333,(shape == 'square' or not (color == 'red')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
830,93,0.3333333333333333,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",7,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
831,93,0.4444444444444444,(shape == 'square' or not (color == 'red')),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),43,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",7,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
832,93,0.4444444444444444,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),43,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')",7,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle')"""
833,93,0.6666666666666666,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue'),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')",7,4,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue')"""
834,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
835,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
836,93,0.7777777777777778,(shape == 'square' or not (color == 'red')),(color == 'blue' or shape == 'square'),43,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
837,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
838,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
839,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
840,94,0.5555555555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
841,94,0.5555555555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' or color == 'blue') and shape == 'square'),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",6,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
842,94,0.7777777777777778,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or (color == 'red' and shape == 'square')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'square'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'square'))"""
843,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
844,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
845,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle')),84,105,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue') or (x['color'] == 'green' and x['shape'] == 'circle'))"""
846,95,0.2222222222222222,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
847,95,0.4444444444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
848,95,0.4444444444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' and shape == 'square'),86,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
849,95,0.5555555555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),86,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
850,95,0.5555555555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' or color == 'blue') and shape == 'square'),86,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",6,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
851,95,0.7777777777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue'))"""
852,95,0.7777777777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue'))"""
853,95,0.8888888888888888,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
854,95,0.8888888888888888,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
855,96,0.5555555555555556,(shape == 'square' or color == 'blue'),True,38,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True"""
856,96,0.5555555555555556,(shape == 'square' or color == 'blue'),(color == 'red' or shape == 'square'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
857,96,0.5555555555555556,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
858,96,0.6666666666666666,(shape == 'square' or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),38,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
859,96,0.6666666666666666,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),38,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')",5,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle')"""
860,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
861,96,0.8888888888888888,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue'),38,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')",5,4,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue')"""
862,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
863,96,1.0,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square'),38,103,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue') or (x['color'] == 'green' and x['shape'] == 'square')"""
864,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
865,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
866,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
867,97,0.5555555555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
868,97,0.6666666666666666,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'circle'),84,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'circle')"""
869,97,0.5555555555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))"""
870,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
871,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
872,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')"""
873,98,0.4444444444444444,(color == 'green' or shape == 'square'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return False",5,0,"""lambda x: False"""
874,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
875,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' and shape == 'square'),39,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
876,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
877,98,0.6666666666666666,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",5,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
878,98,0.6666666666666666,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",5,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
879,98,0.7777777777777778,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle'),39,103,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle')",5,3,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle')"""
880,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')"""
881,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')"""
882,99,0.5555555555555556,(shape == 'square' or (color == 'green' and shape == 'triangle')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
883,99,0.6666666666666666,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
884,99,0.6666666666666666,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'square'),65,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
885,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
886,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
887,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
888,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
889,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
890,99,1.0,(shape == 'square' or (color == 'green' and shape == 'triangle')),(shape == 'square' or (color == 'green' and shape == 'triangle')),65,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'green' and shape == 'triangle'))",4,4,"""lambda x: (x['shape'] == 'square' or (x['color'] == 'green' and x['shape'] == 'triangle'))"""
891,100,0.7777777777777778,(shape == 'square' and not (color == 'green')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
892,100,0.6666666666666666,(shape == 'square' and not (color == 'green')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
893,100,0.8888888888888888,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
894,100,0.8888888888888888,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
895,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
896,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
897,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
898,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
899,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')"""
900,101,0.4444444444444444,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red'),60,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
901,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
902,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
903,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
904,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
905,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
906,101,0.7777777777777778,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle'),60,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle')",4,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle')"""
907,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))",4,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green'))"""
908,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))",4,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green'))"""
909,102,0.7777777777777778,(shape == 'square' and not (color == 'blue')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
910,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
911,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
912,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
913,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
914,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
915,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
916,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square')),45,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square'))",2,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'square'))"""
917,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'square'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and x['shape'] == 'square')"""
918,103,0.8888888888888888,(color == 'red' and shape == 'square'),False,38,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
919,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
920,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
921,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
922,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
923,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
924,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
925,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
926,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')"""
927,104,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
928,104,0.2222222222222222,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
929,104,0.6666666666666666,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle'),86,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle')",6,3,"""lambda x: (x['shape'] == 'triangle')"""
930,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
931,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
932,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
933,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle' or color == 'blue' or color == 'green'),86,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle' or color == 'blue' or color == 'green')",6,7,"""lambda x: (x['shape'] == 'triangle' or x['color'] == 'blue' or x['color'] == 'green')"""
934,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))"""
935,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))"""
936,105,0.3333333333333333,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),False,111,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return False",6,0,"""lambda x: False"""
937,105,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' or shape == 'square'),111,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
938,105,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' and shape == 'triangle'),111,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
939,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
940,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
941,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
942,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
943,105,0.6666666666666666,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'square'),111,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
944,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or (not shape == 'circle')),111,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'circle'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'circle'))"""
945,106,0.3333333333333333,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'circle'),40,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
946,106,0.3333333333333333,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
947,106,0.5555555555555556,(color == 'blue' or shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
948,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
949,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
950,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
951,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
952,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
953,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
954,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' or shape == 'circle'),108,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
955,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' and shape == 'triangle'),108,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",6,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
956,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' and shape == 'triangle'),108,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
957,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
958,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
959,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
960,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')"""
961,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')"""
962,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')"""
963,108,0.4444444444444444,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),False,75,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return False",5,0,"""lambda x: False"""
964,108,0.5555555555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue'),75,17,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')"""
965,108,0.5555555555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'red' and shape == 'triangle'),75,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
966,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
967,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
968,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
969,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')"""
970,108,0.8888888888888888,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),((not color == 'red') and (not shape == 'square')),75,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return ((not color == 'red') and (not shape == 'square'))",5,4,"""lambda x: ((not x['color'] == 'red') and (not x['shape'] == 'square'))"""
971,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')"""
972,109,0.5555555555555556,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),False,64,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
973,109,0.2222222222222222,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' or shape == 'square'),64,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
974,109,0.6666666666666666,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' and shape == 'triangle'),64,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
975,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
976,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
977,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
978,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
979,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
980,109,0.7777777777777778,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),((color == 'blue' or color == 'red') and shape == 'triangle'),64,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'red') and shape == 'triangle')",4,2,"""lambda x: ((x['color'] == 'blue' or x['color'] == 'red') and x['shape'] == 'triangle')"""
981,110,0.5555555555555556,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(False),65,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (False)",4,0,"""lambda x: (False)"""
982,110,0.4444444444444444,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red'),65,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')"""
983,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')"""
984,110,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
985,110,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
986,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')"""
987,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
988,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
989,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
990,111,0.5555555555555556,(shape == 'triangle' or (color == 'green' and shape == 'square')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
991,111,0.4444444444444444,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
992,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')"""
993,111,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
994,111,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
995,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')"""
996,111,0.7777777777777778,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' or color == 'blue') and shape == 'triangle'),65,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')"""
997,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'),65,129,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')",4,3,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square')"""
998,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),65,131,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))"""
999,112,0.7777777777777778,(shape == 'triangle' and not (color == 'blue')),False,47,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1000,112,0.4444444444444444,(shape == 'triangle' and not (color == 'blue')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1001,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1002,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1003,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1004,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1005,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1006,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1007,112,1.0,(shape == 'triangle' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'triangle'),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and x['shape'] == 'triangle')"""
1008,113,0.8888888888888888,(color == 'red' and shape == 'triangle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1009,113,0.5555555555555556,(color == 'red' and shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1010,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1011,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1012,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1013,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1014,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1015,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1016,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')"""
1017,114,0.3333333333333333,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),r == 'red' and shape == 'circle':,69,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",5,1,"""lambda x: r == 'red' and x['shape'] == 'circle':"""
1018,114,0.5555555555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'square'),69,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",5,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1019,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
1020,114,0.5555555555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'circle'),69,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",5,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1021,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
1022,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue'),69,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')"""
1023,114,0.8888888888888888,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",5,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
1024,114,0.8888888888888888,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",5,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
1025,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or (not shape == 'triangle')),69,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",5,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'triangle'))"""
1026,115,0.4444444444444444,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),False,71,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return False",5,0,"""lambda x: False"""
1027,115,0.3333333333333333,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'red' or shape == 'square'),71,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1028,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')"""
1029,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')"""
1030,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
1031,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')"""
1032,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')"""
1033,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')"""
1034,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square' or shape == 'triangle'),71,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square' or x['shape'] == 'triangle')"""
1035,116,0.5555555555555556,(color == 'blue' or (color == 'green' and shape == 'triangle')),False,63,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
1036,116,0.6666666666666666,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'square'),63,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1037,116,0.6666666666666666,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1038,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1039,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1040,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1041,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1042,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1043,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' or shape == 'triangle'),63,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')"""
1044,117,0.5555555555555556,(not (color == 'red') and not (shape == 'triangle')),(False),52,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (False)",4,0,"""lambda x: (False)"""
1045,117,0.4444444444444444,(not (color == 'red') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1046,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1047,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1048,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1049,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1050,117,0.7777777777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
1051,117,0.7777777777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')"""
1052,117,1.0,(not (color == 'red') and not (shape == 'triangle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),52,67,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')",4,4,"""lambda x: ((x['color'] == 'blue' or x['color'] == 'green') and not x['shape'] == 'triangle')"""
1053,118,0.7777777777777778,(color == 'blue' and not (shape == 'triangle')),(color == shape),47,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == shape)",2,0,"""lambda x: (x['color'] == x['shape'])"""
1054,118,0.4444444444444444,(color == 'blue' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1055,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')"""
1056,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')"""
1057,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')"""
1058,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')"""
1059,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (not x['shape'] == 'triangle'))"""
1060,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (not x['shape'] == 'triangle'))"""
1061,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (shape == 'circle' or shape == 'square')),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'square'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'square'))"""
1062,119,0.5555555555555556,(not (color == 'red') and not (shape == 'square')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
1063,119,0.4444444444444444,(not (color == 'red') and not (shape == 'square')),(color == 'red' or shape == 'circle'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
1064,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),(not color == 'red'),50,20,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (not color == 'red')",4,6,"""lambda x: (not x['color'] == 'red')"""
1065,119,0.6666666666666666,(not (color == 'red') and not (shape == 'square')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1066,119,0.6666666666666666,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and shape == 'circle'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1067,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1068,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),50,87,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle'))"""
1069,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1070,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1071,120,0.7777777777777778,(color == 'blue' and not (shape == 'square')),r == 'red' and shape == 'circle':,45,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",2,0,"""lambda x: r == 'red' and x['shape'] == 'circle':"""
1072,120,0.2222222222222222,(color == 'blue' and not (shape == 'square')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1073,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),45,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1074,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1075,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1076,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1077,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1078,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1079,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1080,121,0.8888888888888888,(shape == 'circle' and color == 'blue'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1081,121,0.3333333333333333,(shape == 'circle' and color == 'blue'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1082,121,0.7777777777777778,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),39,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1083,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1084,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1085,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1086,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1087,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1088,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1089,122,0.5555555555555556,(not (color == 'red') and not (shape == 'circle')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
1090,122,0.4444444444444444,(not (color == 'red') and not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1091,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1092,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')"""
1093,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1094,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1095,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1096,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),50,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",4,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')"""
1097,122,1.0,(not (color == 'red') and not (shape == 'circle')),((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1098,123,0.6666666666666666,(color == 'blue' and not (shape == 'circle')),(color == 'red' and shape == 'circle'),45,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
1099,123,0.4444444444444444,(color == 'blue' and not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1100,123,0.7777777777777778,(color == 'blue' and not (shape == 'circle')),False,45,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1101,123,0.8888888888888888,(color == 'blue' and not (shape == 'circle')),(color == 'blue'),45,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')"""
1102,123,0.8888888888888888,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and shape == 'square'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1103,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1104,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1105,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1106,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1107,124,0.7777777777777778,(not (color == 'red') and shape == 'square'),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1108,124,0.6666666666666666,(not (color == 'red') and shape == 'square'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1109,124,0.7777777777777778,(not (color == 'red') and shape == 'square'),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1110,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1111,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1112,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1113,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1114,124,1.0,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square'),44,83,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square')",2,2,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'square')"""
1115,124,1.0,(not (color == 'red') and shape == 'square'),((color == 'green' or color == 'blue') and shape == 'square'),44,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and x['shape'] == 'square')"""
1116,125,0.7777777777777778,(shape == 'square' and color == 'blue'),(color == 'red' and shape == 'circle'),39,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')"""
1117,125,0.7777777777777778,(shape == 'square' and color == 'blue'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),39,92,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))",1,3,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'circle') or ((not x['color'] == 'green') and x['shape'] == 'square'))"""
1118,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1119,125,0.8888888888888888,(shape == 'square' and color == 'blue'),False,39,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1120,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1121,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1122,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1123,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1124,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1125,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,0,"""lambda x: (x['color'] == 'red')"""
1126,126,0.2222222222222222,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1127,126,0.6666666666666666,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1128,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
1129,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False"""
1130,126,0.6666666666666666,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1131,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
1132,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
1133,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')"""
1134,127,0.8888888888888888,(shape == 'triangle' and color == 'blue'),False,41,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1135,127,0.3333333333333333,(shape == 'triangle' and color == 'blue'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1136,127,0.8888888888888888,(shape == 'triangle' and color == 'blue'),False,41,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1137,127,0.7777777777777778,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'circle'),41,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1138,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1139,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1140,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1141,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1142,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1143,128,0.7777777777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1144,128,0.4444444444444444,(color == 'green' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1145,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1146,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),48,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1147,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1148,128,0.7777777777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1149,128,0.8888888888888888,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')",2,3,"""lambda x: (x['color'] == 'green')"""
1150,128,0.8888888888888888,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')",2,3,"""lambda x: (x['color'] == 'green')"""
1151,128,1.0,(color == 'green' and not (shape == 'triangle')),(color == 'green' and (not shape == 'triangle')),48,48,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green' and (not shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'green' and (not x['shape'] == 'triangle'))"""
1152,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1153,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),46,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1154,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1155,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1156,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1157,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1158,129,0.8888888888888888,(color == 'green' and not (shape == 'square')),(color == 'green'),46,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green')",2,3,"""lambda x: (x['color'] == 'green')"""
1159,129,0.8888888888888888,(color == 'green' and not (shape == 'square')),(color == 'green' and shape == 'circle'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'circle')"""
1160,129,1.0,(color == 'green' and not (shape == 'square')),(color == 'green' and (shape == 'circle' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'green' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))"""
1161,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1162,130,0.5555555555555556,(color == 'green' and shape == 'circle'),(color == 'red' or shape == 'circle'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')"""
1163,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1164,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'circle'),40,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1165,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1166,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1167,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'green'),40,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green')",1,3,"""lambda x: (x['color'] == 'green')"""
1168,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'circle')"""
1169,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'circle')"""
1170,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1171,131,0.6666666666666666,(color == 'green' and not (shape == 'circle')),(color == 'green' or shape == 'square'),46,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')"""
1172,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1173,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1174,131,0.8888888888888888,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')"""
1175,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1176,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False"""
1177,131,0.8888888888888888,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')"""
1178,131,1.0,(color == 'green' and not (shape == 'circle')),(color == 'green' and (shape == 'square' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'green' and (x['shape'] == 'square' or x['shape'] == 'triangle'))"""
1179,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1180,132,0.5555555555555556,(color == 'green' and shape == 'square'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')"""
1181,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1182,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1183,132,0.7777777777777778,(color == 'green' and shape == 'square'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1184,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1185,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')"""
1186,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')"""
1187,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')"""
1188,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1189,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'triangle'),42,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')"""
1190,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1191,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'circle'),42,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')"""
1192,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'square'),42,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')"""
1193,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1194,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1195,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False"""
1196,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(shape == 'triangle'),42,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')",1,3,"""lambda x: (x['shape'] == 'triangle')"""
