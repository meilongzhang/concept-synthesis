,Problem_num,accuracy,tr_code_concat,gen_code_concat,true_code_size,gen_code_size,num_stims_seen,stims_seen,passed_tests,failed_tests,tr_code_full,gen_code_full
0,1,0.5555555555555556,True,(color == 'red' or shape == 'circle'),4,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,1,0.5555555555555556,True,(color == 'red' or shape == 'square'),4,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,1,1.0,True,True,4,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,1,1.0,True,True,4,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,1,1.0,True,True,4,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,1,1.0,True,True,4,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,1,1.0,True,True,4,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,1,1.0,True,True,4,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,1,1.0,True,True,4,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True"
0,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,2,0.6666666666666666,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(not shape == 'triangle'),53,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,3,0.6666666666666666,(not (shape == 'circle') or not (color == 'green')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,3,0.7777777777777778,(not (shape == 'circle') or not (color == 'green')),(not color == 'green'),51,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),(color != 'green' or shape == 'square'),51,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color != 'green' or shape == 'square')"
0,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),((color == 'green' and shape == 'square') or (not color == 'green')),51,68,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'square') or (not color == 'green'))"
0,4,0.6666666666666666,not (color == 'green'),True,22,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True"
0,4,0.6666666666666666,not (color == 'green'),(color == 'red' or shape == 'square'),22,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,4,0.6666666666666666,not (color == 'green'),True,22,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True"
0,4,0.6666666666666666,not (color == 'green'),True,22,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True"
0,4,1.0,not (color == 'green'),(color == 'red' or color == 'blue'),22,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,4,0.6666666666666666,not (color == 'green'),True,22,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True"
0,4,1.0,not (color == 'green'),(not color == 'green'),22,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')"
0,4,1.0,not (color == 'green'),(not color == 'green'),22,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')"
0,4,1.0,not (color == 'green'),(not color == 'green'),22,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')"
0,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True"
0,5,0.6666666666666666,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'square'),74,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(True),74,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (True)"
0,5,0.6666666666666666,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'circle'),74,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True"
0,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),not (color == 'blue' and shape == 'triangle'),74,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return not (color == 'blue' and shape == 'triangle')"
0,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),((not color == 'blue') or (not shape == 'triangle')),74,52,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'triangle'))"
0,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),True,50,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True"
0,6,0.4444444444444444,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True"
0,6,0.6666666666666666,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle'),50,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle' or shape == 'triangle'),50,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')"
0,6,0.6666666666666666,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or color == 'blue' or shape == 'triangle'),50,58,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')"
0,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,6,1.0,(not (shape == 'square') or not (color == 'blue')),(not (color == 'blue' and shape == 'square')),50,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))"
0,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True"
0,7,0.5555555555555556,(not (color == 'blue') or shape == 'circle'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')"
0,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True"
0,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,7,0.8888888888888888,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))"
0,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')"
0,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')"
0,7,0.8888888888888888,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))"
0,8,0.4444444444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'circle'),50,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,8,0.6666666666666666,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True"
0,8,0.4444444444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red'),50,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,8,0.6666666666666666,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'green' or color == 'red' or shape == 'square'),50,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or color == 'red' or shape == 'square')"
0,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,9,0.5555555555555556,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,9,0.7777777777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,9,0.7777777777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),True,46,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return True"
0,10,0.5555555555555556,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(True),46,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (True)"
0,10,0.8888888888888888,(not (color == 'blue') or shape == 'triangle'),(not color == 'blue'),46,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (not color == 'blue')"
0,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')"
0,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')"
0,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')"
0,11,0.6666666666666666,not (color == 'blue'),(color == 'red' or shape == 'circle'),21,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,11,0.6666666666666666,not (color == 'blue'),(color == 'red' or shape == 'square'),21,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,11,0.6666666666666666,not (color == 'blue'),True,21,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return True"
0,11,0.6666666666666666,not (color == 'blue'),(color == 'red'),21,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')"
0,11,1.0,not (color == 'blue'),(not color == 'blue'),21,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (not color == 'blue')"
0,11,0.6666666666666666,not (color == 'blue'),(color == 'red'),21,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')"
0,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,12,1.0,color == 'red',(color == 'red'),14,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,0.7777777777777778,color == 'red',(color == 'red' or shape == 'square'),14,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,12,1.0,color == 'red',(color == 'red'),14,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,1.0,color == 'red',(color == 'red'),14,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,1.0,color == 'red',(color == 'red'),14,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,1.0,color == 'red',(color == 'red'),14,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,1.0,color == 'red',(color == 'red'),14,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,1.0,color == 'red',(color == 'red'),14,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,12,1.0,color == 'red',(color == 'red'),14,16,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')"
0,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True"
0,13,0.4444444444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,13,0.4444444444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,13,0.6666666666666666,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),51,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,13,0.5555555555555556,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue'),51,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,13,0.6666666666666666,(not (shape == 'triangle') or not (color == 'red')),(color == 'blue' or color == 'red' or shape == 'circle'),51,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')"
0,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),51,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),True,51,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True"
0,13,1.0,(not (shape == 'triangle') or not (color == 'red')),(not (color == 'red' and shape == 'triangle')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'triangle'))"
0,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'circle'),46,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),46,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,14,0.6666666666666666,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue'),46,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'blue' or color == 'red' or shape == 'circle'),46,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')"
0,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),True,46,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True"
0,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),46,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,14,0.8888888888888888,(color == 'blue' or not (shape == 'triangle')),(not shape == 'triangle'),46,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'circle'),25,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,15,0.7777777777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,15,0.7777777777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or color == 'green'),25,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,15,1.0,not (shape == 'triangle'),(not shape == 'triangle'),25,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'circle'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')"
0,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))"
0,16,0.8888888888888888,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),44,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))"
0,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))"
0,17,0.6666666666666666,not (shape == 'square'),r == 'red' and shape == 'circle':,23,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':"
0,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'circle'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,17,0.7777777777777778,not (shape == 'square'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),23,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or color == 'blue' or shape == 'circle'),23,56,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,17,1.0,not (shape == 'square'),(shape == 'circle' or shape == 'triangle'),23,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (shape == 'circle' or shape == 'triangle')"
0,17,1.0,not (shape == 'square'),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle')),23,104,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle'))"
0,18,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,18,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,18,0.2222222222222222,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red'),92,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')"
0,18,0.5555555555555556,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue'),92,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))"
0,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))"
0,18,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue' or color == 'green'),92,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(not shape == 'triangle'),92,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),((color == 'red' and shape == 'circle') or (color == 'blue')),92,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))"
0,19,0.5555555555555556,(color == 'green' or shape == 'circle'),True,39,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return True"
0,19,0.5555555555555556,(color == 'green' or shape == 'circle'),(color == 'red' and shape == 'circle'),39,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,19,0.3333333333333333,(color == 'green' or shape == 'circle'),(color == 'red'),39,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')"
0,19,0.6666666666666666,(color == 'green' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),39,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))"
0,19,0.2222222222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,19,0.2222222222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,19,0.5555555555555556,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue' or color == 'green'),39,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,19,1.0,(color == 'green' or shape == 'circle'),(color == 'green' or shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')"
0,19,0.7777777777777778,(color == 'green' or shape == 'circle'),(color == 'green' or (not shape == 'square')),39,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))"
0,20,0.7777777777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,20,0.7777777777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,20,0.5555555555555556,shape == 'circle',(color == 'red'),17,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red')"
0,20,0.8888888888888888,shape == 'circle',(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),17,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')"
0,20,0.4444444444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,20,0.4444444444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,21,0.1111111111111111,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),False,78,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return False"
0,21,0.4444444444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square'),78,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,21,0.4444444444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),78,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,21,0.7777777777777778,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),78,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,21,0.8888888888888888,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),78,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))"
0,21,0.8888888888888888,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),True,78,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return True"
0,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),44,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))"
0,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))"
0,22,0.8888888888888888,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),44,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))"
0,22,0.8888888888888888,(not (shape == 'circle') or color == 'blue'),(color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle'),44,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle')"
0,23,0.3333333333333333,not (shape == 'circle'),False,23,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return False"
0,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,23,0.8888888888888888,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,23,0.8888888888888888,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,23,0.7777777777777778,not (shape == 'circle'),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),23,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,23,1.0,not (shape == 'circle'),(shape == 'square' or shape == 'triangle'),23,42,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')"
0,24,0.5555555555555556,(not (shape == 'circle') and not (color == 'blue')),False,51,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return False"
0,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,24,1.0,(not (shape == 'circle') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))"
0,25,0.6666666666666666,shape == 'square',False,17,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return False"
0,25,0.7777777777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,25,0.7777777777777778,shape == 'square',(color == 'red' and shape == 'square'),17,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,25,0.7777777777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,25,1.0,shape == 'square',((color == 'red' or color == 'blue' or color == 'green') and shape == 'square'),17,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and shape == 'square')"
0,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' and shape == 'triangle'),45,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,26,1.0,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'triangle'),45,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')"
0,26,0.8888888888888888,(shape == 'triangle' or not (color == 'red')),(not color == 'red'),45,20,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not color == 'red')"
0,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'triangle'),45,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),True,41,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return True"
0,27,0.3333333333333333,(shape == 'triangle' or color == 'green'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,27,0.7777777777777778,(shape == 'triangle' or color == 'green'),(shape == 'triangle'),41,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')"
0,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,28,0.6666666666666666,shape == 'triangle',False,19,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return False"
0,28,0.7777777777777778,shape == 'triangle',(color == 'blue' and shape == 'triangle'),19,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,28,0.7777777777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,28,0.7777777777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')"
0,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')"
0,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')"
0,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')"
0,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')"
0,29,0.7777777777777778,(shape == 'triangle' and not (color == 'green')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return False"
0,29,0.4444444444444444,(shape == 'triangle' and not (color == 'green')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')"
0,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')"
0,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(shape == 'triangle'),48,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')"
0,30,0.4444444444444444,not (color == 'red'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),20,92,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))"
0,30,0.6666666666666666,not (color == 'red'),(color == 'green' or shape == 'square'),20,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')"
0,30,0.4444444444444444,not (color == 'red'),(color == 'blue' and shape == 'square'),20,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,30,0.4444444444444444,not (color == 'red'),(color == 'blue' and shape == 'circle'),20,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,30,0.6666666666666666,not (color == 'red'),(color == 'blue' or shape == 'square'),20,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,30,0.6666666666666666,not (color == 'red'),(color == 'blue'),20,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue')"
0,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,0.3333333333333333,color == 'blue',(color == 'red' or shape == 'square'),15,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,31,1.0,color == 'blue',(color == 'blue'),15,17,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')"
0,32,0.4444444444444444,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'circle'),61,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,32,0.2222222222222222,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,32,0.8888888888888888,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'green'),61,18,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green')"
0,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),61,67,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')"
0,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,33,0.7777777777777778,(shape == 'circle' and not (color == 'red')),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False"
0,33,0.6666666666666666,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),44,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,33,0.7777777777777778,(shape == 'circle' and not (color == 'red')),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False"
0,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,34,0.7777777777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False"
0,34,0.2222222222222222,(shape == 'triangle' and not (color == 'red')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,34,0.7777777777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False"
0,34,0.6666666666666666,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(shape == 'triangle'),46,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,35,0.6666666666666666,color == 'green',False,16,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False"
0,35,0.3333333333333333,color == 'green',(color == 'red' or shape == 'square'),16,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,35,0.5555555555555556,color == 'green',(color == 'blue' and shape == 'square'),16,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,35,0.6666666666666666,color == 'green',False,16,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False"
0,35,0.7777777777777778,color == 'green',(color == 'green' and shape == 'square'),16,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')"
0,35,0.6666666666666666,color == 'green',False,16,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False"
0,35,1.0,color == 'green',(color == 'green'),16,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')"
0,35,1.0,color == 'green',(color == 'green'),16,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')"
0,35,1.0,color == 'green',(color == 'green'),16,18,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')"
0,36,1.0,False,False,5,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False"
0,36,0.4444444444444444,False,(color == 'red' or shape == 'square'),5,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,36,1.0,False,False,5,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False"
0,36,0.8888888888888888,False,(color == 'blue' and shape == 'square'),5,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,36,0.8888888888888888,False,(color == 'blue' and shape == 'square'),5,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,36,1.0,False,False,5,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False"
0,36,1.0,False,False,5,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False"
0,36,1.0,False,False,5,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False"
0,36,1.0,False,False,5,5,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False"
0,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,37,0.6666666666666666,(not (color == 'green') or not (shape == 'square')),(color == 'red' or shape == 'circle'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,37,1.0,(not (color == 'green') or not (shape == 'square')),not (color == 'green' and shape == 'square'),51,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return not (color == 'green' and shape == 'square')"
0,37,1.0,(not (color == 'green') or not (shape == 'square')),(not (color == 'green' and shape == 'square')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))"
0,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')"
0,38,0.5555555555555556,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')"
0,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True"
0,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True"
0,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True"
0,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))"
0,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))"
0,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(not color == 'green'),45,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')"
0,39,1.0,(shape == 'square' or not (color == 'green')),((not color == 'green') or (shape == 'square')),45,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return ((not color == 'green') or (shape == 'square'))"
0,39,1.0,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue' or shape == 'square'),45,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')"
0,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,40,0.5555555555555556,(shape == 'triangle' or not (color == 'green')),(color == 'red'),47,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True"
0,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')"
0,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')"
0,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')"
0,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True"
0,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True"
0,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True"
0,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'circle'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),r == 'red' and shape == 'circle':,82,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':"
0,42,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,42,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True"
0,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,43,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,43,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return True"
0,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square'),82,77,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square')"
0,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')"
0,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')"
0,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,44,0.5555555555555556,(not (shape == 'square') or color == 'red'),(color == 'red'),43,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True"
0,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),True,43,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True"
0,44,1.0,(not (shape == 'square') or color == 'red'),(color == 'red' or (not shape == 'square')),43,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))"
0,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),((not color == 'blue') or (not shape == 'square')),43,50,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')"
0,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not (color == 'green' and shape == 'square')),43,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))"
0,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')"
0,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),r == 'red' and shape == 'circle':,84,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':"
0,45,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')"
0,45,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return True"
0,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or (not shape == 'square')),84,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))"
0,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not (color == 'blue' and shape == 'square')),84,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))"
0,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not shape == 'square'),84,23,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'square')"
0,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,46,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red'),83,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')"
0,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,46,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'green' or shape == 'circle'),83,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')"
0,46,0.7777777777777778,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),((not color == 'blue') or (not shape == 'square')),83,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red')"
0,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True"
0,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True"
0,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),85,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')"
0,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,48,0.7777777777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,48,0.7777777777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,48,0.5555555555555556,(shape == 'circle' or color == 'red'),(color == 'red' or color == 'blue' or color == 'green'),37,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,48,0.6666666666666666,(shape == 'circle' or color == 'red'),((not color == 'blue') or (not shape == 'square')),37,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))"
0,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),True,43,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True"
0,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True"
0,49,0.5555555555555556,(color == 'red' or not (shape == 'circle')),(color == 'red'),43,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True"
0,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')"
0,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True"
0,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')"
0,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),84,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,51,0.5555555555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')"
0,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return True"
0,51,0.5555555555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')"
0,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')"
0,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or (not shape == 'triangle')),44,45,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))"
0,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')"
0,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),True,83,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return True"
0,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red'),83,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red')"
0,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or color == 'green' or shape == 'square'),83,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')"
0,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or (not shape == 'triangle')),83,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))"
0,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True"
0,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True"
0,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')"
0,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,54,0.6666666666666666,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'circle'),59,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True"
0,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')"
0,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True"
0,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')"
0,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'circle'),39,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),True,39,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return True"
0,56,0.7777777777777778,(shape == 'triangle' or color == 'red'),(color == 'red'),39,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,57,0.6666666666666666,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'square'),60,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,57,0.4444444444444444,(color == 'red' or (color == 'green' and shape == 'circle')),True,60,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return True"
0,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,57,0.7777777777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,57,0.7777777777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,58,0.5555555555555556,(color == 'red' or (not (shape == 'circle') and color == 'green')),True,66,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return True"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,58,0.8888888888888888,(color == 'red' or (not (shape == 'circle') and color == 'green')),(not color == 'blue'),66,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'blue')"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'triangle'),66,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square'),66,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square' or shape == 'triangle'),66,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,59,0.6666666666666666,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,60,0.6666666666666666,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),62,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,61,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(shape == 'circle'),82,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')"
0,61,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')"
0,61,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')"
0,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,61,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'blue' or color == 'red' or shape == 'circle'),82,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')"
0,61,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),82,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))"
0,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))"
0,62,0.4444444444444444,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,62,0.6666666666666666,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,62,0.6666666666666666,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),82,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'blue' or (not shape == 'triangle')),82,46,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))"
0,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')"
0,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')"
0,63,0.7777777777777778,(color == 'green' or not (shape == 'triangle')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True"
0,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,63,0.6666666666666666,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,63,0.7777777777777778,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'circle' or shape == 'square'),47,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'square')"
0,63,0.6666666666666666,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,63,0.8888888888888888,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),47,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,63,0.8888888888888888,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')"
0,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red' or shape == 'square'),54,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),True,83,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return True"
0,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,65,0.4444444444444444,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red'),83,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red')"
0,65,0.5555555555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,65,0.5555555555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,65,0.7777777777777778,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square')),83,102,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square'))"
0,65,0.8888888888888888,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'green' or (not shape == 'triangle')),83,47,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'triangle'))"
0,66,0.8888888888888888,(shape == 'circle' or (shape == 'square' and color == 'red')),(shape == 'circle'),61,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'circle')"
0,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,66,0.6666666666666666,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red'),61,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')"
0,66,0.6666666666666666,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),61,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')"
0,66,0.8888888888888888,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'circle'),61,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,66,0.7777777777777778,(shape == 'circle' or (shape == 'square' and color == 'red')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),61,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))"
0,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,67,0.7777777777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,67,0.7777777777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,67,1.0,(not (color == 'blue') and not (shape == 'triangle')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square')),53,83,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square'))"
0,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),True,49,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True"
0,68,0.2222222222222222,(not (color == 'red') or not (shape == 'square')),(color == 'red'),49,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')"
0,68,0.4444444444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,68,0.4444444444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,68,0.6666666666666666,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),49,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')"
0,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),49,44,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))"
0,68,0.7777777777777778,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),49,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),49,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))"
0,68,1.0,(not (color == 'red') or not (shape == 'square')),(not (color == 'red' and shape == 'square')),49,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))"
0,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True"
0,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,69,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))"
0,69,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))"
0,69,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))"
0,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,69,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'blue' or (not shape == 'square')),84,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))"
0,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),True,109,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return True"
0,70,0.4444444444444444,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'circle'),109,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,70,0.7777777777777778,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),109,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))"
0,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),109,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))"
0,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or color == 'blue' or shape == 'triangle'),109,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')"
0,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'blue' or shape == 'circle' or shape == 'triangle'),109,61,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle' or shape == 'triangle')"
0,70,1.0,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),109,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))"
0,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,71,0.6666666666666666,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,71,0.6666666666666666,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or shape == 'circle' or shape == 'triangle'),45,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle' or shape == 'triangle')"
0,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or (not shape == 'square')),45,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))"
0,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')"
0,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,72,0.8888888888888888,(not (shape == 'square') and not (color == 'green')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),52,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))"
0,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),66,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))"
0,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))"
0,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))"
0,73,0.7777777777777778,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,73,0.8888888888888888,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))"
0,73,1.0,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))"
0,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')"
0,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')"
0,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,74,0.7777777777777778,(not (shape == 'square') and not (color == 'blue')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),51,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))"
0,74,0.7777777777777778,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),51,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))"
0,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,74,0.8888888888888888,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,74,0.8888888888888888,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,74,1.0,(not (shape == 'square') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle'))"
0,75,0.6666666666666666,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'circle'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,75,0.8888888888888888,(not (shape == 'square') and color == 'red'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,75,0.6666666666666666,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))"
0,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))"
0,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))"
0,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))"
0,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))"
0,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))"
0,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' and shape == 'circle'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,76,0.4444444444444444,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue'),43,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (not shape == 'triangle')),43,46,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))"
0,76,0.6666666666666666,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (color == 'red' and shape == 'circle')),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))"
0,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,76,0.8888888888888888,(shape == 'circle' or not (color == 'red')),(not (color == 'red' and shape == 'square')),43,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))"
0,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,77,0.5555555555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,77,0.5555555555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,77,0.3333333333333333,(color == 'blue' or shape == 'circle'),(color == 'red'),38,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')"
0,77,0.6666666666666666,(color == 'blue' or shape == 'circle'),(color == 'red' or color == 'blue'),38,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,77,0.8888888888888888,(color == 'blue' or shape == 'circle'),(color == 'blue' or (color == 'red' and shape == 'circle')),38,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))"
0,77,0.8888888888888888,(color == 'blue' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue')),38,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))"
0,77,0.7777777777777778,(color == 'blue' or shape == 'circle'),(color == 'blue' or color == 'green' or shape == 'circle'),38,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')"
0,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')"
0,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')"
0,78,0.6666666666666666,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return True"
0,78,0.4444444444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,78,0.4444444444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' and shape == 'circle'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))"
0,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))"
0,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))"
0,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')"
0,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')"
0,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (not color == 'red')),84,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (not color == 'red'))"
0,79,0.4444444444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' or shape == 'circle'),91,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,79,0.4444444444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle'),91,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,79,0.2222222222222222,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red'),91,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red')"
0,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),91,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))"
0,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' or color == 'blue') and shape == 'circle'),91,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')"
0,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),91,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))"
0,79,0.6666666666666666,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),91,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))"
0,79,0.7777777777777778,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),91,171,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))"
0,79,1.0,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green'),91,148,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green')"
0,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(shape == 'circle'),73,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')"
0,80,0.5555555555555556,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' or shape == 'circle'),73,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,80,0.3333333333333333,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red'),73,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')"
0,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),73,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')"
0,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' or color == 'blue') and shape == 'circle'),73,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')"
0,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),73,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))"
0,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))"
0,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))"
0,80,1.0,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),73,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))"
0,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'circle'),63,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,81,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue' or color == 'green'),63,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,81,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or shape == 'circle'),63,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')"
0,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or (not shape == 'square')),63,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))"
0,82,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,82,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,82,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red'),65,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,82,0.7777777777777778,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),65,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')"
0,82,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,82,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')"
0,82,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),65,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')"
0,82,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(shape == 'circle'),65,19,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'circle')"
0,82,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'triangle')),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle')),65,129,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle'))"
0,83,0.6666666666666666,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,83,0.6666666666666666,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')"
0,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')"
0,83,0.5555555555555556,(not (color == 'blue') and shape == 'circle'),(color == 'red' or color == 'green'),45,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')"
0,84,0.7777777777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,84,0.7777777777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,85,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))"
0,85,0.7777777777777778,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))"
0,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,85,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))"
0,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))"
0,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))"
0,86,0.3333333333333333,(color == 'green' or not (shape == 'circle')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,86,0.6666666666666666,(color == 'green' or not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,86,0.8888888888888888,(color == 'green' or not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),45,42,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')"
0,86,0.7777777777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,86,0.7777777777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,87,0.7777777777777778,(not (color == 'green') and not (shape == 'circle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),52,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))"
0,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,88,0.4444444444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,88,0.4444444444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,88,0.5555555555555556,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),85,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))"
0,88,0.7777777777777778,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle')),85,171,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle'))"
0,88,0.8888888888888888,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square')),85,215,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square'))"
0,88,1.0,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),85,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))"
0,89,0.6666666666666666,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')"
0,89,0.8888888888888888,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,89,0.4444444444444444,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),63,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,89,0.7777777777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),63,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,89,0.8888888888888888,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,89,0.7777777777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),63,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))"
0,89,0.6666666666666666,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square' or shape == 'triangle'),63,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')"
0,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))"
0,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))"
0,90,0.5555555555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),True,70,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return True"
0,90,0.5555555555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'square'),70,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,90,0.8888888888888888,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(shape == 'square' or shape == 'triangle'),70,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')"
0,90,0.8888888888888888,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),70,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))"
0,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),r == 'red' and shape == 'circle':,66,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':"
0,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'square'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),66,84,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))"
0,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,91,0.7777777777777778,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))"
0,91,0.8888888888888888,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))"
0,91,1.0,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))"
0,92,0.8888888888888888,(color == 'red' and not (shape == 'circle')),r == 'red':,44,11,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	if color == 'red':"
0,92,0.8888888888888888,(color == 'red' and not (shape == 'circle')),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,92,0.6666666666666666,(color == 'red' and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')"
0,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))"
0,93,0.5555555555555556,(shape == 'square' or not (color == 'red')),(shape == 'square'),43,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'square')"
0,93,0.3333333333333333,(shape == 'square' or not (color == 'red')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,93,0.3333333333333333,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,93,0.4444444444444444,(shape == 'square' or not (color == 'red')),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),43,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))"
0,93,0.4444444444444444,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),43,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')"
0,93,0.6666666666666666,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue'),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')"
0,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,93,0.7777777777777778,(shape == 'square' or not (color == 'red')),(color == 'blue' or shape == 'square'),43,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,94,0.5555555555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))"
0,94,0.5555555555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' or color == 'blue') and shape == 'square'),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,94,0.7777777777777778,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or (color == 'red' and shape == 'square')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'square'))"
0,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle')),84,105,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle'))"
0,95,0.2222222222222222,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,95,0.4444444444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,95,0.4444444444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' and shape == 'square'),86,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,95,0.5555555555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),86,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))"
0,95,0.5555555555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' or color == 'blue') and shape == 'square'),86,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,95,0.7777777777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))"
0,95,0.7777777777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))"
0,95,0.8888888888888888,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,95,0.8888888888888888,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,96,0.5555555555555556,(shape == 'square' or color == 'blue'),True,38,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return True"
0,96,0.5555555555555556,(shape == 'square' or color == 'blue'),(color == 'red' or shape == 'square'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,96,0.5555555555555556,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,96,0.6666666666666666,(shape == 'square' or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),38,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))"
0,96,0.6666666666666666,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),38,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')"
0,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,96,0.8888888888888888,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue'),38,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')"
0,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,96,1.0,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square'),38,103,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square')"
0,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,97,0.5555555555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))"
0,97,0.6666666666666666,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'circle'),84,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'circle')"
0,97,0.5555555555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))"
0,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')"
0,98,0.4444444444444444,(color == 'green' or shape == 'square'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return False"
0,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' and shape == 'square'),39,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,98,0.6666666666666666,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,98,0.6666666666666666,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,98,0.7777777777777778,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle'),39,103,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle')"
0,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')"
0,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')"
0,99,0.5555555555555556,(shape == 'square' or (color == 'green' and shape == 'triangle')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False"
0,99,0.6666666666666666,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,99,0.6666666666666666,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'square'),65,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,99,1.0,(shape == 'square' or (color == 'green' and shape == 'triangle')),(shape == 'square' or (color == 'green' and shape == 'triangle')),65,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'green' and shape == 'triangle'))"
0,100,0.7777777777777778,(shape == 'square' and not (color == 'green')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return False"
0,100,0.6666666666666666,(shape == 'square' and not (color == 'green')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,100,0.8888888888888888,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,100,0.8888888888888888,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')"
0,101,0.4444444444444444,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red'),60,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')"
0,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,101,0.7777777777777778,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle'),60,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle')"
0,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))"
0,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))"
0,102,0.7777777777777778,(shape == 'square' and not (color == 'blue')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False"
0,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square')),45,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square'))"
0,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'square'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'square')"
0,103,0.8888888888888888,(color == 'red' and shape == 'square'),False,38,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')"
0,104,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,104,0.2222222222222222,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,104,0.6666666666666666,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle'),86,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle' or color == 'blue' or color == 'green'),86,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle' or color == 'blue' or color == 'green')"
0,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))"
0,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))"
0,105,0.3333333333333333,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),False,111,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return False"
0,105,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' or shape == 'square'),111,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,105,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' and shape == 'triangle'),111,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,105,0.6666666666666666,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'square'),111,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or (not shape == 'circle')),111,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'circle'))"
0,106,0.3333333333333333,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'circle'),40,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,106,0.3333333333333333,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,106,0.5555555555555556,(color == 'blue' or shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' or shape == 'circle'),108,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' and shape == 'triangle'),108,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' and shape == 'triangle'),108,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')"
0,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')"
0,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')"
0,108,0.4444444444444444,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),False,75,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return False"
0,108,0.5555555555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue'),75,17,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue')"
0,108,0.5555555555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'red' and shape == 'triangle'),75,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')"
0,108,0.8888888888888888,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),((not color == 'red') and (not shape == 'square')),75,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return ((not color == 'red') and (not shape == 'square'))"
0,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')"
0,109,0.5555555555555556,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),False,64,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return False"
0,109,0.2222222222222222,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' or shape == 'square'),64,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,109,0.6666666666666666,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' and shape == 'triangle'),64,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,109,0.7777777777777778,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),((color == 'blue' or color == 'red') and shape == 'triangle'),64,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'red') and shape == 'triangle')"
0,110,0.5555555555555556,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(False),65,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (False)"
0,110,0.4444444444444444,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red'),65,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')"
0,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,110,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,110,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,111,0.5555555555555556,(shape == 'triangle' or (color == 'green' and shape == 'square')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return False"
0,111,0.4444444444444444,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,111,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,111,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')"
0,111,0.7777777777777778,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' or color == 'blue') and shape == 'triangle'),65,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')"
0,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'),65,129,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')"
0,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),65,131,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))"
0,112,0.7777777777777778,(shape == 'triangle' and not (color == 'blue')),False,47,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False"
0,112,0.4444444444444444,(shape == 'triangle' and not (color == 'blue')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,112,1.0,(shape == 'triangle' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'triangle'),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'triangle')"
0,113,0.8888888888888888,(color == 'red' and shape == 'triangle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return False"
0,113,0.5555555555555556,(color == 'red' and shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')"
0,114,0.3333333333333333,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),r == 'red' and shape == 'circle':,69,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':"
0,114,0.5555555555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'square'),69,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,114,0.5555555555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'circle'),69,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue'),69,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue')"
0,114,0.8888888888888888,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,114,0.8888888888888888,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or (not shape == 'triangle')),69,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))"
0,115,0.4444444444444444,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),False,71,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return False"
0,115,0.3333333333333333,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'red' or shape == 'square'),71,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')"
0,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square' or shape == 'triangle'),71,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square' or shape == 'triangle')"
0,116,0.5555555555555556,(color == 'blue' or (color == 'green' and shape == 'triangle')),False,63,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False"
0,116,0.6666666666666666,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'square'),63,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,116,0.6666666666666666,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' or shape == 'triangle'),63,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')"
0,117,0.5555555555555556,(not (color == 'red') and not (shape == 'triangle')),(False),52,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (False)"
0,117,0.4444444444444444,(not (color == 'red') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,117,0.7777777777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,117,0.7777777777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')"
0,117,1.0,(not (color == 'red') and not (shape == 'triangle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),52,67,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')"
0,118,0.7777777777777778,(color == 'blue' and not (shape == 'triangle')),(color == shape),47,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == shape)"
0,118,0.4444444444444444,(color == 'blue' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))"
0,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))"
0,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (shape == 'circle' or shape == 'square')),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'square'))"
0,119,0.5555555555555556,(not (color == 'red') and not (shape == 'square')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return False"
0,119,0.4444444444444444,(not (color == 'red') and not (shape == 'square')),(color == 'red' or shape == 'circle'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),(not color == 'red'),50,20,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (not color == 'red')"
0,119,0.6666666666666666,(not (color == 'red') and not (shape == 'square')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue')"
0,119,0.6666666666666666,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and shape == 'circle'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))"
0,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),50,87,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))"
0,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))"
0,120,0.7777777777777778,(color == 'blue' and not (shape == 'square')),r == 'red' and shape == 'circle':,45,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':"
0,120,0.2222222222222222,(color == 'blue' and not (shape == 'square')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),45,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))"
0,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))"
0,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))"
0,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))"
0,121,0.8888888888888888,(shape == 'circle' and color == 'blue'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return False"
0,121,0.3333333333333333,(shape == 'circle' and color == 'blue'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,121,0.7777777777777778,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),39,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,122,0.5555555555555556,(not (color == 'red') and not (shape == 'circle')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,122,0.4444444444444444,(not (color == 'red') and not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))"
0,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))"
0,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),50,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')"
0,122,1.0,(not (color == 'red') and not (shape == 'circle')),((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle'))"
0,123,0.6666666666666666,(color == 'blue' and not (shape == 'circle')),(color == 'red' and shape == 'circle'),45,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,123,0.4444444444444444,(color == 'blue' and not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,123,0.7777777777777778,(color == 'blue' and not (shape == 'circle')),False,45,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,123,0.8888888888888888,(color == 'blue' and not (shape == 'circle')),(color == 'blue'),45,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')"
0,123,0.8888888888888888,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and shape == 'square'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))"
0,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))"
0,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))"
0,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))"
0,124,0.7777777777777778,(not (color == 'red') and shape == 'square'),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,124,0.6666666666666666,(not (color == 'red') and shape == 'square'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,124,0.7777777777777778,(not (color == 'red') and shape == 'square'),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,124,1.0,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square'),44,83,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square')"
0,124,1.0,(not (color == 'red') and shape == 'square'),((color == 'green' or color == 'blue') and shape == 'square'),44,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and shape == 'square')"
0,125,0.7777777777777778,(shape == 'square' and color == 'blue'),(color == 'red' and shape == 'circle'),39,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')"
0,125,0.7777777777777778,(shape == 'square' and color == 'blue'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),39,92,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))"
0,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,125,0.8888888888888888,(shape == 'square' and color == 'blue'),False,39,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return False"
0,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')"
0,126,0.2222222222222222,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,126,0.6666666666666666,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False"
0,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False"
0,126,0.6666666666666666,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')"
0,127,0.8888888888888888,(shape == 'triangle' and color == 'blue'),False,41,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False"
0,127,0.3333333333333333,(shape == 'triangle' and color == 'blue'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,127,0.8888888888888888,(shape == 'triangle' and color == 'blue'),False,41,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False"
0,127,0.7777777777777778,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'circle'),41,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,128,0.7777777777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False"
0,128,0.4444444444444444,(color == 'green' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),48,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,128,0.7777777777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False"
0,128,0.8888888888888888,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')"
0,128,0.8888888888888888,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')"
0,128,1.0,(color == 'green' and not (shape == 'triangle')),(color == 'green' and (not shape == 'triangle')),48,48,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green' and (not shape == 'triangle'))"
0,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False"
0,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),46,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False"
0,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False"
0,129,0.8888888888888888,(color == 'green' and not (shape == 'square')),(color == 'green'),46,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green')"
0,129,0.8888888888888888,(color == 'green' and not (shape == 'square')),(color == 'green' and shape == 'circle'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')"
0,129,1.0,(color == 'green' and not (shape == 'square')),(color == 'green' and (shape == 'circle' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'circle' or shape == 'triangle'))"
0,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False"
0,130,0.5555555555555556,(color == 'green' and shape == 'circle'),(color == 'red' or shape == 'circle'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')"
0,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False"
0,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'circle'),40,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False"
0,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'green'),40,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green')"
0,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')"
0,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')"
0,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,131,0.6666666666666666,(color == 'green' and not (shape == 'circle')),(color == 'green' or shape == 'square'),46,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')"
0,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,131,0.8888888888888888,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')"
0,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False"
0,131,0.8888888888888888,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')"
0,131,1.0,(color == 'green' and not (shape == 'circle')),(color == 'green' and (shape == 'square' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'square' or shape == 'triangle'))"
0,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,132,0.5555555555555556,(color == 'green' and shape == 'square'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')"
0,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,132,0.7777777777777778,(color == 'green' and shape == 'square'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False"
0,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')"
0,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')"
0,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')"
0,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False"
0,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'triangle'),42,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')"
0,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False"
0,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'circle'),42,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')"
0,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'square'),42,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')"
0,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False"
0,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False"
0,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False"
0,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(shape == 'triangle'),42,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')"
