,Problem_num,accuracy,tr_code_concat,gen_code_concat,true_code_size,gen_code_size,num_stims_seen,stims_seen,passed_tests,failed_tests,tr_code_full,gen_code_full,tr_domain,gen_domain,gen_reshaped,priors,posteriors,likelihoods,correctResults,normalized_posteriors
0,1,0.5555555556,True,(color == 'red' or shape == 'circle'),4,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",9,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, True, True, True, True, True, True, True]",0.0014216012
1,1,0.5555555556,True,(color == 'red' or shape == 'square'),4,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",9,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, True, True, True, True, True, True, True]",0.0016540901
2,1,1.0,True,True,4,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.7100687458
3,1,1.0,True,True,4,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.8682209035
4,1,1.0,True,True,4,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.8702821763
5,1,1.0,True,True,4,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.8703322761000001
6,1,1.0,True,True,4,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.9792856792
7,1,1.0,True,True,4,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.9805658774
8,1,1.0,True,True,4,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9,"""lambda x: True""",-1.3862943611,-1.3907954865,-0.0045011254,"[True, True, True, True, True, True, True, True, True]",0.9811764955000001
9,2,0.8888888889000001,(not (shape == 'triangle') or not (color == 'green')),True,53,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, True, False]",0.47140868890000004
10,2,0.6666666667000001,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, True, True, True, False]",0.0013579718
11,2,0.8888888889000001,(not (shape == 'triangle') or not (color == 'green')),True,53,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, True, False]",0.7088117982000001
12,2,0.7777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, True, True, True, True, True, True, False]",0.0028289732000000003
13,2,0.7777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, True, True, True, True, True, True, False]",0.002829438
14,2,0.8888888889000001,(not (shape == 'triangle') or not (color == 'green')),True,53,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, True, False]",0.8666889605
15,2,0.8888888889000001,(not (shape == 'triangle') or not (color == 'green')),True,53,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, True, False]",0.978566551
16,2,0.8888888889000001,(not (shape == 'triangle') or not (color == 'green')),True,53,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, True, False]",0.9786297763
17,2,0.7777777778,(not (shape == 'triangle') or not (color == 'green')),(not shape == 'triangle'),53,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not shape == 'triangle')",8,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, True, True, True, True, False]",3.0277200000000002e-05
18,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, False, True, True]",0.47102431770000003
19,3,0.6666666667000001,(not (shape == 'circle') or not (color == 'green')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, True, False, True, True]",0.001356716
20,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, False, True, True]",0.572833455
21,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, False, True, True]",0.6715130394000001
22,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, False, True, True]",0.6715985433
23,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, False, True, True]",0.6716276124
24,3,0.7777777778,(not (shape == 'circle') or not (color == 'green')),(not color == 'green'),51,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",8,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, True, True, False, True, True]",0.7082337706
25,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),(color != 'green' or shape == 'square'),51,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color != 'green' or shape == 'square')",8,7,"""lambda x: (x['color'] != 'green' or x['shape'] == 'square')""",88888.88888,88888.88888,88888.88888,"[True, True, True, True, True, True, False, True, True]",0.0
26,3,0.8888888889000001,(not (shape == 'circle') or not (color == 'green')),((color == 'green' and shape == 'square') or (not color == 'green')),51,68,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'square') or (not color == 'green'))",8,7,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'square') or (not x['color'] == 'green'))""",-11.6105057933,-19.2154092532,-7.6049034599,"[True, True, True, True, True, True, False, True, True]",6.5779e-06
27,4,0.6666666667000001,not (color == 'green'),True,22,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, True, True, False, False, False]",0.4706446097
28,4,0.6666666667000001,not (color == 'green'),(color == 'red' or shape == 'square'),22,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, True, False, False, False]",0.0013545909
29,4,0.6666666667000001,not (color == 'green'),True,22,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, True, True, False, False, False]",0.5718708134
30,4,0.6666666667000001,not (color == 'green'),True,22,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, True, True, False, False, False]",0.6702088773
31,4,1.0,not (color == 'green'),(color == 'red' or color == 'blue'),22,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-7.1151972484,-0.0045011254,"[True, True, True, True, True, True, False, False, False]",0.0021887153
32,4,0.6666666667000001,not (color == 'green'),True,22,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, True, True, False, False, False]",0.6703230147
33,4,1.0,not (color == 'green'),(not color == 'green'),22,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-2.4894077752,-0.0045011254,"[True, True, True, True, True, True, False, False, False]",0.7038999318
34,4,1.0,not (color == 'green'),(not color == 'green'),22,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-2.4894077752,-0.0045011254,"[True, True, True, True, True, True, False, False, False]",0.7073465485
35,4,1.0,not (color == 'green'),(not color == 'green'),22,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-2.4894077752,-0.0045011254,"[True, True, True, True, True, True, False, False, False]",0.7089388056
36,5,0.8888888889000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, False, True, True, True]",0.5582595299
37,5,0.6666666667000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'square'),74,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, False, True, True, True]",0.0016476396
38,5,0.8888888889000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(True),74,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (True)",8,9,"""lambda x: (True)""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, False, True, True, True]",0.7070505371
39,5,0.6666666667000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'circle'),74,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, False, True, True, True]",0.0021935562000000002
40,5,0.8888888889000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, False, True, True, True]",0.8657526544
41,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),not (color == 'blue' and shape == 'triangle'),74,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return not (color == 'blue' and shape == 'triangle')",8,8,"""lambda x: not (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, True, True, True, True, False, True, True, True]",0.4377761807
42,5,0.8888888889000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-18.9922657019,-7.6049034599,"[True, True, True, True, True, False, True, True, True]",1.8723e-06
43,5,0.8888888889000001,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-18.9922657019,-7.6049034599,"[True, True, True, True, True, False, True, True, True]",1.8725e-06
44,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),((not color == 'blue') or (not shape == 'triangle')),74,52,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'triangle'))",8,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'triangle'))""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, True, False, True, True, True]",0.23840613700000002
45,6,0.8888888889000001,(not (shape == 'square') or not (color == 'blue')),True,50,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, False, True, True, True, True]",0.5582841476
46,6,0.4444444444,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, True, True, True, False, True, True, True, True]",0.0016477240000000002
47,6,0.8888888889000001,(not (shape == 'square') or not (color == 'blue')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, False, True, True, True, True]",0.7066619491
48,6,0.6666666667000001,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle'),50,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, False, True, True, True, True]",0.0021921609
49,6,0.8888888889000001,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle' or shape == 'triangle'),50,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, True, False, True, True, True, True]",0.0016753809
50,6,0.6666666667000001,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or color == 'blue' or shape == 'triangle'),50,58,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'triangle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, True, True, True, False, True, True, True, True]",1.2390000000000001e-06
51,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",8,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, True, True, True, True]",0.2091363911
52,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",8,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, True, True, True, True]",0.23760156340000002
53,6,1.0,(not (shape == 'square') or not (color == 'blue')),(not (color == 'blue' and shape == 'square')),50,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",8,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, True, True, True, False, True, True, True, True]",0.49896333660000003
54,7,0.7777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, False, False, True, True, True]",0.4072228968
55,7,0.5555555556,(not (color == 'blue') or shape == 'circle'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, True, False, False, True, True, True]",0.30240367020000003
56,7,0.7777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, False, False, True, True, True]",0.4811544005
57,7,0.7777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, False, False, True, True, True]",0.0021947743
58,7,0.8888888889000001,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, True, True, True, False, False, True, True, True]",0.3358039742
59,7,0.7777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, False, False, True, True, True]",0.3765504216
60,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'circle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, True, False, False, True, True, True]",0.0047630383
61,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'circle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, True, False, False, True, True, True]",0.0177786347
62,7,0.8888888889000001,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, True, True, True, False, False, True, True, True]",0.0015710365
63,8,0.4444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'circle'),50,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, True, True, False, True, True, True, True, True]",0.001037559
64,8,0.6666666667000001,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, True, True, True, True, True]",0.0011561623
65,8,0.8888888889000001,(not (color == 'blue') or not (shape == 'circle')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, False, True, True, True, True, True]",0.4831927043
66,8,0.4444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red'),50,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",8,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[True, True, True, False, True, True, True, True, True]",0.7126080331
67,8,0.6666666667000001,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, True, True, True, True, True]",0.2420771455
68,8,0.8888888889000001,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, True, True, True]",0.0070518716000000006
69,8,0.8888888889000001,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, True, True, True]",5.3783e-06
70,8,0.8888888889000001,(not (color == 'blue') or not (shape == 'circle')),(color == 'green' or color == 'red' or shape == 'square'),50,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or color == 'red' or shape == 'square')",8,7,"""lambda x: (x['color'] == 'green' or x['color'] == 'red' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, True, True, True]",5.3784e-06
71,8,0.8888888889000001,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, True, True, True]",5.3784e-06
72,9,0.5555555556,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, True, False, True, False, False, True, False]",0.0010387606
73,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, True, False, False, True, False]",0.001157009
74,9,0.7777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, True, False, False, True, False]",0.32224528680000003
75,9,0.7777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, True, False, False, True, False]",0.7125887539
76,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, True, False, False, True, False]",0.2421206776
77,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, True, False, False, True, False]",0.3785809255
78,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, True, False, False, True, False]",0.4807578518
79,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, True, False, False, True, False]",0.5224618711
80,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, True, False, False, True, False]",0.5226090519000001
81,10,0.7777777778,(not (color == 'blue') or shape == 'triangle'),True,46,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, False, False, True, True, True, True]",0.4730440006
82,10,0.5555555556,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, True, False, False, True, True, True, True]",0.0013633175000000001
83,10,0.7777777778,(not (color == 'blue') or shape == 'triangle'),(True),46,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (True)",7,9,"""lambda x: (True)""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, False, False, True, True, True, True]",0.5761069287
84,10,0.8888888889000001,(not (color == 'blue') or shape == 'triangle'),(not color == 'blue'),46,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (not color == 'blue')",7,6,"""lambda x: (not x['color'] == 'blue')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, False, False, True, True, True, True]",0.5509051866
85,10,0.7777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, False, True, True, True, True]",0.0042368832
86,10,0.7777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, False, True, True, True, True]",0.3855063715
87,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, False, True, True, True, True]",0.0161055428
88,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, False, True, True, True, True]",0.0161260569
89,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, False, True, True, True, True]",0.016126057000000003
90,11,0.6666666667000001,not (color == 'blue'),(color == 'red' or shape == 'circle'),21,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, False, False, True, True, True]",0.0009128866
91,11,0.6666666667000001,not (color == 'blue'),(color == 'red' or shape == 'square'),21,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, False, False, True, True, True]",0.0010029707
92,11,0.6666666667000001,not (color == 'blue'),True,21,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, False, False, True, True, True]",0.4157866456
93,11,0.6666666667000001,not (color == 'blue'),(color == 'red'),21,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, False, False, True, True, True]",0.5238480448
94,11,1.0,not (color == 'blue'),(not color == 'blue'),21,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (not color == 'blue')",6,6,"""lambda x: (not x['color'] == 'blue')""",-2.4849066498,-2.4894077752,-0.0045011254,"[True, True, True, False, False, False, True, True, True]",0.2630903939
95,11,0.6666666667000001,not (color == 'blue'),(color == 'red'),21,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, False, False, True, True, True]",0.5267088117000001
96,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-7.1151972484,-0.0045011254,"[True, True, True, False, False, False, True, True, True]",0.0069384029000000005
97,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-7.1151972484,-0.0045011254,"[True, True, True, False, False, False, True, True, True]",0.0069442908
98,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-7.1151972484,-0.0045011254,"[True, True, True, False, False, False, True, True, True]",0.0069442937000000005
99,12,1.0,color == 'red',(color == 'red'),14,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.2725585039
100,12,0.7777777778,color == 'red',(color == 'red' or shape == 'square'),14,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, False, False, False, False, False]",0.0011564601
101,12,1.0,color == 'red',(color == 'red'),14,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.3222164544
102,12,1.0,color == 'red',(color == 'red'),14,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.7117585318
103,12,1.0,color == 'red',(color == 'red'),14,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.7160728355
104,12,1.0,color == 'red',(color == 'red'),14,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.7170510982
105,12,1.0,color == 'red',(color == 'red'),14,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.8359663152
106,12,1.0,color == 'red',(color == 'red'),14,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.8360376707
107,12,1.0,color == 'red',(color == 'red'),14,16,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-1.7962605946,-0.0045011254,"[True, True, True, False, False, False, False, False, False]",0.8360383711
108,13,0.8888888889000001,(not (shape == 'triangle') or not (color == 'red')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, False, True, True, True, True, True, True]",0.5613779601000001
109,13,0.4444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, True, False, True, True, True, True, True, True]",0.0016596713
110,13,0.4444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, True, False, True, True, True, True, True, True]",8.7883e-06
111,13,0.6666666667000001,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),51,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",8,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, True, False, True, True, True, True, True, True]",1.054e-07
112,13,0.5555555556,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue'),51,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-37.5168065864,-30.4061104634,"[True, True, False, True, True, True, True, True, True]",1.13843e-05
113,13,0.6666666667000001,(not (shape == 'triangle') or not (color == 'red')),(color == 'blue' or color == 'red' or shape == 'circle'),51,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",8,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'red' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, True, False, True, True, True, True, True, True]",1.5702e-06
114,13,0.8888888889000001,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),51,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-18.9922657019,-7.6049034599,"[True, True, False, True, True, True, True, True, True]",2.3714000000000003e-06
115,13,0.8888888889000001,(not (shape == 'triangle') or not (color == 'red')),True,51,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, False, True, True, True, True, True, True]",0.052290109
116,13,1.0,(not (shape == 'triangle') or not (color == 'red')),(not (color == 'red' and shape == 'triangle')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'triangle'))",8,8,"""lambda x: (not (x['color'] == 'red' and x['shape'] == 'triangle'))""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, True, False, True, True, True, True, True, True]",0.6569599694
117,14,0.5555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'circle'),46,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, False, True, True, True, True, True, False]",0.0012039464000000001
118,14,0.5555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, False, True, True, True, True, True, False]",0.0013657218000000001
119,14,0.5555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, False, True, True, True, True, True, False]",2.695e-06
120,14,0.7777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),46,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[True, True, False, True, True, True, True, True, False]",3.21e-08
121,14,0.6666666667000001,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue'),46,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-29.9164042519,-22.8057081289,"[True, True, False, True, True, True, True, True, False]",3.4696e-06
122,14,0.7777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'blue' or color == 'red' or shape == 'circle'),46,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'red' or x['shape'] == 'circle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[True, True, False, True, True, True, True, True, False]",3.3991e-06
123,14,0.7777777778,(color == 'blue' or not (shape == 'triangle')),True,46,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, False, True, True, True, True, True, False]",0.1141058663
124,14,0.7777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),46,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-26.5926680364,-15.2053057944,"[True, True, False, True, True, True, True, True, False]",5.1749e-06
125,14,0.8888888889000001,(color == 'blue' or not (shape == 'triangle')),(not shape == 'triangle'),46,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, False, True, True, True, True, True, False]",0.0939018818
126,15,0.6666666667000001,not (shape == 'triangle'),(color == 'red' or shape == 'circle'),25,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, True, False, True, True, False]",0.0012037291
127,15,0.6666666667000001,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, True, False, True, True, False]",0.0013663413
128,15,0.6666666667000001,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, True, False, True, True, False]",2.6861e-06
129,15,0.6666666667000001,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, True, False, True, True, False, True, True, False]",3.2e-08
130,15,0.7777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-31.0441041224,-15.2053057944,"[True, True, False, True, True, False, True, True, False]",1.1197e-06
131,15,0.7777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-31.0441041224,-15.2053057944,"[True, True, False, True, True, False, True, True, False]",1.1268e-06
132,15,0.6666666667000001,not (shape == 'triangle'),(color == 'red' or color == 'blue' or color == 'green'),25,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-34.1930703709,-22.8057081289,"[True, True, False, True, True, False, True, True, False]",0.0
133,15,0.6666666667000001,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, True, False, True, True, False, True, True, False]",0.0
134,15,1.0,not (shape == 'triangle'),(not shape == 'triangle'),25,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-2.4894077752,-0.0045011254,"[True, True, False, True, True, False, True, True, False]",0.7134936348
135,16,0.7777777778,(color == 'blue' or not (shape == 'square')),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, False, True, True, True, True, True, False, True]",0.5632960868
136,16,0.5555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'circle'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, True, True, True, False, True]",4.6897e-06
137,16,0.5555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, True, True, True, False, True]",9.0311e-06
138,16,0.5555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, True, True, True, False, True]",4.6e-09
139,16,0.7777777778,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle' or x['shape'] == 'circle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[True, False, True, True, True, True, True, False, True]",1.3e-09
140,16,0.7777777778,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",7,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, True]",0.0
141,16,0.8888888889000001,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),44,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",7,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, True]",0.0
142,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))""",-7.7674756594000005,-7.7719767847,-0.0045011254,"[True, False, True, True, True, True, True, False, True]",0.5088683546
143,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))""",-7.7674756594000005,-7.7719767847,-0.0045011254,"[True, False, True, True, True, True, True, False, True]",0.5089702984
144,17,0.6666666667000001,not (shape == 'square'),r == 'red' and shape == 'circle':,23,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5,"""lambda x: r == 'red' and x['shape'] == 'circle':""",88888.88888,88888.88888,88888.88888,"[True, False, True, True, False, True, True, False, True]",0.0
145,17,0.6666666667000001,not (shape == 'square'),(color == 'red' or shape == 'circle'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, False, True, True, False, True]",4.6518e-06
146,17,0.6666666667000001,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, False, True, True, False, True]",8.8915e-06
147,17,0.6666666667000001,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, False, True, True, False, True]",4.5e-09
148,17,0.6666666667000001,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, False, True, True, False, True]",4.6e-09
149,17,0.7777777778,not (shape == 'square'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),23,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-31.0441041224,-15.2053057944,"[True, False, True, True, False, True, True, False, True]",3.8014e-06
150,17,0.6666666667000001,not (shape == 'square'),(color == 'red' or color == 'blue' or shape == 'circle'),23,56,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, False, True, True, False, True, True, False, True]",1e-10
151,17,1.0,not (shape == 'square'),(shape == 'circle' or shape == 'triangle'),23,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (shape == 'circle' or shape == 'triangle')",6,6,"""lambda x: (x['shape'] == 'circle' or x['shape'] == 'triangle')""",-7.110696123,-7.1151972484,-0.0045011254,"[True, False, True, True, False, True, True, False, True]",0.0238400026
152,17,1.0,not (shape == 'square'),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle')),23,104,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle'))",6,6,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, True, True, False, True, True, False, True]",0.0
153,18,0.4444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, False, True, True, True, True, True, False]",0.0009155126
154,18,0.4444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, False, True, True, True, True, True, False]",4.7223000000000005e-06
155,18,0.2222222222,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red'),92,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-54.9990769361,-53.2073174669,"[True, False, False, True, True, True, True, True, False]",1.2135000000000001e-06
156,18,0.5555555556,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue'),92,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-37.5168065864,-30.4061104634,"[True, False, False, True, True, True, True, True, False]",6.000000000000001e-09
157,18,0.7777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[True, False, False, True, True, True, True, True, False]",0.011671764000000001
158,18,0.7777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[True, False, False, True, True, True, True, True, False]",0.0125666445
159,18,0.6666666667000001,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue' or color == 'green'),92,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-34.1930703709,-22.8057081289,"[True, False, False, True, True, True, True, True, False]",3.1e-09
160,18,0.7777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(not shape == 'triangle'),92,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, False, False, True, True, True, True, True, False]",5.20332e-05
161,18,0.7777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),((color == 'red' and shape == 'circle') or (color == 'blue')),92,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[True, False, False, True, True, True, True, True, False]",3.0151e-06
162,19,0.5555555556,(color == 'green' or shape == 'circle'),True,39,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True""",-1.3862943611,-31.7924048245,-30.4061104634,"[True, False, False, True, False, False, True, True, True]",0.408401762
163,19,0.5555555556,(color == 'green' or shape == 'circle'),(color == 'red' and shape == 'circle'),39,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[True, False, False, True, False, False, True, True, True]",0.0191534013
164,19,0.33333333330000003,(color == 'green' or shape == 'circle'),(color == 'red'),39,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-47.3986746016,-45.6069151324,"[True, False, False, True, False, False, True, True, True]",1.1489000000000001e-06
165,19,0.6666666667000001,(color == 'green' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),39,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-14.8943367192,-37.7000448481,-22.8057081289,"[True, False, False, True, False, False, True, True, True]",9.8202e-06
166,19,0.2222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-60.3180135899,-53.2073174669,"[True, False, False, True, False, False, True, True, True]",0.0
167,19,0.2222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-60.3180135899,-53.2073174669,"[True, False, False, True, False, False, True, True, True]",0.0
168,19,0.5555555556,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue' or color == 'green'),39,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",5,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-41.7934727054,-30.4061104634,"[True, False, False, True, False, False, True, True, True]",2.098710217e-17
169,19,1.0,(color == 'green' or shape == 'circle'),(color == 'green' or shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, False, False, True, False, False, True, True, True]",0.5204928245
170,19,0.7777777778,(color == 'green' or shape == 'circle'),(color == 'green' or (not shape == 'square')),39,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",5,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'square'))""",-7.7674756594000005,-22.9727814537,-15.2053057944,"[True, False, False, True, False, False, True, True, True]",8.800000000000001e-08
171,20,0.7777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, False, False, True, False, False, True, False, False]",0.0010401626
172,20,0.7777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, False, False, True, False, False, True, False, False]",4.7235e-06
173,20,0.5555555556,shape == 'circle',(color == 'red'),17,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red')",3,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, False, False, True, False, False, True, False, False]",1.2141e-06
174,20,0.8888888889000001,shape == 'circle',(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),17,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",3,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle')""",-14.8943367192,-22.4992401791,-7.6049034599,"[True, False, False, True, False, False, True, False, False]",9.9982e-06
175,20,0.4444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",3,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-45.1172089209,-38.0065127979,"[True, False, False, True, False, False, True, False, False]",0.0
176,20,0.4444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",3,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-45.1172089209,-38.0065127979,"[True, False, False, True, False, False, True, False, False]",0.0
177,20,0.33333333330000003,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-56.9942773744,-45.6069151324,"[True, False, False, True, False, False, True, False, False]",2.1375964680000002e-17
178,20,0.33333333330000003,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-56.9942773744,-45.6069151324,"[True, False, False, True, False, False, True, False, False]",1.084878126e-20
179,20,0.33333333330000003,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-56.9942773744,-45.6069151324,"[True, False, False, True, False, False, True, False, False]",5.427645958e-24
180,21,0.1111111111,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),False,78,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return False",8,0,"""lambda x: False""",-1.3862943611,-62.1940141625,-60.8077198014,"[False, True, True, True, True, True, True, True, True]",0.5656908221
181,21,0.4444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square'),78,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, True, True, True, True, True, True, True]",4.7317e-06
182,21,0.4444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),78,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, True, True, True, True, True, True, True]",9.2301e-06
183,21,0.6666666667000001,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-34.598535479,-22.8057081289,"[False, True, True, True, True, True, True, True, True]",1.8e-09
184,21,0.6666666667000001,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-34.598535479,-22.8057081289,"[False, True, True, True, True, True, True, True, True]",1.8e-09
185,21,0.6666666667000001,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-34.598535479,-22.8057081289,"[False, True, True, True, True, True, True, True, True]",1.8e-09
186,21,0.7777777778,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),78,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",8,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[False, True, True, True, True, True, True, True, True]",0.0
187,21,0.8888888889000001,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),78,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",8,7,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, True, True, True, True, True, True]",0.0
188,21,0.8888888889000001,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),True,78,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[False, True, True, True, True, True, True, True, True]",0.17811113110000001
189,22,0.5555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, True, True, True, False, True, True]",7.187e-07
190,22,0.5555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, True, True, True, False, True, True]",4.7316000000000006e-06
191,22,0.5555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, True, True, True, False, True, True]",9.2295e-06
192,22,0.5555555556,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),44,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",7,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, True]",0.0
193,22,0.7777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, True, True, True, True, True, False, True, True]",1.8e-09
194,22,0.7777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, True, True, True, True, True, False, True, True]",1.8e-09
195,22,0.7777777778,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",7,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, True]",0.0
196,22,0.8888888889000001,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),44,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",7,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, True]",0.0
197,22,0.8888888889000001,(not (shape == 'circle') or color == 'blue'),(color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle'),44,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle')",7,8,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-16.1572520592,-23.762155519,-7.6049034599,"[False, True, True, True, True, True, False, True, True]",1.17e-07
198,23,0.33333333330000003,not (shape == 'circle'),False,23,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return False",6,0,"""lambda x: False""",-1.3862943611,-46.9932094935,-45.6069151324,"[False, True, True, False, True, True, False, True, True]",0.5637193157
199,23,0.6666666667000001,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, True, True]",4.6459e-06
200,23,0.6666666667000001,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, True, True]",8.891400000000001e-06
201,23,0.6666666667000001,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, True, True]",9.0504e-06
202,23,0.6666666667000001,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, True, True]",9.1316e-06
203,23,0.8888888889000001,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, True, False, True, True, False, True, True]",1.0880000000000001e-07
204,23,0.8888888889000001,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, True, False, True, True, False, True, True]",1.096e-07
205,23,0.7777777778,not (shape == 'circle'),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),23,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-31.0441041224,-15.2053057944,"[False, True, True, False, True, True, False, True, True]",1.9e-09
206,23,1.0,not (shape == 'circle'),(shape == 'square' or shape == 'triangle'),23,42,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",6,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')""",-7.110696123,-7.1151972484,-0.0045011254,"[False, True, True, False, True, True, False, True, True]",0.023814412700000002
207,24,0.5555555556,(not (shape == 'circle') and not (color == 'blue')),False,51,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, True, True, False, False, False, False, True, True]",0.5649481709
208,24,0.6666666667000001,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, False, False, False, True, True]",4.7202e-06
209,24,0.6666666667000001,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, False, False, False, True, True]",9.1675e-06
210,24,0.6666666667000001,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, False, False, False, True, True]",9.2861e-06
211,24,0.7777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, True, False, False, False, False, True, True]",0.0220631269
212,24,0.7777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, True, False, False, False, False, True, True]",0.0236043043
213,24,0.7777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, True, False, False, False, False, True, True]",0.024647085000000003
214,24,0.7777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, True, False, False, False, False, True, True]",2.23971e-05
215,24,1.0,(not (shape == 'circle') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, True, True, False, False, False, False, True, True]",0.0004897034
216,25,0.6666666667000001,shape == 'square',False,17,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False""",-1.3862943611,-24.19200249,-22.8057081289,"[False, True, False, False, True, False, False, True, False]",0.5637607922
217,25,0.7777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, False, False, True, False, False, True, False]",4.6482e-06
218,25,0.7777777778,shape == 'square',(color == 'red' and shape == 'square'),17,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",3,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, True, False, False, True, False, False, True, False]",0.037365634
219,25,0.7777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, False, False, True, False, False, True, False]",4.5e-09
220,25,0.8888888889000001,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-18.9277271807,-7.6049034599,"[False, True, False, False, True, False, False, True, False]",0.0003614455
221,25,0.8888888889000001,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-18.9277271807,-7.6049034599,"[False, True, False, False, True, False, False, True, False]",0.0003616227
222,25,0.8888888889000001,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-18.9277271807,-7.6049034599,"[False, True, False, False, True, False, False, True, False]",0.00036743720000000004
223,25,0.8888888889000001,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-18.9277271807,-7.6049034599,"[False, True, False, False, True, False, False, True, False]",1.847e-07
224,25,1.0,shape == 'square',((color == 'red' or color == 'blue' or color == 'green') and shape == 'square'),17,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and shape == 'square')",3,3,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green') and x['shape'] == 'square')""",-15.6846476482,-15.6891487736,-0.0045011254,"[False, True, False, False, True, False, False, True, False]",4.7105e-06
225,26,0.33333333330000003,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, True, True, True, True, True, True, True]",6.028e-07
226,26,0.33333333330000003,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, True, True, True, True, True, True, True]",3e-10
227,26,0.33333333330000003,(shape == 'triangle' or not (color == 'red')),(color == 'red' and shape == 'triangle'),45,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",7,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-52.2269883389,-45.6069151324,"[False, False, True, True, True, True, True, True, True]",0.036854783
228,26,0.7777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, True, True, True, True, True, True, True]",0.3799884468
229,26,0.7777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, True, True, True, True, True, True, True]",0.3863872946
230,26,0.7777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, True, True, True, True, True, True, True]",0.3863873953
231,26,1.0,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'triangle'),45,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[False, False, True, True, True, True, True, True, True]",0.016228079
232,26,0.8888888889000001,(shape == 'triangle' or not (color == 'red')),(not color == 'red'),45,20,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not color == 'red')",7,6,"""lambda x: (not x['color'] == 'red')""",-2.4849066498,-10.0898101097,-7.6049034599,"[False, False, True, True, True, True, True, True, True]",0.0896163683
233,26,0.33333333330000003,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'triangle'),45,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, True, True, True, True, True, True, True]",2.1390653909999998e-20
234,27,0.5555555556,(shape == 'triangle' or color == 'green'),True,41,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, True, False, False, True, True, True, True]",0.0002050478
235,27,0.33333333330000003,(shape == 'triangle' or color == 'green'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, True, False, False, True, True, True, True]",3e-10
236,27,0.5555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, True, False, False, True, True, True, True]",0.0065682480000000005
237,27,0.5555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, True, False, False, True, True, True, True]",0.0065864311
238,27,0.5555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, True, False, False, True, True, True, True]",0.0065869488
239,27,0.7777777778,(shape == 'triangle' or color == 'green'),(shape == 'triangle'),41,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')",5,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, True, False, False, True, True, True, True]",0.8306299178000001
240,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, False, False, True, True, True, True]",0.4851964675
241,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, False, False, True, True, True, True]",0.5252210757
242,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, False, False, True, True, True, True]",0.5252210918
243,28,0.6666666667000001,shape == 'triangle',False,19,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False""",-1.3862943611,-24.19200249,-22.8057081289,"[False, False, True, False, False, True, False, False, True]",0.4091122056
244,28,0.7777777778,shape == 'triangle',(color == 'blue' and shape == 'triangle'),19,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",3,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, True, False, False, True, False, False, True]",0.0024303822
245,28,0.7777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",3,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, True, False, False, True, False, False, True]",0.0065896348
246,28,0.7777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",3,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, True, False, False, True, False, False, True]",0.006604822000000001
247,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, True, False, False, True, False, False, True]",0.8256676137000001
248,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, True, False, False, True, False, False, True]",0.8332782361000001
249,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, True, False, False, True, False, False, True]",0.8352658930000001
250,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, True, False, False, True, False, False, True]",0.8352669224
251,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, True, False, False, True, False, False, True]",0.8359157131
252,29,0.7777777778,(shape == 'triangle' and not (color == 'green')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, True, False, False, True, False, False, False]",0.4099425246
253,29,0.4444444444,(shape == 'triangle' and not (color == 'green')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, True, False, False, True, False, False, False]",3e-10
254,29,0.8888888889000001,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, True, False, False, False]",0.0065835689000000005
255,29,0.8888888889000001,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, True, False, False, False]",0.0066018385
256,29,0.8888888889000001,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, True, False, False, False]",0.0066023587
257,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, True, False, False, True, False, False, False]",6.0437100000000005e-05
258,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, True, False, False, True, False, False, False]",6.0582600000000005e-05
259,29,0.8888888889000001,(shape == 'triangle' and not (color == 'green')),(shape == 'triangle'),48,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (shape == 'triangle')",2,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, True, False, False, True, False, False, False]",0.8349048204
260,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, True, False, False, True, False, False, False]",0.036987468
261,30,0.4444444444,not (color == 'red'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),20,92,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))",6,3,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'circle') or ((not x['color'] == 'green') and x['shape'] == 'square'))""",-15.8106274511,-53.817140249,-38.0065127979,"[False, False, False, True, True, True, True, True, True]",2.216e-07
262,30,0.6666666667000001,not (color == 'red'),(color == 'green' or shape == 'square'),20,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, False, True, True, True, True, True, True]",5.774e-07
263,30,0.4444444444,not (color == 'red'),(color == 'blue' and shape == 'square'),20,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, False, False, True, True, True, True, True, True]",0.0025714830000000003
264,30,0.4444444444,not (color == 'red'),(color == 'blue' and shape == 'circle'),20,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",6,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, False, False, True, True, True, True, True, True]",0.005678844000000001
265,30,0.6666666667000001,not (color == 'red'),(color == 'blue' or shape == 'square'),20,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, False, True, True, True, True, True, True]",1.3613e-06
266,30,0.6666666667000001,not (color == 'red'),(color == 'blue'),20,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue')",6,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, False, False, True, True, True, True, True, True]",0.7146843651
267,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-7.1151972484,-0.0045011254,"[False, False, False, True, True, True, True, True, True]",0.023712156300000002
268,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-7.1151972484,-0.0045011254,"[False, False, False, True, True, True, True, True, True]",0.0237808452
269,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-7.1151972484,-0.0045011254,"[False, False, False, True, True, True, True, True, True]",0.023780918300000002
270,31,1.0,color == 'blue',(color == 'blue'),15,17,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.2735172775
271,31,0.33333333330000003,color == 'blue',(color == 'red' or shape == 'square'),15,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, False, True, True, True, False, False, False]",3e-10
272,31,1.0,color == 'blue',(color == 'blue'),15,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.3235574739
273,31,1.0,color == 'blue',(color == 'blue'),15,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.7161628643
274,31,1.0,color == 'blue',(color == 'blue'),15,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.7165978185
275,31,1.0,color == 'blue',(color == 'blue'),15,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.7172830556
276,31,1.0,color == 'blue',(color == 'blue'),15,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.8358543189000001
277,31,1.0,color == 'blue',(color == 'blue'),15,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.8359234451
278,31,1.0,color == 'blue',(color == 'blue'),15,17,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, True, True, True, False, False, False]",0.8359361496000001
279,32,0.4444444444,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'circle'),61,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, True, False, False, True, True, True]",5.185e-07
280,32,0.2222222222,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, False, False, True, False, False, True, True, True]",3e-10
281,32,0.8888888889000001,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'green'),61,18,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green')",4,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, False, False, True, True, True]",0.3215412727
282,32,0.6666666667000001,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, False, False, True, True, True]",0.0194366222
283,32,0.6666666667000001,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, False, False, True, True, True]",0.5328071769
284,32,0.6666666667000001,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, False, False, True, True, True]",0.6473552836
285,32,0.7777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[False, False, False, True, False, False, True, True, True]",6.153000000000001e-07
286,32,0.7777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),61,67,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')",4,4,"""lambda x: ((x['color'] == 'blue' or x['color'] == 'green') and not x['shape'] == 'triangle')""",-12.0159709014,-27.2212766958,-15.2053057944,"[False, False, False, True, False, False, True, True, True]",3.0163000000000002e-05
287,32,0.7777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[False, False, False, True, False, False, True, True, True]",2.0432e-06
288,33,0.7777777778,(shape == 'circle' and not (color == 'red')),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, True, False, False, True, False, False]",0.5605543766000001
289,33,0.6666666667000001,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),44,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, False, False, True, False, False]",0.0034793589
290,33,0.7777777778,(shape == 'circle' and not (color == 'red')),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, True, False, False, True, False, False]",0.7113544883
291,33,0.8888888889000001,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, True, False, False, True, False, False]",0.019520105000000003
292,33,0.8888888889000001,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, True, False, False, True, False, False]",0.5470663733000001
293,33,0.8888888889000001,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, True, False, False, True, False, False]",0.6714214226
294,33,0.5555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-37.5168065864,-30.4061104634,"[False, False, False, True, False, False, True, False, False]",7.909e-07
295,33,0.5555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-37.5168065864,-30.4061104634,"[False, False, False, True, False, False, True, False, False]",4e-10
296,33,0.5555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-37.5168065864,-30.4061104634,"[False, False, False, True, False, False, True, False, False]",0.0
297,34,0.7777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, True, False, False, True]",0.4076790737
298,34,0.2222222222,(shape == 'triangle' and not (color == 'red')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, False, False, False, False, True, False, False, True]",3e-10
299,34,0.8888888889000001,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, True, False, False, True]",0.0037835259
300,34,0.7777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, True, False, False, True]",0.8670470248000001
301,34,0.6666666667000001,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, True, False, False, True]",2.3244e-06
302,34,0.8888888889000001,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, True, False, False, True]",0.6466280014
303,34,0.8888888889000001,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, True, False, False, True]",0.6516978987000001
304,34,0.8888888889000001,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, True, False, False, True]",0.6517004573
305,34,0.8888888889000001,(shape == 'triangle' and not (color == 'red')),(shape == 'triangle'),46,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'triangle')",2,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, False, False, True, False, False, True]",0.2629129548
306,35,0.6666666667000001,color == 'green',False,16,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False""",-1.3862943611,-24.19200249,-22.8057081289,"[False, False, False, False, False, False, True, True, True]",0.407201861
307,35,0.33333333330000003,color == 'green',(color == 'red' or shape == 'square'),16,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, False, False, False, False, True, True, True]",3e-10
308,35,0.5555555556,color == 'green',(color == 'blue' and shape == 'square'),16,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",3,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, False, False, False, False, True, True, True]",0.0025671674
309,35,0.6666666667000001,color == 'green',False,16,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False""",-1.3862943611,-24.19200249,-22.8057081289,"[False, False, False, False, False, False, True, True, True]",0.5488315109
310,35,0.7777777778,color == 'green',(color == 'green' and shape == 'square'),16,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",3,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, True, True, True]",0.0029359983
311,35,0.6666666667000001,color == 'green',False,16,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0,"""lambda x: False""",-1.3862943611,-24.19200249,-22.8057081289,"[False, False, False, False, False, False, True, True, True]",0.5505190452000001
312,35,1.0,color == 'green',(color == 'green'),16,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, False, False, False, True, True, True]",0.8337080412000001
313,35,1.0,color == 'green',(color == 'green'),16,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, False, False, False, True, True, True]",0.8355076182000001
314,35,1.0,color == 'green',(color == 'green'),16,18,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-1.7962605946,-0.0045011254,"[False, False, False, False, False, False, True, True, True]",0.8361318114
315,36,1.0,False,False,5,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False""",-1.3862943611,-1.3907954865,-0.0045011254,"[False, False, False, False, False, False, False, False, False]",0.5612311021
316,36,0.4444444444,False,(color == 'red' or shape == 'square'),5,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",0,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, False, False, False, False, False, False]",4e-10
317,36,1.0,False,False,5,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False""",-1.3862943611,-1.3907954865,-0.0045011254,"[False, False, False, False, False, False, False, False, False]",0.7113907933
318,36,0.8888888889000001,False,(color == 'blue' and shape == 'square'),5,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",0,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, False, False, False, False]",0.0046390446
319,36,0.8888888889000001,False,(color == 'blue' and shape == 'square'),5,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",0,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, False, False, False, False]",2.3319e-06
320,36,1.0,False,False,5,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False""",-1.3862943611,-1.3907954865,-0.0045011254,"[False, False, False, False, False, False, False, False, False]",0.8740666142
321,36,1.0,False,False,5,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False""",-1.3862943611,-1.3907954865,-0.0045011254,"[False, False, False, False, False, False, False, False, False]",0.984371702
322,36,1.0,False,False,5,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False""",-1.3862943611,-1.3907954865,-0.0045011254,"[False, False, False, False, False, False, False, False, False]",0.9852956339000001
323,36,1.0,False,False,5,5,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0,"""lambda x: False""",-1.3862943611,-1.3907954865,-0.0045011254,"[False, False, False, False, False, False, False, False, False]",0.9861589598
324,37,0.8888888889000001,(not (color == 'green') or not (shape == 'square')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, False, True]",0.5586080315
325,37,0.6666666667000001,(not (color == 'green') or not (shape == 'square')),(color == 'red' or shape == 'circle'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, True, True, False, True]",0.0016488350000000002
326,37,0.8888888889000001,(not (color == 'green') or not (shape == 'square')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, False, True]",0.7076096579000001
327,37,0.8888888889000001,(not (color == 'green') or not (shape == 'square')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, False, True]",0.8626540834
328,37,0.8888888889000001,(not (color == 'green') or not (shape == 'square')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, False, True]",0.8646889769
329,37,0.8888888889000001,(not (color == 'green') or not (shape == 'square')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, False, True]",0.8647374852
330,37,0.8888888889000001,(not (color == 'green') or not (shape == 'square')),True,51,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, True, True, True, True, True, True, False, True]",0.9722081255
331,37,1.0,(not (color == 'green') or not (shape == 'square')),not (color == 'green' and shape == 'square'),51,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return not (color == 'green' and shape == 'square')",8,8,"""lambda x: not (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, True, True, True, True, True, True, False, True]",0.5611362354
332,37,1.0,(not (color == 'green') or not (shape == 'square')),(not (color == 'green' and shape == 'square')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",8,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, True, True, True, True, True, True, False, True]",0.658161891
333,38,0.7777777778,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,5,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, True, True, True, True, False, False]",0.2711745177
334,38,0.5555555556,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, True, True, True, True, False, False]",0.30185492340000003
335,38,0.7777777778,(not (color == 'green') or shape == 'circle'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, True, False, False]",0.48042602100000004
336,38,0.8888888889000001,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-14.7155995829,-7.6049034599,"[True, True, True, True, True, True, True, False, False]",0.0028140906
337,38,0.8888888889000001,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-14.7155995829,-7.6049034599,"[True, True, True, True, True, True, True, False, False]",0.0028153604
338,38,0.7777777778,(not (color == 'green') or shape == 'circle'),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, True, False, False]",0.8622515180000001
339,38,0.7777777778,(not (color == 'green') or shape == 'circle'),True,45,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, True, False, False]",0.9729132769000001
340,38,0.8888888889000001,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, True, True, True, True, True, True, False, False]",0.5570095348
341,38,0.8888888889000001,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, True, True, True, True, True, True, False, False]",0.0016771387000000001
342,39,0.7777777778,(shape == 'square' or not (color == 'green')),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, False, True, False]",0.4703655483
343,39,0.7777777778,(shape == 'square' or not (color == 'green')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, True, True, False, True, False]",0.0013536807000000001
344,39,0.7777777778,(shape == 'square' or not (color == 'green')),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, False, True, False]",0.5717387644
345,39,0.8888888889000001,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-14.7155995829,-7.6049034599,"[True, True, True, True, True, True, False, True, False]",0.0021890417
346,39,0.8888888889000001,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-14.7155995829,-7.6049034599,"[True, True, True, True, True, True, False, True, False]",0.0021893206
347,39,0.7777777778,(shape == 'square' or not (color == 'green')),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, False, True, False]",0.6705085899000001
348,39,0.8888888889000001,(shape == 'square' or not (color == 'green')),(not color == 'green'),45,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, True, False, True, False]",0.7020927071
349,39,1.0,(shape == 'square' or not (color == 'green')),((not color == 'green') or (shape == 'square')),45,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return ((not color == 'green') or (shape == 'square'))",7,7,"""lambda x: ((not x['color'] == 'green') or (x['shape'] == 'square'))""",-7.7674756594000005,-7.7719767847,-0.0045011254,"[True, True, True, True, True, True, False, True, False]",0.2748980773
350,39,1.0,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue' or shape == 'square'),45,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, True, True, True, False, True, False]",0.008662686900000001
351,40,0.7777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, False, False, True]",0.3581701162
352,40,0.5555555556,(shape == 'triangle' or not (color == 'green')),(color == 'red'),47,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, True, True, True, False, False, True]",0.262377263
353,40,0.7777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, False, False, True]",0.41428624470000003
354,40,0.8888888889000001,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-14.7155995829,-7.6049034599,"[True, True, True, True, True, True, False, False, True]",0.0021876562
355,40,0.8888888889000001,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-14.7155995829,-7.6049034599,"[True, True, True, True, True, True, False, False, True]",0.0021884244
356,40,0.7777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, True, False, False, True]",0.6702336186
357,40,0.8888888889000001,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, True, False, False, True]",0.7036042886
358,40,0.8888888889000001,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, True, False, False, True]",0.7080010317000001
359,40,0.8888888889000001,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6,"""lambda x: (not x['color'] == 'green')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, True, False, False, True]",0.09616874700000001
360,41,0.7777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, False, True, True, False]",0.4726051546
361,41,0.7777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, True, False, True, True, False]",0.0013609893
362,41,0.7777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, False, True, True, False]",0.7113341166
363,41,0.7777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, True, False, True, True, False]",0.8701443522000001
364,41,0.7777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'circle'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, True, False, True, True, False]",1.1081e-06
365,41,0.8888888889000001,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, False, True, True, False]",0.0371687829
366,41,0.8888888889000001,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, False, True, True, False]",0.0377173605
367,41,0.8888888889000001,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, False, True, True, False]",0.0377284706
368,41,0.8888888889000001,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, True, False, True, True, False]",0.09423870300000001
369,42,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),r == 'red' and shape == 'circle':,82,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5,"""lambda x: r == 'red' and x['shape'] == 'circle':""",88888.88888,88888.88888,88888.88888,"[True, True, True, True, True, False, True, False, False]",0.0
370,42,0.6666666667000001,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, False, True, False, False]",0.001358077
371,42,0.6666666667000001,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, True, False, True, False, False]",0.7088842822
372,42,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, True, False, True, False, False]",0.0022005097
373,42,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, True, False, True, False, False]",1.1052e-06
374,42,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, True, False, True, False, False]",0.0386066974
375,42,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, True, False, True, False, False]",0.0391986888
376,42,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, True, False, True, False, False]",0.0099739181
377,42,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, True, True, False, True, False, False]",0.0024819923000000002
378,43,0.6666666667000001,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, True, False, False, True, False]",0.0011935073
379,43,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, True, False, False, True, False]",0.0013523045
380,43,0.6666666667000001,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, True, False, False, True, False]",0.7053372457
381,43,0.7777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, True, True, True, False, False, True, False]",0.0028166596
382,43,0.7777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, True, True, True, False, False, True, False]",0.0028233034000000002
383,43,0.7777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, True, False, False, True, False]",0.0391436594
384,43,0.7777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square'),82,77,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square')",6,8,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle' or x['shape'] == 'square')""",-16.1572520592,-31.3625578535,-15.2053057944,"[True, True, True, True, True, False, False, True, False]",1.3e-09
385,43,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, True, True, False, False, True, False]",0.0017644964
386,43,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, True, True, False, False, True, False]",0.0023966142
387,44,0.7777777778,(not (shape == 'square') or color == 'red'),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, False, True, True, False, True]",0.0009092375000000001
388,44,0.5555555556,(not (shape == 'square') or color == 'red'),(color == 'red'),43,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, True, False, True, True, False, True]",0.30180457800000005
389,44,0.7777777778,(not (shape == 'square') or color == 'red'),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, False, True, True, False, True]",0.4803410012
390,44,0.7777777778,(not (shape == 'square') or color == 'red'),True,43,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, True, False, True, True, False, True]",0.8609667369
391,44,1.0,(not (shape == 'square') or color == 'red'),(color == 'red' or (not shape == 'square')),43,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'square'))""",-7.7674756594000005,-7.7719767847,-0.0045011254,"[True, True, True, True, False, True, True, False, True]",0.1137352655
392,44,0.8888888889000001,(not (shape == 'square') or color == 'red'),((not color == 'blue') or (not shape == 'square')),43,50,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",7,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, True, True, False, True]",0.29142814910000003
393,44,0.8888888889000001,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')",7,6,"""lambda x: (not x['shape'] == 'square')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, False, True, True, False, True]",0.0192773413
394,44,0.8888888889000001,(not (shape == 'square') or color == 'red'),(not (color == 'green' and shape == 'square')),43,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'green' and x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, True, True, True, False, True, True, False, True]",0.0007630149
395,44,0.8888888889000001,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')",7,6,"""lambda x: (not x['shape'] == 'square')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, True, False, True, True, False, True]",0.047719199000000004
396,45,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),r == 'red' and shape == 'circle':,84,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5,"""lambda x: r == 'red' and x['shape'] == 'circle':""",88888.88888,88888.88888,88888.88888,"[True, True, True, True, False, True, True, False, False]",0.0
397,45,0.6666666667000001,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, True, False, True, True, False, False]",0.3018628974
398,45,0.6666666667000001,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, False, True, True, False, False]",0.4804394871
399,45,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, True, True, False, False]",0.0021857731000000003
400,45,0.8888888889000001,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or (not shape == 'square')),84,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'square'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[True, True, True, True, False, True, True, False, False]",0.0838434571
401,45,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not (color == 'blue' and shape == 'square')),84,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",6,8,"""lambda x: (not (x['color'] == 'blue' and x['shape'] == 'square'))""",-6.6200732065,-21.8253790009,-15.2053057944,"[True, True, True, True, False, True, True, False, False]",0.38034471140000004
402,45,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, False, True, True, False, False]",0.18194355950000002
403,45,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not shape == 'square'),84,23,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'square')",6,6,"""lambda x: (not x['shape'] == 'square')""",-2.4849066498,-17.6902124442,-15.2053057944,"[True, True, True, True, False, True, True, False, False]",0.0479972663
404,45,0.7777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, False, True, True, False, False]",0.0001010081
405,46,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, True, False]",0.0010351957
406,46,0.6666666667000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red'),83,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, True, False, False, True, True, False]",0.3027224928
407,46,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, True, False]",0.0012233461
408,46,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, True, False]",0.0021976343
409,46,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, True, False]",0.1944350089
410,46,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, True, False]",0.3781310319
411,46,0.6666666667000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-34.1930703709,-22.8057081289,"[True, True, True, True, False, False, True, True, False]",1.8e-09
412,46,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'green' or shape == 'circle'),83,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'circle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, True, False, False, True, True, False]",0.018276486800000002
413,46,0.7777777778,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),((not color == 'blue') or (not shape == 'square')),83,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, True, False, False, True, True, False]",0.00013319660000000002
414,47,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, False, True]",0.0010380372
415,47,0.6666666667000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, True, False, False, True, False, True]",0.30347930100000003
416,47,0.6666666667000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, False, False, True, False, True]",0.4829701696
417,47,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, False, True]",0.0022080495000000003
418,47,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, False, True]",0.2416025728
419,47,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, True, False, False, True, False, True]",0.38042031260000003
420,47,0.6666666667000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, True, False, False, True, False, True]",3.98546e-05
421,47,0.6666666667000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),85,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-34.1930703709,-22.8057081289,"[True, True, True, True, False, False, True, False, True]",0.0
422,47,0.8888888889000001,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, True, False, False, True, False, True]",0.0023931106
423,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, False, True, False, False]",0.0010359100000000001
424,48,0.7777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, True, False, False, True, False, False]",0.3027868275
425,48,0.7777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, True, False, False, True, False, False]",0.3213333803
426,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, False, True, False, False]",0.0022016346000000003
427,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, False, True, False, False]",0.1946594781
428,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, False, True, False, False]",0.378923231
429,48,0.5555555556,(shape == 'circle' or color == 'red'),(color == 'red' or color == 'blue' or color == 'green'),37,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",5,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-41.7934727054,-30.4061104634,"[True, True, True, True, False, False, True, False, False]",1.8e-09
430,48,0.6666666667000001,(shape == 'circle' or color == 'red'),((not color == 'blue') or (not shape == 'square')),37,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",5,8,"""lambda x: ((not x['color'] == 'blue') or (not x['shape'] == 'square'))""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, True, False, False, True, False, False]",1.315e-07
431,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, True, False, False, True, False, False]",0.5255497852000001
432,49,0.7777777778,(color == 'red' or not (shape == 'circle')),True,43,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, False, True, True, False, True, True]",0.4090558046
433,49,0.7777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, True, True, False, True, True]",0.0011577927
434,49,0.7777777778,(color == 'red' or not (shape == 'circle')),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, False, True, True, False, True, True]",0.4837154883
435,49,0.5555555556,(color == 'red' or not (shape == 'circle')),(color == 'red'),43,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, False, True, True, False, True, True]",0.7129996171
436,49,0.7777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, True, True, False, True, True]",0.2413544119
437,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, True, True, False, True, True]",0.0069514958000000005
438,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, True, True, False, True, True]",0.0175834817
439,49,0.7777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, True, True, False, True, True]",0.0007674152
440,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, True, True, False, True, True]",0.0182875529
441,50,0.6666666667000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, True, True, False, False, True]",0.4088505495
442,50,0.6666666667000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, True, True, False, False, True]",0.303581362
443,50,0.6666666667000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, True, True, False, False, True]",0.4831424992
444,50,0.6666666667000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, True, True, False, False, True]",0.7125440308000001
445,50,0.6666666667000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),84,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, True, True, False, False, True]",0.24220080160000002
446,50,0.8888888889000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, False, False, True]",0.0070107696
447,50,0.8888888889000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, False, False, True]",0.018141208500000002
448,50,0.8888888889000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, False, False, True]",0.0002157375
449,50,0.8888888889000001,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, True, False, False, True]",0.0033899091
450,51,0.5555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, False, True, False, True, True, True]",0.2724241019
451,51,0.7777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, True, False, True, True, True]",0.0011564692
452,51,0.7777777778,(shape == 'square' or not (color == 'blue')),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, True, False, True, False, True, True, True]",0.483328688
453,51,0.5555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",7,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-32.1978699326,-30.4061104634,"[True, True, True, False, True, False, True, True, True]",0.7130292533
454,51,0.7777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, True, False, True, True, True]",0.2422491085
455,51,0.7777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, True, False, True, True, True]",0.3785068357
456,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, True, False, True, True, True]",0.018151200200000002
457,51,0.7777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or (not shape == 'triangle')),44,45,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))",7,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'triangle'))""",-7.7674756594000005,-22.9727814537,-15.2053057944,"[True, True, True, False, True, False, True, True, True]",0.0005085485
458,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, True, True, False, True, False, True, True, True]",0.0181883416
459,52,0.6666666667000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, True, False, True, True, False]",0.0010369026000000001
460,52,0.8888888889000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, True, True, False]",0.0011553474
461,52,0.6666666667000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),True,83,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, True, False, True, True, False]",0.4826314574
462,52,0.6666666667000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red'),83,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, True, False, True, True, False]",0.7130621387
463,52,0.8888888889000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, True, True, False]",0.24327918780000002
464,52,0.8888888889000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, True, True, False]",0.3790721004
465,52,0.8888888889000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or color == 'green' or shape == 'square'),83,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, False, True, True, False]",0.0182608915
466,52,0.8888888889000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, True, True, False]",0.0007674335
467,52,0.8888888889000001,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or (not shape == 'triangle')),83,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))",6,7,"""lambda x: (x['color'] == 'red' or (not x['shape'] == 'triangle'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[True, True, True, False, True, False, True, True, False]",0.1574553292
468,53,0.6666666667000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, True, False, False, True, True]",0.4095413281
469,53,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, True, True]",0.0011586772
470,53,0.6666666667000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, True, False, False, True, True]",0.4841074241
471,53,0.6666666667000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, True, False, False, True, True]",0.7130626708000001
472,53,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, True, True]",0.2432658476
473,53,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, True, True]",0.380733674
474,53,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, True, True]",0.4842347394
475,53,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, True, True]",0.525223251
476,53,0.8888888889000001,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, True, False, True, False, False, True, True]",0.0027765407
477,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.27214083840000003
478,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.0011544867
479,54,0.6666666667000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'circle'),59,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, True, False, False, False, False]",0.0012247620000000001
480,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.7101870086000001
481,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.2437278202
482,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.3825719551
483,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.4872631886
484,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.0028585629
485,54,0.8888888889000001,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, True, False, False, False, False]",0.0028585693
486,55,0.6666666667000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, False, True, False, True, True]",0.4088543772
487,55,0.6666666667000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, False, True, False, True, True]",0.3037538172
488,55,0.6666666667000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, True, False, False, True, False, True, True]",0.48343384840000003
489,55,0.6666666667000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, True, False, False, True, False, True, True]",0.7114933235
490,55,0.8888888889000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, True, False, True, True]",0.0027231617000000002
491,55,0.8888888889000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, True, False, True, True]",0.3834651618
492,55,0.8888888889000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, True, False, True, True]",0.48870870980000003
493,55,0.8888888889000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, True, False, True, True]",0.1738824785
494,55,0.8888888889000001,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, True, False, True, True]",0.1790633899
495,56,0.5555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'circle'),39,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, True, False, False, True, False, False, True]",0.0010362851
496,56,0.5555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, True, False, False, True, False, False, True]",0.0011545807000000001
497,56,0.5555555556,(shape == 'triangle' or color == 'red'),True,39,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True""",-1.3862943611,-31.7924048245,-30.4061104634,"[True, True, True, False, False, True, False, False, True]",0.4822918491
498,56,0.7777777778,(shape == 'triangle' or color == 'red'),(color == 'red'),39,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, False, True, False, False, True]",0.7109102169
499,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, False, True, False, False, True]",0.0027246267
500,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, False, True, False, False, True]",0.3811658419
501,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, False, True, False, False, True]",0.4849551307
502,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, False, True, False, False, True]",0.4850212848
503,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, True, True, False, False, True, False, False, True]",0.5275321628
504,57,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, False, True, False, False]",0.0010345179
505,57,0.6666666667000001,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'square'),60,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, False, False, True, False, False]",0.0011523874
506,57,0.4444444444,(color == 'red' or (color == 'green' and shape == 'circle')),True,60,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return True",4,9,"""lambda x: True""",-1.3862943611,-39.392807159,-38.0065127979,"[True, True, True, False, False, False, True, False, False]",0.4813199943
507,57,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, True, False, False]",0.7083300007000001
508,57,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, True, False, False]",0.7126027002
509,57,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, True, False, False]",0.7135714979000001
510,57,0.7777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, True, False, False, False, True, False, False]",0.023765224600000003
511,57,0.7777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, True, False, False, False, True, False, False]",0.0030530868000000003
512,57,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, False, True, False, False]",0.0028719074
513,58,0.5555555556,(color == 'red' or (not (shape == 'circle') and color == 'green')),True,66,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return True",5,9,"""lambda x: True""",-1.3862943611,-31.7924048245,-30.4061104634,"[True, True, True, False, False, False, False, True, True]",0.35957613180000003
514,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",0.2633820519
515,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",0.277304428
516,58,0.8888888889000001,(color == 'red' or (not (shape == 'circle') and color == 'green')),(not color == 'blue'),66,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'blue')",5,6,"""lambda x: (not x['color'] == 'blue')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, True, False, False, False, False, True, True]",0.26193973730000003
517,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'triangle'),66,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",0.0020046681000000003
518,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",0.5278121291
519,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",0.8361924785
520,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square'),66,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",0.0020032648
521,58,0.7777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square' or shape == 'triangle'),66,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[True, True, True, False, False, False, False, True, True]",3.24e-08
522,59,0.6666666667000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, False, False, False, True, False]",0.0010381937
523,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.3036051407
524,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.3221282912
525,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.7126379098000001
526,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.7169626144
527,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.7179433273
528,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.836323699
529,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.0024892757000000002
530,59,0.8888888889000001,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, False, False, True, False]",0.0028573922
531,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.2723863829
532,60,0.6666666667000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),62,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, True, False, False, False, False, False, True]",0.0011565540000000002
533,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.3221109666
534,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.710007601
535,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.0027211429
536,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.7172267953
537,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.8357774566
538,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.8358485659
539,60,0.8888888889000001,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, True, False, False, False, False, False, True]",0.0031687955
540,61,0.6666666667000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(shape == 'circle'),82,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')",6,3,"""lambda x: (x['shape'] == 'circle')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, False, True, True, True, True, False, False]",0.2142081043
541,61,0.4444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[True, True, False, True, True, True, True, False, False]",0.3040110827
542,61,0.4444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[True, True, False, True, True, True, True, False, False]",0.0023915348
543,61,0.8888888889000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, False, True, True, True, True, False, False]",1.0950000000000001e-07
544,61,0.7777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, False, True, True, True, True, False, False]",1.1862100000000001e-05
545,61,0.8888888889000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'blue' or color == 'red' or shape == 'circle'),82,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'red' or x['shape'] == 'circle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, False, True, True, True, True, False, False]",3.6667e-06
546,61,0.6666666667000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),82,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-34.1930703709,-22.8057081289,"[True, True, False, True, True, True, True, False, False]",5.5889e-06
547,61,0.8888888889000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or (x['color'] == 'green' and x['shape'] == 'circle'))""",-16.0901127563,-23.6950162162,-7.6049034599,"[True, True, False, True, True, True, True, False, False]",3.07347e-05
548,61,0.8888888889000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or (x['color'] == 'green' and x['shape'] == 'circle'))""",-16.0901127563,-23.6950162162,-7.6049034599,"[True, True, False, True, True, True, True, False, False]",4.64629e-05
549,62,0.4444444444,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, True, False, True, True, True, False, True, False]",0.0014214031000000002
550,62,0.6666666667000001,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, True, True, False, True, False]",0.0016538219
551,62,0.6666666667000001,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, True, True, False, True, False]",9.0727e-06
552,62,0.7777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),82,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-31.0441041224,-15.2053057944,"[True, True, False, True, True, True, False, True, False]",3.8044e-06
553,62,0.7777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, False, True, True, True, False, True, False]",1.17556e-05
554,62,0.8888888889000001,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'blue' or (not shape == 'triangle')),82,46,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'triangle'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[True, True, False, True, True, True, False, True, False]",0.2929440924
555,62,0.7777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, False, True, True, True, False, True, False]",0.0217757396
556,62,0.8888888889000001,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, False, True, True, True, False, True, False]",0.002061912
557,62,0.8888888889000001,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, True, False, True, True, True, False, True, False]",0.0028034711
558,63,0.7777777778,(color == 'green' or not (shape == 'triangle')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True",7,9,"""lambda x: True""",-1.3862943611,-16.5916001555,-15.2053057944,"[True, True, False, True, True, False, True, True, True]",0.4750178545
559,63,0.5555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, False, True, True, False, True, True, True]",0.0013688833
560,63,0.5555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, True, False, True, True, False, True, True, True]",2.6864000000000002e-06
561,63,0.6666666667000001,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-38.6445064569,-22.8057081289,"[True, True, False, True, True, False, True, True, True]",1.1207000000000001e-06
562,63,0.7777777778,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'circle' or shape == 'square'),47,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle' or x['shape'] == 'square')""",-11.7928273501,-26.9981331445,-15.2053057944,"[True, True, False, True, True, False, True, True, True]",3.21e-08
563,63,0.6666666667000001,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-38.6445064569,-22.8057081289,"[True, True, False, True, True, False, True, True, True]",1.1273e-06
564,63,0.8888888889000001,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, False, True, True, False, True, True, True]",0.7118317945
565,63,0.5555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),47,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",7,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-42.1989378135,-30.4061104634,"[True, True, False, True, True, False, True, True, True]",0.0
566,63,0.8888888889000001,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6,"""lambda x: (not x['shape'] == 'triangle')""",-2.4849066498,-10.0898101097,-7.6049034599,"[True, True, False, True, True, False, True, True, True]",0.09439587220000001
567,64,0.6666666667000001,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, False, True, True, False, False, False, False]",0.2730316451
568,64,0.6666666667000001,(not (shape == 'triangle') and not (color == 'green')),(color == 'red' or shape == 'square'),54,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, True, False, False, False, False]",0.0011593439
569,64,0.6666666667000001,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, False, True, True, False, False, False, False]",0.0024004969
570,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, True, True, False, False, False, False]",3.8442e-06
571,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, True, True, False, False, False, False]",3.846e-06
572,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, True, True, False, False, False, False]",3.9224e-06
573,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, True, True, False, False, False, False]",0.0004441708
574,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, True, True, False, False, False, False]",0.0004705938
575,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, True, True, False, False, False, False]",0.00047059390000000003
576,65,0.6666666667000001,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),True,83,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, True, False, True, False, False, True, True, True]",0.4089883573
577,65,0.6666666667000001,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, False, False, True, True, True]",0.0011600751
578,65,0.4444444444,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red'),83,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[True, True, False, True, False, False, True, True, True]",0.0024044672
579,65,0.5555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-46.2449087914,-30.4061104634,"[True, True, False, True, False, False, True, True, True]",3.8381e-06
580,65,0.6666666667000001,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, True, False, False, True, True, True]",0.0061442826
581,65,0.5555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-46.2449087914,-30.4061104634,"[True, True, False, True, False, False, True, True, True]",1.2867000000000001e-06
582,65,0.6666666667000001,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-34.1930703709,-22.8057081289,"[True, True, False, True, False, False, True, True, True]",0.0
583,65,0.7777777778,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square')),83,102,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square'))",6,6,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",,,99999.99999,"[True, True, False, True, False, False, True, True, True]",0.0
584,65,0.8888888889000001,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'green' or (not shape == 'triangle')),83,47,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'triangle'))",6,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'triangle'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[True, True, False, True, False, False, True, True, True]",0.2586901494
585,66,0.8888888889000001,(shape == 'circle' or (shape == 'square' and color == 'red')),(shape == 'circle'),61,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'circle')",4,3,"""lambda x: (x['shape'] == 'circle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, True, False, True, False, False, True, False, False]",0.21442351580000002
586,66,0.4444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, True, False, True, False, False, True, False, False]",0.001159539
587,66,0.6666666667000001,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red'),61,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, False, True, False, False, True, False, False]",0.0024212743000000003
588,66,0.6666666667000001,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),61,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",4,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, True, False, True, False, False, True, False, False]",1.1090000000000001e-07
589,66,0.8888888889000001,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'circle'),61,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, True, False, True, False, False, True, False, False]",0.0023699595
590,66,0.7777777778,(shape == 'circle' or (shape == 'square' and color == 'red')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),61,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-31.0441041224,-15.2053057944,"[True, True, False, True, False, False, True, False, False]",4.948e-07
591,66,0.4444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-49.3938750399,-38.0065127979,"[True, True, False, True, False, False, True, False, False]",0.0
592,66,0.4444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-49.3938750399,-38.0065127979,"[True, True, False, True, False, False, True, False, False]",0.0
593,66,0.4444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-49.3938750399,-38.0065127979,"[True, True, False, True, False, False, True, False, False]",3.2054945730000003e-18
594,67,0.6666666667000001,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, False, False, False, True, True, False]",0.0010378036
595,67,0.6666666667000001,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, False, False, False, True, True, False]",0.0011560069
596,67,0.6666666667000001,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, False, False, False, False, True, True, False]",0.0024331019
597,67,0.6666666667000001,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, False, False, False, True, True, False]",0.0005246
598,67,0.6666666667000001,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, True, False, False, False, False, True, True, False]",2.749e-07
599,67,0.6666666667000001,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, True, False, False, False, False, True, True, False]",0.144276242
600,67,0.7777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, False, False, False, False, True, True, False]",0.0014225618
601,67,0.7777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[True, True, False, False, False, False, True, True, False]",0.0014235064
602,67,1.0,(not (color == 'blue') and not (shape == 'triangle')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square')),53,83,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, True, False, False, False, False, True, True, False]",0.0004897215
603,68,0.8888888889000001,(not (color == 'red') or not (shape == 'square')),True,49,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9,"""lambda x: True""",-1.3862943611,-8.991197821,-7.6049034599,"[True, False, True, True, True, True, True, True, True]",0.40890403210000004
604,68,0.2222222222,(not (color == 'red') or not (shape == 'square')),(color == 'red'),49,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",8,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-54.9990769361,-53.2073174669,"[True, False, True, True, True, True, True, True, True]",0.0012075185
605,68,0.4444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, True, True, True, True, True, True, True]",8.7046e-06
606,68,0.4444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, True, True, True, True, True, True, True]",4.4000000000000005e-09
607,68,0.6666666667000001,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),49,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')",8,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[True, False, True, True, True, True, True, True, True]",7.000000000000001e-10
608,68,0.8888888889000001,(not (color == 'red') or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),49,44,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",8,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[True, False, True, True, True, True, True, True, True]",0.1489124843
609,68,0.7777777778,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),49,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",8,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, True, True, True, True, True, True]",0.0
610,68,0.8888888889000001,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),49,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",8,7,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[True, False, True, True, True, True, True, True, True]",0.0
611,68,1.0,(not (color == 'red') or not (shape == 'square')),(not (color == 'red' and shape == 'square')),49,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))",8,8,"""lambda x: (not (x['color'] == 'red' and x['shape'] == 'square'))""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, True, True, True, True, True, True, True]",0.6550020262
612,69,0.6666666667000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, False, True, True, True, True, True, False, False]",0.5624504498
613,69,0.6666666667000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, True, True, True, False, False]",4.6861e-06
614,69,0.4444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, True, True, True, True, True, False, False]",9.0587e-06
615,69,0.6666666667000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",6,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, False]",0.0
616,69,0.7777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, False]",0.0
617,69,0.8888888889000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, False]",0.0
618,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, False]",0.0
619,69,0.8888888889000001,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'blue' or (not shape == 'square')),84,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[True, False, True, True, True, True, True, False, False]",0.5121030854
620,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, True, True, True, True, False, False]",0.0
621,70,0.6666666667000001,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),True,109,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, False, True, True, True, True, False, False, True]",0.5610444898
622,70,0.4444444444,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'circle'),109,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, True, True, True, True, False, False, True]",4.7305e-06
623,70,0.6666666667000001,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, True, True, False, False, True]",9.1837e-06
624,70,0.6666666667000001,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, True, True, False, False, True]",4.6e-09
625,70,0.7777777778,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),109,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square'))""",,,99999.99999,"[True, False, True, True, True, True, False, False, True]",0.0
626,70,0.8888888889000001,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),109,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, True, True, True, True, False, False, True]",0.0
627,70,0.8888888889000001,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or color == 'blue' or shape == 'triangle'),109,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, False, True, True, True, True, False, False, True]",0.0001587388
628,70,0.8888888889000001,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'blue' or shape == 'circle' or shape == 'triangle'),109,61,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'circle' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, False, True, True, True, True, False, False, True]",0.00016240580000000002
629,70,1.0,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),109,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, True, True, True, True, False, False, True]",0.0
630,71,0.5555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, False, True, True, True, True]",0.0014300692
631,71,0.5555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, False, True, True, True, True]",4.6779000000000006e-06
632,71,0.5555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, False, True, True, True, True]",8.9876e-06
633,71,0.5555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, False, True, True, True, True]",4.5e-09
634,71,0.5555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, True, False, True, True, True, True]",4.6e-09
635,71,0.6666666667000001,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-38.6445064569,-22.8057081289,"[True, False, True, True, False, True, True, True, True]",3.8436e-06
636,71,0.6666666667000001,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-38.6445064569,-22.8057081289,"[True, False, True, True, False, True, True, True, True]",1.9e-09
637,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or shape == 'circle' or shape == 'triangle'),45,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'green' or x['shape'] == 'circle' or x['shape'] == 'triangle')""",-11.7928273501,-11.7973284755,-0.0045011254,"[True, False, True, True, False, True, True, True, True]",0.008977736200000001
638,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or (not shape == 'square')),45,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",7,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'square'))""",-7.7674756594000005,-7.7719767847,-0.0045011254,"[True, False, True, True, False, True, True, True, True]",0.5027532621
639,72,0.6666666667000001,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, False, True, True, False, True, False, False, False]",0.2734102908
640,72,0.6666666667000001,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, False, True, True, False, True, False, False, False]",0.0012341951
641,72,0.6666666667000001,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, False, True, False, False, False]",9.0785e-06
642,72,0.8888888889000001,(not (shape == 'square') and not (color == 'green')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),52,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, True, False, True, False, False, False]",0.0
643,72,0.6666666667000001,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, True, False, True, False, False, False]",4.7e-09
644,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, False, True, True, False, True, False, False, False]",3.8942e-06
645,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, False, True, True, False, True, False, False, False]",0.00046095960000000003
646,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, False, True, True, False, True, False, False, False]",0.00046117250000000004
647,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, False, True, True, False, True, False, False, False]",0.0004897225
648,73,0.5555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, False, False, False, True, True, True]",0.0014263647
649,73,0.5555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, False, False, False, True, True, True]",4.748e-06
650,73,0.5555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, True, False, False, False, True, True, True]",9.2336e-06
651,73,0.6666666667000001,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),66,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",5,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-34.1285318497,-22.8057081289,"[True, False, True, False, False, False, True, True, True]",0.022812075100000002
652,73,0.6666666667000001,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-37.7000448481,-22.8057081289,"[True, False, True, False, False, False, True, True, True]",0.0006417279
653,73,0.6666666667000001,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-37.7000448481,-22.8057081289,"[True, False, True, False, False, False, True, True, True]",0.0006766364
654,73,0.7777777778,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, False, False, False, True, True, True]",0.0
655,73,0.8888888889000001,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",5,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[True, False, True, False, False, False, True, True, True]",0.0
656,73,1.0,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",5,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, True, False, False, False, True, True, True]",0.0
657,74,0.6666666667000001,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, False, True, False, False, False, True, False, True]",0.2728001896
658,74,0.6666666667000001,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[True, False, True, False, False, False, True, False, True]",0.0012457613
659,74,0.6666666667000001,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, False, False, False, True, False, True]",9.2641e-06
660,74,0.7777777778,(not (shape == 'square') and not (color == 'blue')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),51,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[True, False, True, False, False, False, True, False, True]",0.0194078634
661,74,0.7777777778,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),51,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-30.0996425136,-15.2053057944,"[True, False, True, False, False, False, True, False, True]",0.0005458196
662,74,0.6666666667000001,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, False, False, False, True, False, True]",2.6680000000000003e-07
663,74,0.8888888889000001,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, False, False, False, True, False, True]",0.0
664,74,0.8888888889000001,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, True, False, False, False, True, False, True]",0.0
665,74,1.0,(not (shape == 'square') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[True, False, True, False, False, False, True, False, True]",0.0004725953
666,75,0.6666666667000001,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'circle'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, False, False, False, False, False, False]",0.0010409415
667,75,0.8888888889000001,(not (shape == 'square') and color == 'red'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",2,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, False, True, False, False, False, False, False, False]",0.0012448208
668,75,0.6666666667000001,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, True, False, False, False, False, False, False]",9.2278e-06
669,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[True, False, True, False, False, False, False, False, False]",0.0183932049
670,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",2,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-14.8988378446,-0.0045011254,"[True, False, True, False, False, False, False, False, False]",0.0005173154
671,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[True, False, True, False, False, False, False, False, False]",0.0191995934
672,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[True, False, True, False, False, False, False, False, False]",0.0351003528
673,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[True, False, True, False, False, False, False, False, False]",0.0351011492
674,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",2,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-14.8988378446,-0.0045011254,"[True, False, True, False, False, False, False, False, False]",0.0009872106
675,76,0.33333333330000003,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-52.9689256836,-45.6069151324,"[True, False, False, True, True, True, True, True, True]",0.0014213234
676,76,0.33333333330000003,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-52.9689256836,-45.6069151324,"[True, False, False, True, True, True, True, True, True]",4.5564e-06
677,76,0.33333333330000003,(shape == 'circle' or not (color == 'red')),(color == 'red' and shape == 'circle'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",7,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-52.2269883389,-45.6069151324,"[True, False, False, True, True, True, True, True, True]",0.0373248642
678,76,0.4444444444,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue'),43,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-45.1172089209,-38.0065127979,"[True, False, False, True, True, True, True, True, True]",6.000000000000001e-09
679,76,0.7777777778,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (not shape == 'triangle')),43,46,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",7,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'triangle'))""",-7.7674756594000005,-22.9727814537,-15.2053057944,"[True, False, False, True, True, True, True, True, True]",0.0002090379
680,76,0.6666666667000001,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (color == 'red' and shape == 'circle')),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",7,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))""",-11.3228237209,-34.1285318497,-22.8057081289,"[True, False, False, True, True, True, True, True, True]",0.0123309752
681,76,0.7777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-26.5926680364,-15.2053057944,"[True, False, False, True, True, True, True, True, True]",3.0000000000000004e-09
682,76,0.8888888889000001,(shape == 'circle' or not (color == 'red')),(not (color == 'red' and shape == 'square')),43,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))",7,8,"""lambda x: (not (x['color'] == 'red' and x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, False, False, True, True, True, True, True, True]",0.001595856
683,76,0.7777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-26.5926680364,-15.2053057944,"[True, False, False, True, True, True, True, True, True]",6.8000000000000005e-09
684,77,0.5555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, False, True, True, True, True, False, False]",0.0010393772
685,77,0.5555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, False, True, True, True, True, False, False]",4.6906000000000005e-06
686,77,0.33333333330000003,(color == 'blue' or shape == 'circle'),(color == 'red'),38,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-47.3986746016,-45.6069151324,"[True, False, False, True, True, True, True, False, False]",1.1924e-06
687,77,0.6666666667000001,(color == 'blue' or shape == 'circle'),(color == 'red' or color == 'blue'),38,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-29.9164042519,-22.8057081289,"[True, False, False, True, True, True, True, False, False]",5.9e-09
688,77,0.8888888889000001,(color == 'blue' or shape == 'circle'),(color == 'blue' or (color == 'red' and shape == 'circle')),38,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",5,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))""",-11.3228237209,-18.9277271807,-7.6049034599,"[True, False, False, True, True, True, True, False, False]",0.0073541087000000005
689,77,0.8888888889000001,(color == 'blue' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue')),38,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))",5,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue'))""",-11.3228237209,-18.9277271807,-7.6049034599,"[True, False, False, True, True, True, True, False, False]",0.0075006034
690,77,0.7777777778,(color == 'blue' or shape == 'circle'),(color == 'blue' or color == 'green' or shape == 'circle'),38,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",5,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'circle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[True, False, False, True, True, True, True, False, False]",0.0047906811
691,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, False, False, True, True, True, True, False, False]",0.5254798213
692,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'circle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[True, False, False, True, True, True, True, False, False]",0.5255637217
693,78,0.6666666667000001,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return True",6,9,"""lambda x: True""",-1.3862943611,-24.19200249,-22.8057081289,"[True, False, False, True, True, False, True, True, True]",0.5606934849
694,78,0.4444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, False, True, True, False, True, True, True]",4.6351e-06
695,78,0.4444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' and shape == 'circle'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-44.6265860044,-38.0065127979,"[True, False, False, True, True, False, True, True, True]",0.0373274792
696,78,0.5555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-14.8943367192,-45.3004471826,-30.4061104634,"[True, False, False, True, True, False, True, True, True]",9.9881e-06
697,78,0.5555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))""",-11.3228237209,-41.7289341842,-30.4061104634,"[True, False, False, True, True, False, True, True, True]",0.0126508125
698,78,0.5555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'circle'))""",-11.3228237209,-41.7289341842,-30.4061104634,"[True, False, False, True, True, False, True, True, True]",0.00011955160000000001
699,78,0.8888888889000001,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'circle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, False, False, True, True, False, True, True, True]",7.473730000000001e-05
700,78,0.8888888889000001,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'circle')""",-11.7928273501,-19.39773081,-7.6049034599,"[True, False, False, True, True, False, True, True, True]",0.00015874780000000002
701,78,0.8888888889000001,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (not color == 'red')),84,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (not color == 'red'))",6,7,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (not x['color'] == 'red'))""",-11.6105057933,-19.2154092532,-7.6049034599,"[True, False, False, True, True, False, True, True, True]",0.0045671061
702,79,0.4444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' or shape == 'circle'),91,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[True, False, False, True, False, True, True, True, True]",0.0010385205
703,79,0.4444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle'),91,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-44.6265860044,-38.0065127979,"[True, False, False, True, False, True, True, True, True]",0.0193141343
704,79,0.2222222222,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red'),91,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red')",6,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-54.9990769361,-53.2073174669,"[True, False, False, True, False, True, True, True, True]",1.1641e-06
705,79,0.5555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),91,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-14.8943367192,-45.3004471826,-30.4061104634,"[True, False, False, True, False, True, True, True, True]",9.978e-06
706,79,0.5555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' or color == 'blue') and shape == 'circle'),91,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')",6,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'circle')""",-11.3228237209,-41.7289341842,-30.4061104634,"[True, False, False, True, False, True, True, True, True]",0.0003626908
707,79,0.5555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),91,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",-15.2998018273,-45.7059122907,-30.4061104634,"[True, False, False, True, False, True, True, True, True]",2.2684e-06
708,79,0.6666666667000001,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),91,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",6,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, False, True, False, True, True, True, True]",0.0
709,79,0.7777777778,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),91,171,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[True, False, False, True, False, True, True, True, True]",0.0
710,79,1.0,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green'),91,148,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green')",6,6,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green')""",,,99999.99999,"[True, False, False, True, False, True, True, True, True]",0.0
711,80,0.7777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(shape == 'circle'),73,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')",5,3,"""lambda x: (x['shape'] == 'circle')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, False, False, True, False, True, True, False, True]",0.214572392
712,80,0.5555555556,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' or shape == 'circle'),73,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[True, False, False, True, False, True, True, False, True]",1.3550000000000002e-06
713,80,0.33333333330000003,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red'),73,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",5,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-47.3986746016,-45.6069151324,"[True, False, False, True, False, True, True, False, True]",2.076e-07
714,80,0.6666666667000001,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),73,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",5,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle')""",-14.8943367192,-37.7000448481,-22.8057081289,"[True, False, False, True, False, True, True, False, True]",1.6949e-06
715,80,0.6666666667000001,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' or color == 'blue') and shape == 'circle'),73,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')",5,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'circle')""",-11.3228237209,-34.1285318497,-22.8057081289,"[True, False, False, True, False, True, True, False, True]",6.04755e-05
716,80,0.6666666667000001,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),73,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",-15.2998018273,-38.1055099562,-22.8057081289,"[True, False, False, True, False, True, True, False, True]",8.445e-07
717,80,0.7777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, False, True, False, True, True, False, True]",0.0
718,80,0.7777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[True, False, False, True, False, True, True, False, True]",0.0
719,80,1.0,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),73,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))",5,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, False, True, False, True, True, False, True]",0.0
720,81,0.6666666667000001,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, False, True, False, False, True, True, False]",0.0014230845
721,81,0.6666666667000001,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, False, True, False, False, True, True, False]",4.5649e-06
722,81,0.6666666667000001,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'circle'),63,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[True, False, False, True, False, False, True, True, False]",0.036681159500000005
723,81,0.33333333330000003,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-52.7176112554,-45.6069151324,"[True, False, False, True, False, False, True, True, False]",5.9e-09
724,81,0.33333333330000003,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-52.7176112554,-45.6069151324,"[True, False, False, True, False, False, True, True, False]",0.0
725,81,0.33333333330000003,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-52.7176112554,-45.6069151324,"[True, False, False, True, False, False, True, True, False]",0.0
726,81,0.4444444444,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue' or color == 'green'),63,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-49.3938750399,-38.0065127979,"[True, False, False, True, False, False, True, True, False]",2.095745665e-17
727,81,0.8888888889000001,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or shape == 'circle'),63,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'circle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[True, False, False, True, False, False, True, True, False]",0.5180953159
728,81,0.6666666667000001,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or (not shape == 'square')),63,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",4,7,"""lambda x: (x['color'] == 'green' or (not x['shape'] == 'square'))""",-7.7674756594000005,-30.5731837882,-22.8057081289,"[True, False, False, True, False, False, True, True, False]",1.9e-09
729,82,0.6666666667000001,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, False, True, False, False, True, False, True]",0.0008171059
730,82,0.6666666667000001,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, False, True, False, False, True, False, True]",1.3581e-06
731,82,0.4444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red'),65,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[True, False, False, True, False, False, True, False, True]",2.075e-07
732,82,0.7777777778,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),65,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",4,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle')""",-14.8943367192,-30.0996425136,-15.2053057944,"[True, False, False, True, False, False, True, False, True]",1.6947e-06
733,82,0.33333333330000003,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-52.7176112554,-45.6069151324,"[True, False, False, True, False, False, True, False, True]",0.0
734,82,0.33333333330000003,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue')""",-7.110696123,-52.7176112554,-45.6069151324,"[True, False, False, True, False, False, True, False, True]",2.5563145340000003e-16
735,82,0.4444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),65,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9,"""lambda x: (x['color'] == 'red' or x['color'] == 'blue' or x['color'] == 'green')""",-11.387362242,-49.3938750399,-38.0065127979,"[True, False, False, True, False, False, True, False, True]",3.553076759e-18
736,82,0.8888888889000001,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(shape == 'circle'),65,19,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'circle')",4,3,"""lambda x: (x['shape'] == 'circle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[True, False, False, True, False, False, True, False, True]",0.8360110459000001
737,82,0.8888888889000001,(shape == 'circle' or (color == 'green' and shape == 'triangle')),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle')),65,129,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'triangle'))""",,,99999.99999,"[True, False, False, True, False, False, True, False, True]",0.0
738,83,0.6666666667000001,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, False, False, False, False, True, False, False]",0.0014277015000000001
739,83,0.6666666667000001,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[True, False, False, False, False, False, True, False, False]",4.6608e-06
740,83,0.8888888889000001,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, False, False, False, False, False, True, False, False]",0.037727658000000004
741,83,0.8888888889000001,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, False, False, False, False, False, True, False, False]",0.6720254964
742,83,0.8888888889000001,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, False, False, False, False, False, True, False, False]",0.6721178282
743,83,0.8888888889000001,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[True, False, False, False, False, False, True, False, False]",0.6721206129
744,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')",2,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle')""",-14.8943367192,-14.8988378446,-0.0045011254,"[True, False, False, False, False, False, True, False, False]",0.0013260801000000001
745,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')",2,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'circle')""",-14.8943367192,-14.8988378446,-0.0045011254,"[True, False, False, False, False, False, True, False, False]",0.001402994
746,83,0.5555555556,(not (color == 'blue') and shape == 'circle'),(color == 'red' or color == 'green'),45,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",2,6,"""lambda x: (x['color'] == 'red' or x['color'] == 'green')""",-7.110696123,-37.5168065864,-30.4061104634,"[True, False, False, False, False, False, True, False, False]",0.0
747,84,0.7777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",1,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, False, False, False, False, False, False, False, False]",0.2733791914
748,84,0.7777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",1,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-16.9970652636,-15.2053057944,"[True, False, False, False, False, False, False, False, False]",0.0012214668
749,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.037696572500000004
750,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.6622468432
751,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.6623364821000001
752,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.6623391864
753,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.7462960576000001
754,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.7462982691000001
755,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[True, False, False, False, False, False, False, False, False]",0.7462982702000001
756,85,0.6666666667000001,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, True, True, True, False, True, False]",7.176e-07
757,85,0.6666666667000001,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, True, True, True, False, True, False]",4.7053000000000005e-06
758,85,0.4444444444,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, True, True, True, True, False, True, False]",9.171900000000001e-06
759,85,0.6666666667000001,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",6,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, False]",0.0
760,85,0.7777777778,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, False]",0.0
761,85,0.6666666667000001,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-34.598535479,-22.8057081289,"[False, True, True, True, True, True, False, True, False]",1.7000000000000001e-09
762,85,0.8888888889000001,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, False]",0.0
763,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, False]",0.0
764,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, True, True, True, False, True, False]",0.0
765,86,0.33333333330000003,(color == 'green' or not (shape == 'circle')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",7,5,"""lambda x: False""",-1.3862943611,-54.593611828,-53.2073174669,"[False, True, True, False, True, True, True, True, True]",0.5641336581
766,86,0.5555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, True, True, True, True, True]",4.6473e-06
767,86,0.5555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, True, True, True, True, True]",8.95e-06
768,86,0.5555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, True, True, True, True, True]",9.063000000000001e-06
769,86,0.5555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, True, True, True, True, True]",9.125e-06
770,86,0.6666666667000001,(color == 'green' or not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",7,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-38.6445064569,-22.8057081289,"[False, True, True, False, True, True, True, True, True]",3.8004e-06
771,86,0.8888888889000001,(color == 'green' or not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),45,42,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",7,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')""",-7.110696123,-14.7155995829,-7.6049034599,"[False, True, True, False, True, True, True, True, True]",0.0009782118
772,86,0.7777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, True, True, False, True, True, True, True, True]",4.5e-09
773,86,0.7777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, True, True, False, True, True, True, True, True]",4.5e-09
774,87,0.6666666667000001,(not (color == 'green') and not (shape == 'circle')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, True, True, False, True, True, False, False, False]",0.0001883093
775,87,0.6666666667000001,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, False, False]",4.6959e-06
776,87,0.6666666667000001,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, False, False]",9.1322e-06
777,87,0.6666666667000001,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, True, False, False, False]",9.2784e-06
778,87,0.7777777778,(not (color == 'green') and not (shape == 'circle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),52,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-30.0996425136,-15.2053057944,"[False, True, True, False, True, True, False, False, False]",5e-09
779,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, True, True, False, True, True, False, False, False]",3.9010000000000004e-06
780,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, True, True, False, True, True, False, False, False]",3.9256e-06
781,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, True, True, False, True, True, False, False, False]",0.00044597340000000004
782,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, True, True, False, True, True, False, False, False]",0.0004726091
783,88,0.6666666667000001,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, False, True, True, True]",7.172e-07
784,88,0.6666666667000001,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, False, True, True, True]",4.6868e-06
785,88,0.4444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, True, False, True, False, True, True, True]",9.177e-06
786,88,0.4444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, True, False, True, False, True, True, True]",9.2958e-06
787,88,0.6666666667000001,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, True, False, True, True, True]",9.3816e-06
788,88,0.5555555556,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),85,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-45.3004471826,-30.4061104634,"[False, True, True, False, True, False, True, True, True]",4.8732e-06
789,88,0.7777777778,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle')),85,171,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[False, True, True, False, True, False, True, True, True]",0.0
790,88,0.8888888889000001,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square')),85,215,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, False, True, False, True, True, True]",0.0
791,88,1.0,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),85,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",6,6,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'triangle'))""",,,99999.99999,"[False, True, True, False, True, False, True, True, True]",0.0
792,89,0.6666666667000001,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, True, True, False, True, False, False, True, False]",0.0001883641
793,89,0.8888888889000001,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, True, True, False, True, False, False, True, False]",4.7049000000000005e-06
794,89,0.4444444444,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),63,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, True, False, True, False, False, True, False]",9.1285e-06
795,89,0.7777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),63,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, True, False, True, False, False, True, False]",0.0003531414
796,89,0.8888888889000001,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, True, True, False, True, False, False, True, False]",9.407e-06
797,89,0.7777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),63,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-30.0996425136,-15.2053057944,"[False, True, True, False, True, False, False, True, False]",2.7049e-06
798,89,0.6666666667000001,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square' or shape == 'triangle'),63,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",4,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-34.598535479,-22.8057081289,"[False, True, True, False, True, False, False, True, False]",3.02e-08
799,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))",4,4,"""lambda x: (x['shape'] == 'square' or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, True, False, False, True, False]",0.19386523360000002
800,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))",4,4,"""lambda x: (x['shape'] == 'square' or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, True, False, False, True, False]",0.3076697302
801,90,0.5555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),True,70,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return True",5,9,"""lambda x: True""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, True, True, False, False, True, False, True, True]",0.0002817329
802,90,0.5555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'square'),70,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, False, True, False, True, True]",4.6513e-06
803,90,0.7777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, True, False, False, True, False, True, True]",8.9288e-06
804,90,0.7777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, True, False, False, True, False, True, True]",9.1167e-06
805,90,0.7777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, True, False, False, True, False, True, True]",0.0011737100000000001
806,90,0.7777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, True, False, False, True, False, True, True]",0.0062234256000000005
807,90,0.7777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, True, False, False, True, False, True, True]",0.0062375152
808,90,0.8888888889000001,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(shape == 'square' or shape == 'triangle'),70,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",5,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')""",-7.110696123,-14.7155995829,-7.6049034599,"[False, True, True, False, False, True, False, True, True]",0.0169415389
809,90,0.8888888889000001,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),70,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))",5,4,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-23.4437017879,-7.6049034599,"[False, True, True, False, False, True, False, True, True]",2.7440000000000003e-06
810,91,0.5555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),r == 'red' and shape == 'circle':,66,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",5,5,"""lambda x: r == 'red' and x['shape'] == 'circle':""",88888.88888,88888.88888,88888.88888,"[False, True, True, False, False, False, True, True, True]",0.0
811,91,0.5555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'square'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, False, False, True, True, True]",4.7235e-06
812,91,0.5555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, True, False, False, False, True, True, True]",9.1798e-06
813,91,0.6666666667000001,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),66,84,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle'))""",-14.8943367192,-37.7000448481,-22.8057081289,"[False, True, True, False, False, False, True, True, True]",9.984700000000001e-06
814,91,0.6666666667000001,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",5,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-34.1285318497,-22.8057081289,"[False, True, True, False, False, False, True, True, True]",0.0224811481
815,91,0.6666666667000001,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",5,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-34.1285318497,-22.8057081289,"[False, True, True, False, False, False, True, True, True]",0.0239361144
816,91,0.7777777778,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",5,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle'))""",,,99999.99999,"[False, True, True, False, False, False, True, True, True]",0.0
817,91,0.8888888889000001,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",5,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[False, True, True, False, False, False, True, True, True]",0.0
818,91,1.0,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",5,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'green' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'triangle'))""",,,99999.99999,"[False, True, True, False, False, False, True, True, True]",0.0
819,92,0.8888888889000001,(color == 'red' and not (shape == 'circle')),r == 'red':,44,11,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	if color == 'red':",2,3,"""lambda x: r == 'red':""",88888.88888,88888.88888,88888.88888,"[False, True, True, False, False, False, False, False, False]",0.0
820,92,0.8888888889000001,(color == 'red' and not (shape == 'circle')),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",2,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, True, True, False, False, False, False, False, False]",0.0012339316
821,92,0.6666666667000001,(color == 'red' and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, True, False, False, False, False, False, False]",9.150200000000001e-06
822,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, False, False, False, False, False]",0.0003539947
823,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, False, False, False, False, False]",0.0186032018
824,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, False, False, False, False, False]",0.0195933623
825,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, False, False, False, False, False]",0.0199299632
826,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, False, False, False, False, False]",0.0358775405
827,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'red' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, True, False, False, False, False, False, False]",0.035892765
828,93,0.5555555556,(shape == 'square' or not (color == 'red')),(shape == 'square'),43,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'square')",7,3,"""lambda x: (x['shape'] == 'square')""",-1.7917594692,-32.1978699326,-30.4061104634,"[False, True, False, True, True, True, True, True, True]",0.2732035599
829,93,0.33333333330000003,(shape == 'square' or not (color == 'red')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, True, False, True, True, True, True, True, True]",1.3502e-06
830,93,0.33333333330000003,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",7,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-52.2269883389,-45.6069151324,"[False, True, False, True, True, True, True, True, True]",0.0065816116000000004
831,93,0.4444444444,(shape == 'square' or not (color == 'red')),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),43,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",7,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-15.2998018273,-53.3063146252,-38.0065127979,"[False, True, False, True, True, True, True, True, True]",0.0001320936
832,93,0.4444444444,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),43,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')",7,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle')""",-15.2998018273,-53.3063146252,-38.0065127979,"[False, True, False, True, True, True, True, True, True]",6.61e-08
833,93,0.6666666667000001,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue'),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')",7,4,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue')""",-11.3228237209,-34.1285318497,-22.8057081289,"[False, True, False, True, True, True, True, True, True]",0.0075359436
834,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-11.7973284755,-0.0045011254,"[False, True, False, True, True, True, True, True, True]",0.0181921754
835,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",7,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-11.7973284755,-0.0045011254,"[False, True, False, True, True, True, True, True, True]",0.0181927824
836,93,0.7777777778,(shape == 'square' or not (color == 'red')),(color == 'blue' or shape == 'square'),43,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",7,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, True, False, True, True, True, True, True, True]",3.8300000000000003e-07
837,94,0.4444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, False, True, True, True, True, True, False]",7.166e-07
838,94,0.4444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, False, True, True, True, True, True, False]",4.6623e-06
839,94,0.4444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, True, False, True, True, True, True, True, False]",0.0375839507
840,94,0.5555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-15.2998018273,-45.7059122907,-30.4061104634,"[False, True, False, True, True, True, True, True, False]",0.0002257666
841,94,0.5555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' or color == 'blue') and shape == 'square'),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",6,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-41.7289341842,-30.4061104634,"[False, True, False, True, True, True, True, True, False]",6.0324e-06
842,94,0.7777777778,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or (color == 'red' and shape == 'square')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'square'))",6,4,"""lambda x: (x['color'] == 'blue' or (x['color'] == 'red' and x['shape'] == 'square'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, True, True, True, True, True, False]",0.0123899764
843,94,0.8888888889000001,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, False, True, True, True, True, True, False]",0.0179362521
844,94,0.8888888889000001,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, False, True, True, True, True, True, False]",0.0179369175
845,94,0.8888888889000001,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle')),84,105,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle'))",6,5,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue') or (x['color'] == 'green' and x['shape'] == 'circle'))""",-20.1518320912,-27.7567355511,-7.6049034599,"[False, True, False, True, True, True, True, True, False]",8.399e-07
846,95,0.2222222222,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, True, False, True, True, True, False, True, True]",7.15e-07
847,95,0.4444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, False, True, True, True, False, True, True]",4.5951e-06
848,95,0.4444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' and shape == 'square'),86,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, True, False, True, True, True, False, True, True]",0.0368785109
849,95,0.5555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),86,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-15.2998018273,-45.7059122907,-30.4061104634,"[False, True, False, True, True, True, False, True, True]",0.0001386197
850,95,0.5555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' or color == 'blue') and shape == 'square'),86,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",6,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-41.7289341842,-30.4061104634,"[False, True, False, True, True, True, False, True, True]",3.7023e-06
851,95,0.7777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, True, True, True, False, True, True]",0.0075245411000000005
852,95,0.7777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))",6,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, True, True, True, False, True, True]",0.0097518206
853,95,0.8888888889000001,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, True, False, True, True, True, False, True, True]",0.5249811665
854,95,0.8888888889000001,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, True, False, True, True, True, False, True, True]",0.2665755242
855,96,0.5555555556,(shape == 'square' or color == 'blue'),True,38,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return True",5,9,"""lambda x: True""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, True, False, True, True, True, False, True, False]",0.0002816946
856,96,0.5555555556,(shape == 'square' or color == 'blue'),(color == 'red' or shape == 'square'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, False, True, True, True, False, True, False]",4.593e-06
857,96,0.5555555556,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, True, False, True, True, True, False, True, False]",0.0366512726
858,96,0.6666666667000001,(shape == 'square' or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),38,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",5,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-15.2998018273,-38.1055099562,-22.8057081289,"[False, True, False, True, True, True, False, True, False]",0.0001401274
859,96,0.6666666667000001,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),38,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')",5,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle')""",-15.2998018273,-38.1055099562,-22.8057081289,"[False, True, False, True, True, True, False, True, False]",7.01e-08
860,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, True, False, True, True, True, False, True, False]",0.3994409023
861,96,0.8888888889000001,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue'),38,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')",5,4,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue')""",-11.3228237209,-18.9277271807,-7.6049034599,"[False, True, False, True, True, True, False, True, False]",0.0098027633
862,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, True, False, True, True, True, False, True, False]",0.5264711685
863,96,1.0,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square'),38,103,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue') or (x['color'] == 'green' and x['shape'] == 'square')""",-19.7463669831,-19.7508681085,-0.0045011254,"[False, True, False, True, True, True, False, True, False]",2.2028e-06
864,97,0.4444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, True, False, True, True, False, True, True, True]",7.161e-07
865,97,0.4444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, True, False, True, True, False, True, True, True]",0.0195436435
866,97,0.4444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, True, False, True, True, False, True, True, True]",0.037480013300000004
867,97,0.5555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-15.2998018273,-45.7059122907,-30.4061104634,"[False, True, False, True, True, False, True, True, True]",0.0002371099
868,97,0.6666666667000001,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'circle'),84,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'circle')",6,7,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square' or x['shape'] == 'circle')""",-11.7928273501,-34.598535479,-22.8057081289,"[False, True, False, True, True, False, True, True, True]",2e-09
869,97,0.5555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'blue' and x['shape'] == 'circle'))""",-15.2998018273,-45.7059122907,-30.4061104634,"[False, True, False, True, True, False, True, True, True]",2.3149e-06
870,97,0.8888888889000001,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, False, True, True, False, True, True, True]",0.0001555854
871,97,0.8888888889000001,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, False, True, True, False, True, True, True]",0.0001555854
872,97,0.8888888889000001,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'square')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, True, False, True, True, False, True, True, True]",0.0045907547000000005
873,98,0.4444444444,(color == 'green' or shape == 'square'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return False",5,0,"""lambda x: False""",-1.3862943611,-39.392807159,-38.0065127979,"[False, True, False, False, True, False, True, True, True]",0.5630557086
874,98,0.5555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, False, False, True, False, True, True, True]",4.6107e-06
875,98,0.5555555556,(color == 'green' or shape == 'square'),(color == 'red' and shape == 'square'),39,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, True, False, False, True, False, True, True, True]",0.036793057000000004
876,98,0.5555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, True, False, False, True, False, True, True, True]",4.4000000000000005e-09
877,98,0.6666666667000001,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",5,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-34.1285318497,-22.8057081289,"[False, True, False, False, True, False, True, True, True]",0.00035554470000000003
878,98,0.6666666667000001,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",5,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-34.1285318497,-22.8057081289,"[False, True, False, False, True, False, True, True, True]",0.0003557161
879,98,0.7777777778,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle'),39,103,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle')",5,3,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle')""",-20.1518320912,-35.3571378856,-15.2053057944,"[False, True, False, False, True, False, True, True, True]",1.4364000000000001e-06
880,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, True, False, False, True, False, True, True, True]",0.5150688636
881,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, True, False, False, True, False, True, True, True]",0.5252376062
882,99,0.5555555556,(shape == 'square' or (color == 'green' and shape == 'triangle')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, True, False, False, True, False, False, True, True]",0.5636784021
883,99,0.6666666667000001,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, False, False, True, False, False, True, True]",4.6438e-06
884,99,0.6666666667000001,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'square'),65,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, True, False, False, True, False, False, True, True]",0.0374415337
885,99,0.7777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, False, True, False, False, True, True]",0.00034513860000000003
886,99,0.7777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, False, True, False, False, True, True]",0.0003626872
887,99,0.7777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, False, True, False, False, True, True]",0.0003628662
888,99,0.7777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, False, True, False, False, True, True]",0.0003681234
889,99,0.7777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, True, False, False, True, False, False, True, True]",1.851e-07
890,99,1.0,(shape == 'square' or (color == 'green' and shape == 'triangle')),(shape == 'square' or (color == 'green' and shape == 'triangle')),65,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'green' and shape == 'triangle'))",4,4,"""lambda x: (x['shape'] == 'square' or (x['color'] == 'green' and x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, True, False, False, True, True]",0.348205649
891,100,0.7777777778,(shape == 'square' and not (color == 'green')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, True, False, False, True, False, False, False, False]",0.563709608
892,100,0.6666666667000001,(shape == 'square' and not (color == 'green')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, True, False, False, True, False, False, False, False]",4.6454000000000004e-06
893,100,0.8888888889000001,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, True, False, False, False, False]",0.0373235185
894,100,0.8888888889000001,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, True, False, False, False, False]",0.0379183439
895,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, True, False, False, False, False]",0.0003613533
896,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, True, False, False, False, False]",0.000361531
897,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, True, False, False, False, False]",0.0003669384
898,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, True, False, False, False, False]",0.0455211835
899,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, True, False, False, False, False]",0.0455212054
900,101,0.4444444444,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red'),60,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[False, True, False, False, False, False, True, True, True]",0.0001876934
901,101,0.6666666667000001,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, True, False, False, False, False, True, True, True]",0.019509641
902,101,0.6666666667000001,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, True, False, False, False, False, True, True, True]",0.0374420762
903,101,0.6666666667000001,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, True, False, False, False, False, True, True, True]",0.0380405507
904,101,0.6666666667000001,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, True, False, False, False, False, True, True, True]",0.6720141795
905,101,0.6666666667000001,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, True, False, False, False, False, True, True, True]",0.6720196135000001
906,101,0.7777777778,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle'),60,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle')",4,2,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'circle')""",-15.2998018273,-30.5051076217,-15.2053057944,"[False, True, False, False, False, False, True, True, True]",0.0055658042
907,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))",4,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, False, False, True, True, True]",0.3051389062
908,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))",4,4,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, False, False, True, True, True]",0.3059770448
909,102,0.7777777778,(shape == 'square' and not (color == 'blue')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, True, False, False, False, False, False, True, False]",0.5637454654
910,102,0.8888888889000001,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, False, False, False, True, False]",0.0195091008
911,102,0.8888888889000001,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, False, False, False, True, False]",0.037352681400000004
912,102,0.8888888889000001,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, False, False, False, True, False]",0.0379484441
913,102,0.8888888889000001,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, False, False, False, True, False]",0.6682971664
914,102,0.8888888889000001,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, False, False, False, True, False]",0.6683025405
915,102,0.8888888889000001,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, True, False, False, False, False, False, True, False]",0.6736588072
916,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square')),45,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square'))",2,2,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'square'))""",-14.8943367192,-14.8988378446,-0.0045011254,"[False, True, False, False, False, False, False, True, False]",0.0013500859
917,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'square'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, True, False, False, False, False, False, True, False]",0.048024569
918,103,0.8888888889000001,(color == 'red' and shape == 'square'),False,38,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, True, False, False, False, False, False, False, False]",0.563825181
919,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.0195270147
920,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.0374184054
921,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.0380162832
922,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.6627736862
923,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.6627789718
924,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.6680334335
925,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.7474110347
926,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, True, False, False, False, False, False, False, False]",0.7474110380000001
927,104,0.4444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, True, True, True, True, True, False, True]",5.217e-07
928,104,0.2222222222,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, False, True, True, True, True, True, False, True]",3e-10
929,104,0.6666666667000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle'),86,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle')",6,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, False, True, True, True, True, True, False, True]",0.8272961528
930,104,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, True, False, True]",0.3731010145
931,104,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, True, False, True]",0.3989695116
932,104,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, True, False, True]",0.3989695354
933,104,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle' or color == 'blue' or color == 'green'),86,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle' or color == 'blue' or color == 'green')",6,7,"""lambda x: (x['shape'] == 'triangle' or x['color'] == 'blue' or x['color'] == 'green')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, False, True, True, True, True, True, False, True]",0.0182614821
934,104,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[False, False, True, True, True, True, True, False, True]",0.1078828473
935,104,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'square'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[False, False, True, True, True, True, True, False, True]",0.1083214096
936,105,0.33333333330000003,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),False,111,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return False",6,0,"""lambda x: False""",-1.3862943611,-46.9932094935,-45.6069151324,"[False, False, True, True, True, True, False, True, True]",0.5611543084
937,105,0.4444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' or shape == 'square'),111,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, True, True, True, True, False, True, True]",4e-10
938,105,0.4444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' and shape == 'triangle'),111,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, False, True, True, True, True, False, True, True]",0.0368266298
939,105,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, False, True, True]",0.3960198942
940,105,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, False, True, True]",0.4029871512
941,105,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, False, True, True]",0.4029872608
942,105,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, True, True, False, True, True]",0.5229933783
943,105,0.6666666667000001,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'square'),111,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, True, True, True, True, False, True, True]",7.92052e-05
944,105,0.8888888889000001,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or (not shape == 'circle')),111,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'circle'))",6,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'circle'))""",-7.7674756594000005,-15.3723791192,-7.6049034599,"[False, False, True, True, True, True, False, True, True]",0.1059823198
945,106,0.33333333330000003,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'circle'),40,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, True, True, True, True, False, False, True]",7.155000000000001e-07
946,106,0.33333333330000003,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, True, True, True, True, False, False, True]",4e-10
947,106,0.5555555556,(color == 'blue' or shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, True, True, True, True, False, False, True]",0.0368149039
948,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, True, True, True, False, False, True]",0.3931917482
949,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, True, True, True, False, False, True]",0.4000590255
950,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, True, True, True, False, False, True]",0.4000591335
951,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, True, True, True, False, False, True]",0.5180722918
952,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, True, True, True, False, False, True]",0.5181520583
953,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-7.3665116766,-0.0045011254,"[False, False, True, True, True, True, False, False, True]",0.5262256562000001
954,107,0.4444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' or shape == 'circle'),108,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, True, True, False, True, True, True, True]",7.138e-07
955,107,0.4444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' and shape == 'triangle'),108,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",6,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, False, True, True, False, True, True, True, True]",0.0034856511000000002
956,107,0.4444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' and shape == 'triangle'),108,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",6,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-44.6265860044,-38.0065127979,"[False, False, True, True, False, True, True, True, True]",0.0367836344
957,107,0.6666666667000001,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, True, True, False, True, True, True, True]",0.40148069070000003
958,107,0.6666666667000001,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, True, True, False, True, True, True, True]",0.0061036282
959,107,0.6666666667000001,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, True, True, False, True, True, True, True]",0.00620479
960,107,0.8888888889000001,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, False, True, True, False, True, True, True, True]",0.0001575631
961,107,0.8888888889000001,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, False, True, True, False, True, True, True, True]",0.0026675461000000003
962,107,0.8888888889000001,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-19.39773081,-7.6049034599,"[False, False, True, True, False, True, True, True, True]",0.0026675461000000003
963,108,0.4444444444,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),False,75,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return False",5,0,"""lambda x: False""",-1.3862943611,-39.392807159,-38.0065127979,"[False, False, True, True, False, True, True, False, True]",0.4087527047
964,108,0.5555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue'),75,17,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-32.1978699326,-30.4061104634,"[False, False, True, True, False, True, True, False, True]",0.3035004452
965,108,0.5555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'red' and shape == 'triangle'),75,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, True, True, False, True, True, False, True]",0.0368609182
966,108,0.7777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, True, True, False, True, True, False, True]",0.38138726900000003
967,108,0.7777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, True, True, False, True, True, False, True]",0.0060993608
968,108,0.7777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, True, True, False, True, True, False, True]",0.0062003608000000005
969,108,0.7777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, False, True, True, False, True, True, False, True]",0.00015630290000000002
970,108,0.8888888889000001,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),((not color == 'red') and (not shape == 'square')),75,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return ((not color == 'red') and (not shape == 'square'))",5,4,"""lambda x: ((not x['color'] == 'red') and (not x['shape'] == 'square'))""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, True, False, True, True, False, True]",0.028256261
971,108,0.7777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, False, True, True, False, True, True, False, True]",8.010000000000001e-08
972,109,0.5555555556,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),False,64,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, True, True, False, True, False, False, True]",0.5634740225
973,109,0.2222222222,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' or shape == 'square'),64,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, False, True, True, False, True, False, False, True]",4e-10
974,109,0.6666666667000001,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' and shape == 'triangle'),64,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, True, True, False, True, False, False, True]",0.036764169400000005
975,109,0.8888888889000001,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, False, True, False, False, True]",0.4035462093
976,109,0.8888888889000001,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, False, True, False, False, True]",0.0061675959
977,109,0.8888888889000001,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, False, True, False, False, True]",0.0062708874
978,109,0.8888888889000001,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, False, True, False, False, True]",0.011312055000000001
979,109,0.8888888889000001,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, True, False, True, False, False, True]",0.0113121313
980,109,0.7777777778,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),((color == 'blue' or color == 'red') and shape == 'triangle'),64,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'red') and shape == 'triangle')",4,2,"""lambda x: ((x['color'] == 'blue' or x['color'] == 'red') and x['shape'] == 'triangle')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, False, True, True, False, True, False, False, True]",1.078e-07
981,110,0.5555555556,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(False),65,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (False)",4,0,"""lambda x: (False)""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, True, False, False, True, True, False, True]",0.4098883343
982,110,0.4444444444,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red'),65,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-39.7982722671,-38.0065127979,"[False, False, True, False, False, True, True, False, True]",7.620000000000001e-08
983,110,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, True, False, False, True, True, False, True]",0.8208482236
984,110,0.6666666667000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, True, False, False, True, True, False, True]",0.0065840974
985,110,0.6666666667000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, True, False, False, True, True, False, True]",0.0065846143000000005
986,110,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, True, False, False, True, True, False, True]",0.8303326661
987,110,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, False, False, True, True, False, True]",0.4848241266
988,110,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, False, False, True, True, False, True]",0.0028562371000000002
989,110,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, True, False, False, True, True, False, True]",0.0028581517
990,111,0.5555555556,(shape == 'triangle' or (color == 'green' and shape == 'square')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, True, False, False, True, False, True, True]",0.4099987074
991,111,0.4444444444,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, True, False, False, True, False, True, True]",3e-10
992,111,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, True, False, False, True, False, True, True]",0.8236592936
993,111,0.6666666667000001,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, True, False, False, True, False, True, True]",0.0066075771
994,111,0.6666666667000001,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, True, False, False, True, False, True, True]",0.0066080982
995,111,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, True, False, False, True, False, True, True]",0.8336297299000001
996,111,0.7777777778,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' or color == 'blue') and shape == 'triangle'),65,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",4,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'blue') and x['shape'] == 'triangle')""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, False, True, False, False, True, False, True, True]",6.0634500000000004e-05
997,111,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'),65,129,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')",4,3,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square')""",,,99999.99999,"[False, False, True, False, False, True, False, True, True]",0.0
998,111,0.8888888889000001,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),65,131,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",4,3,"""lambda x: ((x['color'] == 'red' and x['shape'] == 'triangle') or (x['color'] == 'blue' and x['shape'] == 'triangle') or (x['color'] == 'green' and x['shape'] == 'square'))""",,,99999.99999,"[False, False, True, False, False, True, False, True, True]",0.0
999,112,0.7777777778,(shape == 'triangle' and not (color == 'blue')),False,47,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, True, False, False, False, False, False, True]",0.5639689855000001
1000,112,0.4444444444,(shape == 'triangle' and not (color == 'blue')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, True, False, False, False, False, False, True]",4e-10
1001,112,0.8888888889000001,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, False, False, False, True]",0.0373863623
1002,112,0.8888888889000001,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, False, False, False, True]",0.037954844200000004
1003,112,0.8888888889000001,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, False, False, False, True]",0.037972031
1004,112,0.8888888889000001,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, False, False, False, True]",0.6701064147
1005,112,0.8888888889000001,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, False, False, False, True]",0.67558081
1006,112,0.8888888889000001,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, True, False, False, False, False, False, True]",0.6755835736
1007,112,1.0,(shape == 'triangle' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'triangle'),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'triangle')",2,2,"""lambda x: ((x['color'] == 'red' or x['color'] == 'green') and x['shape'] == 'triangle')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, True, False, False, False, False, False, True]",0.049123002400000004
1008,113,0.8888888889000001,(color == 'red' and shape == 'triangle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, True, False, False, False, False, False, False]",0.5643298297
1009,113,0.5555555556,(color == 'red' and shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, False, True, False, False, False, False, False, False]",4e-10
1010,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.037352091500000004
1011,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.0379478898
1012,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.0379650845
1013,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.6679496249
1014,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.6733886943
1015,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.6733914401000001
1016,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, True, False, False, False, False, False, False]",0.7575196838
1017,114,0.33333333330000003,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),r == 'red' and shape == 'circle':,69,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",5,1,"""lambda x: r == 'red' and x['shape'] == 'circle':""",88888.88888,88888.88888,88888.88888,"[False, False, False, True, True, True, True, True, False]",0.0
1018,114,0.5555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'square'),69,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",5,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, False, True, True, True, True, True, False]",0.0024239514000000003
1019,114,0.7777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, False, True, True, True, True, True, False]",6.128e-07
1020,114,0.5555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'circle'),69,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",5,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-37.0261836699,-30.4061104634,"[False, False, False, True, True, True, True, True, False]",0.0056733597
1021,114,0.7777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, False, True, True, True, True, True, False]",1.3600000000000001e-06
1022,114,0.7777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue'),69,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, True, True, True, True, True, False]",0.7143286541
1023,114,0.8888888889000001,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",5,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-14.7155995829,-7.6049034599,"[False, False, False, True, True, True, True, True, False]",0.0237634111
1024,114,0.8888888889000001,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",5,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-14.7155995829,-7.6049034599,"[False, False, False, True, True, True, True, True, False]",0.023832464
1025,114,0.7777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or (not shape == 'triangle')),69,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",5,7,"""lambda x: (x['color'] == 'blue' or (not x['shape'] == 'triangle'))""",-7.7674756594000005,-22.9727814537,-15.2053057944,"[False, False, False, True, True, True, True, True, False]",6.1243e-06
1026,115,0.4444444444,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),False,71,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return False",5,0,"""lambda x: False""",-1.3862943611,-39.392807159,-38.0065127979,"[False, False, False, True, True, True, False, True, True]",0.41029314710000003
1027,115,0.33333333330000003,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'red' or shape == 'square'),71,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, False, True, True, True, False, True, True]",3e-10
1028,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",0.32425628440000004
1029,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",0.7177937858
1030,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",1.3687000000000001e-06
1031,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",0.7182300662000001
1032,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",0.8371401145
1033,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square')""",-7.3620105513,-22.5673163456,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",0.0025659243
1034,115,0.7777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square' or shape == 'triangle'),71,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square' or shape == 'triangle')",5,7,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'square' or x['shape'] == 'triangle')""",-11.7928273501,-26.9981331445,-15.2053057944,"[False, False, False, True, True, True, False, True, True]",8.07e-08
1035,116,0.5555555556,(color == 'blue' or (color == 'green' and shape == 'triangle')),False,63,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, False, True, True, True, False, False, True]",0.4081990938
1036,116,0.6666666667000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'square'),63,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, True, True, False, False, True]",0.0024243416
1037,116,0.6666666667000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, True, True, False, False, True]",0.0025765786
1038,116,0.8888888889000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, True, False, False, True]",0.7152984649
1039,116,0.8888888889000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, True, False, False, True]",0.7164168828
1040,116,0.8888888889000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, True, False, False, True]",0.7167615114
1041,116,0.8888888889000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, True, False, False, True]",0.8355732057
1042,116,0.8888888889000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, True, False, False, True]",0.8356424991
1043,116,0.8888888889000001,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' or shape == 'triangle'),63,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'blue' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, False, True, True, True, False, False, True]",0.0031667628000000003
1044,117,0.5555555556,(not (color == 'red') and not (shape == 'triangle')),(False),52,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (False)",4,0,"""lambda x: (False)""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, False, True, True, False, True, True, False]",0.4081282584
1045,117,0.4444444444,(not (color == 'red') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, True, True, False, True, True, False]",3e-10
1046,117,0.6666666667000001,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, True, False, True, True, False]",0.0025731457
1047,117,0.6666666667000001,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, True, False, True, True, False]",0.0056781224
1048,117,0.6666666667000001,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, False, False, True, True, False, True, True, False]",0.7142478489
1049,117,0.6666666667000001,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, False, False, True, True, False, True, True, False]",0.1433361853
1050,117,0.7777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[False, False, False, True, True, False, True, True, False]",0.001393464
1051,117,0.7777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6,"""lambda x: (x['color'] == 'blue' or x['color'] == 'green')""",-7.110696123,-22.3160019174,-15.2053057944,"[False, False, False, True, True, False, True, True, False]",0.0013941507
1052,117,1.0,(not (color == 'red') and not (shape == 'triangle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),52,67,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')",4,4,"""lambda x: ((x['color'] == 'blue' or x['color'] == 'green') and not x['shape'] == 'triangle')""",-12.0159709014,-12.0204720268,-0.0045011254,"[False, False, False, True, True, False, True, True, False]",0.021916502900000003
1053,118,0.7777777778,(color == 'blue' and not (shape == 'triangle')),(color == shape),47,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == shape)",2,0,"""lambda x: (x['color'] == x['shape'])""",-0.6931471806,-15.8984529749,-15.2053057944,"[False, False, False, True, True, False, False, False, False]",0.45056844570000004
1054,118,0.4444444444,(color == 'blue' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, True, True, False, False, False, False]",2e-10
1055,118,0.8888888889000001,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, False, False, False, False]",0.16412761780000001
1056,118,0.8888888889000001,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, False, False, False, False]",0.7129712871
1057,118,0.8888888889000001,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, False, False, False, False]",0.7148462993
1058,118,0.8888888889000001,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, True, True, False, False, False, False]",0.0550500926
1059,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (not x['shape'] == 'triangle'))""",-7.0255383146,-7.03003944,-0.0045011254,"[False, False, False, True, True, False, False, False, False]",0.7236282458000001
1060,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (not x['shape'] == 'triangle'))""",-7.0255383146,-7.03003944,-0.0045011254,"[False, False, False, True, True, False, False, False, False]",0.7237171886
1061,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (shape == 'circle' or shape == 'square')),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'square'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'square'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, True, True, False, False, False, False]",0.0098464924
1062,119,0.5555555556,(not (color == 'red') and not (shape == 'square')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, False, True, False, True, True, False, True]",0.36040463510000004
1063,119,0.4444444444,(not (color == 'red') and not (shape == 'square')),(color == 'red' or shape == 'circle'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, True, False, True, True, False, True]",3e-10
1064,119,0.7777777778,(not (color == 'red') and not (shape == 'square')),(not color == 'red'),50,20,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (not color == 'red')",4,6,"""lambda x: (not x['color'] == 'red')""",-2.4849066498,-17.6902124442,-15.2053057944,"[False, False, False, True, False, True, True, False, True]",0.1390256269
1065,119,0.6666666667000001,(not (color == 'red') and not (shape == 'square')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, False, False, True, False, True, True, False, True]",0.5250122582
1066,119,0.6666666667000001,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and shape == 'circle'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, True, False, True, True, False, True]",0.5279514482000001
1067,119,0.7777777778,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, False, False, True, False, True, True, False, True]",0.0189126006
1068,119,0.7777777778,(not (color == 'red') and not (shape == 'square')),((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),50,87,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",4,2,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'circle') or (x['color'] == 'blue' and x['shape'] == 'triangle'))""",-15.2998018273,-30.5051076217,-15.2053057944,"[False, False, False, True, False, True, True, False, True]",3.342e-07
1069,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, False, False, True, False, True, True, False, True]",0.0004701753
1070,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, False, False, True, False, True, True, False, True]",0.00047055940000000003
1071,120,0.7777777778,(color == 'blue' and not (shape == 'square')),r == 'red' and shape == 'circle':,45,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",2,0,"""lambda x: r == 'red' and x['shape'] == 'circle':""",88888.88888,88888.88888,88888.88888,"[False, False, False, True, False, True, False, False, False]",0.0
1072,120,0.2222222222,(color == 'blue' and not (shape == 'square')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, False, False, True, False, True, False, False, False]",4e-10
1073,120,0.8888888889000001,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),45,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, True, False, True, False, False, False]",0.003804392
1074,120,0.8888888889000001,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, True, False, True, False, False, False]",0.0198433311
1075,120,0.8888888889000001,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, True, False, True, False, False, False]",0.5488080713
1076,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, True, False, True, False, False, False]",0.0222523344
1077,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, True, False, True, False, False, False]",0.046985202100000005
1078,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, True, False, True, False, False, False]",0.0469866907
1079,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, True, False, True, False, False, False]",0.047012777000000006
1080,121,0.8888888889000001,(shape == 'circle' and color == 'blue'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, True, False, False, False, False, False]",0.5616403861
1081,121,0.33333333330000003,(shape == 'circle' and color == 'blue'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, False, True, False, False, False, False, False]",4e-10
1082,121,0.7777777778,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),39,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, True, False, False, False, False, False]",0.0037999101
1083,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, True, False, False, False, False, False]",0.019766762
1084,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, True, False, False, False, False, False]",0.5458337269
1085,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, True, False, False, False, False, False]",0.6667473571
1086,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, True, False, False, False, False, False]",0.7440232916
1087,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, True, False, False, False, False, False]",0.7440266217
1088,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, True, False, False, False, False, False]",0.7440266522000001
1089,122,0.5555555556,(not (color == 'red') and not (shape == 'circle')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, False, False, True, True, False, True, True]",0.4083024176
1090,122,0.4444444444,(not (color == 'red') and not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, False, True, True, False, True, True]",3e-10
1091,122,0.6666666667000001,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, True, True, False, True, True]",0.0025778511
1092,122,0.6666666667000001,(not (color == 'red') and not (shape == 'circle')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-24.5974675981,-22.8057081289,"[False, False, False, False, True, True, False, True, True]",0.00029094390000000003
1093,122,0.6666666667000001,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, True, True, False, True, True]",0.5366672867
1094,122,0.7777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, False, False, False, True, True, False, True, True]",0.0199335845
1095,122,0.7777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",4,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-26.5281295152,-15.2053057944,"[False, False, False, False, True, True, False, True, True]",0.0206885996
1096,122,0.7777777778,(not (color == 'red') and not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),50,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",4,6,"""lambda x: (x['shape'] == 'square' or x['shape'] == 'triangle')""",-7.110696123,-22.3160019174,-15.2053057944,"[False, False, False, False, True, True, False, True, True]",7.492000000000001e-07
1097,122,1.0,(not (color == 'red') and not (shape == 'circle')),((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-15.838798328,-15.8432994534,-0.0045011254,"[False, False, False, False, True, True, False, True, True]",0.00048530670000000004
1098,123,0.6666666667000001,(color == 'blue' and not (shape == 'circle')),(color == 'red' and shape == 'circle'),45,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, True, True, False, False, False]",1.0905e-06
1099,123,0.4444444444,(color == 'blue' and not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, False, True, True, False, False, False]",3e-10
1100,123,0.7777777778,(color == 'blue' and not (shape == 'circle')),False,45,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, True, True, False, False, False]",0.48347392450000004
1101,123,0.8888888889000001,(color == 'blue' and not (shape == 'circle')),(color == 'blue'),45,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3,"""lambda x: (x['color'] == 'blue')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, False, True, True, False, False, False]",0.0002910756
1102,123,0.8888888889000001,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and shape == 'square'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, True, True, False, False, False]",0.5339892375
1103,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, True, True, False, False, False]",0.0194885879
1104,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, True, True, False, False, False]",0.0200075876
1105,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, True, True, False, False, False]",0.036138121
1106,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'blue' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, True, True, False, False, False]",0.0361535562
1107,124,0.7777777778,(not (color == 'red') and shape == 'square'),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, True, False, False, True, False]",0.5605258907
1108,124,0.6666666667000001,(not (color == 'red') and shape == 'square'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, False, False, True, False, False, True, False]",4e-10
1109,124,0.7777777778,(not (color == 'red') and shape == 'square'),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, True, False, False, True, False]",0.7113092578
1110,124,0.8888888889000001,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, True, False, False, True, False]",2.3304e-06
1111,124,0.8888888889000001,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, True, False, False, True, False]",0.5493475537
1112,124,0.8888888889000001,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, True, False, False, True, False]",0.6689356469000001
1113,124,0.8888888889000001,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, True, False, False, True, False]",0.6743123917
1114,124,1.0,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square'),44,83,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square')",2,2,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square') or (x['color'] == 'green' and x['shape'] == 'square')""",-14.8943367192,-14.8988378446,-0.0045011254,"[False, False, False, False, True, False, False, True, False]",0.001366556
1115,124,1.0,(not (color == 'red') and shape == 'square'),((color == 'green' or color == 'blue') and shape == 'square'),44,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and shape == 'square')",2,2,"""lambda x: ((x['color'] == 'green' or x['color'] == 'blue') and x['shape'] == 'square')""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, True, False, False, True, False]",0.048635281200000005
1116,125,0.7777777778,(shape == 'square' and color == 'blue'),(color == 'red' and shape == 'circle'),39,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'red' and x['shape'] == 'circle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, True, False, False, False, False]",1.5010000000000001e-06
1117,125,0.7777777778,(shape == 'square' and color == 'blue'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),39,92,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))",1,3,"""lambda x: ((x['color'] == 'green' and x['shape'] == 'circle') or ((not x['color'] == 'green') and x['shape'] == 'square'))""",-15.8106274511,-31.0159332455,-15.2053057944,"[False, False, False, False, True, False, False, False, False]",2e-10
1118,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, True, False, False, False, False]",0.0038047282000000003
1119,125,0.8888888889000001,(shape == 'square' and color == 'blue'),False,39,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, True, False, False, False, False]",0.8729928697
1120,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, True, False, False, False, False]",0.5485702173
1121,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, True, False, False, False, False]",0.665166212
1122,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, True, False, False, False, False]",0.6705081181
1123,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, True, False, False, False, False]",0.7536431683
1124,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, True, False, False, False, False]",0.7536431979
1125,126,0.5555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,0,"""lambda x: (x['color'] == 'red')""",-1.7917594692,-54.9990769361,-53.2073174669,"[False, False, False, False, False, True, True, True, True]",0.00018716540000000002
1126,126,0.2222222222,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-60.5693280181,-53.2073174669,"[False, False, False, False, False, True, True, True, True]",4e-10
1127,126,0.6666666667000001,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, True, True, True, True]",0.0038074866000000003
1128,126,0.5555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, False, False, False, True, True, True, True]",0.8726787619
1129,126,0.5555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0,"""lambda x: False""",-1.3862943611,-31.7924048245,-30.4061104634,"[False, False, False, False, False, True, True, True, True]",0.8728239663
1130,126,0.6666666667000001,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, True, True, True, True]",0.6825972457
1131,126,0.8888888889000001,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, False, False, False, True, True, True, True]",0.010880167500000001
1132,126,0.8888888889000001,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, False, False, False, True, True, True, True]",0.011251145
1133,126,0.8888888889000001,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'triangle')""",-7.3620105513,-14.9669140111,-7.6049034599,"[False, False, False, False, False, True, True, True, True]",0.0112513174
1134,127,0.8888888889000001,(shape == 'triangle' and color == 'blue'),False,41,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, True, False, False, False]",0.5600304180000001
1135,127,0.33333333330000003,(shape == 'triangle' and color == 'blue'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-52.9689256836,-45.6069151324,"[False, False, False, False, False, True, False, False, False]",4e-10
1136,127,0.8888888889000001,(shape == 'triangle' and color == 'blue'),False,41,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, True, False, False, False]",0.7105115533
1137,127,0.7777777778,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'circle'),41,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, True, False, False, False]",2.3256000000000002e-06
1138,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, True, False, False, False]",0.0046495545
1139,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, True, False, False, False]",0.6685331521
1140,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, True, False, False, False]",0.6739033852
1141,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, True, False, False, False]",0.6739060959000001
1142,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, True, False, False, False]",0.7545914541000001
1143,128,0.7777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, True, True, False]",0.4067407449
1144,128,0.4444444444,(color == 'green' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-45.3685233491,-38.0065127979,"[False, False, False, False, False, False, True, True, False]",3e-10
1145,128,0.6666666667000001,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, False, True, True, False]",0.0025610632
1146,128,0.6666666667000001,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),48,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, False, True, True, False]",1.4652e-06
1147,128,0.6666666667000001,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, False, True, True, False]",1.4697e-06
1148,128,0.7777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, True, True, False]",0.5508812211
1149,128,0.8888888889000001,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')",2,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, False, False, False, True, True, False]",0.8294203278000001
1150,128,0.8888888889000001,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')",2,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, False, False, False, True, True, False]",0.8314755420000001
1151,128,1.0,(color == 'green' and not (shape == 'triangle')),(color == 'green' and (not shape == 'triangle')),48,48,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green' and (not shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'green' and (not x['shape'] == 'triangle'))""",-7.0255383146,-7.03003944,-0.0045011254,"[False, False, False, False, False, False, True, True, False]",0.7404775457
1152,129,0.7777777778,(color == 'green' and not (shape == 'square')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, True, False, True]",0.4063493078
1153,129,0.6666666667000001,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),46,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, False, True, False, True]",0.0024121139
1154,129,0.6666666667000001,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, False, True, False, True]",0.0025592039000000002
1155,129,0.7777777778,(color == 'green' and not (shape == 'square')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, True, False, True]",0.5468911555
1156,129,0.6666666667000001,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-29.4257813354,-22.8057081289,"[False, False, False, False, False, False, True, False, True]",1.4635e-06
1157,129,0.7777777778,(color == 'green' and not (shape == 'square')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, True, False, True]",0.5501754059
1158,129,0.8888888889000001,(color == 'green' and not (shape == 'square')),(color == 'green'),46,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green')",2,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-9.3966629291,-7.6049034599,"[False, False, False, False, False, False, True, False, True]",0.8276105482
1159,129,0.8888888889000001,(color == 'green' and not (shape == 'square')),(color == 'green' and shape == 'circle'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",2,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'circle')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, False, True, False, True]",0.6510352475
1160,129,1.0,(color == 'green' and not (shape == 'square')),(color == 'green' and (shape == 'circle' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'circle' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'green' and (x['shape'] == 'circle' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, False, False, True, False, True]",0.0369913413
1161,130,0.8888888889000001,(color == 'green' and shape == 'circle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, True, False, False]",0.4066457933
1162,130,0.5555555556,(color == 'green' and shape == 'circle'),(color == 'red' or shape == 'circle'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'circle')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, False, False, False, False, False, True, False, False]",3e-10
1163,130,0.8888888889000001,(color == 'green' and shape == 'circle'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, True, False, False]",0.4802645263
1164,130,0.7777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'circle'),40,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, True, False, False]",1.4643000000000001e-06
1165,130,0.7777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, True, False, False]",1.4688e-06
1166,130,0.8888888889000001,(color == 'green' and shape == 'circle'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, True, False, False]",0.5505338145
1167,130,0.7777777778,(color == 'green' and shape == 'circle'),(color == 'green'),40,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green')",1,3,"""lambda x: (x['color'] == 'green')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, False, False, False, True, False, False]",0.8276526845000001
1168,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, False, True, False, False]",0.6524060272000001
1169,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'circle')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, False, True, False, False]",0.7580132359
1170,131,0.7777777778,(color == 'green' and not (shape == 'circle')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, False, True, True]",0.559906623
1171,131,0.6666666667000001,(color == 'green' and not (shape == 'circle')),(color == 'green' or shape == 'square'),46,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",2,5,"""lambda x: (x['color'] == 'green' or x['shape'] == 'square')""",-7.3620105513,-30.1677186801,-22.8057081289,"[False, False, False, False, False, False, False, True, True]",8.291e-07
1172,131,0.7777777778,(color == 'green' and not (shape == 'circle')),False,46,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, False, True, True]",0.7115947137
1173,131,0.7777777778,(color == 'green' and not (shape == 'circle')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, False, True, True]",0.8692309273000001
1174,131,0.8888888889000001,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, False, False, True, True]",0.0046384631
1175,131,0.7777777778,(color == 'green' and not (shape == 'circle')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, False, True, True]",0.8697601067
1176,131,0.7777777778,(color == 'green' and not (shape == 'circle')),False,46,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0,"""lambda x: False""",-1.3862943611,-16.5916001555,-15.2053057944,"[False, False, False, False, False, False, False, True, True]",0.9789130628
1177,131,0.8888888889000001,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",2,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-14.2249766664,-7.6049034599,"[False, False, False, False, False, False, False, True, True]",0.6759829233
1178,131,1.0,(color == 'green' and not (shape == 'circle')),(color == 'green' and (shape == 'square' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'square' or shape == 'triangle'))",2,2,"""lambda x: (x['color'] == 'green' and (x['shape'] == 'square' or x['shape'] == 'triangle'))""",-11.3228237209,-11.3273248462,-0.0045011254,"[False, False, False, False, False, False, False, True, True]",0.0496985463
1179,132,0.8888888889000001,(color == 'green' and shape == 'square'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, True, False]",0.5587489508
1180,132,0.5555555556,(color == 'green' and shape == 'square'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5,"""lambda x: (x['color'] == 'red' or x['shape'] == 'square')""",-7.3620105513,-37.7681210146,-30.4061104634,"[False, False, False, False, False, False, False, True, False]",4e-10
1181,132,0.8888888889000001,(color == 'green' and shape == 'square'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, True, False]",0.708450166
1182,132,0.8888888889000001,(color == 'green' and shape == 'square'),False,40,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, True, False]",0.8660401705
1183,132,0.7777777778,(color == 'green' and shape == 'square'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, False, True, False]",2.3217e-06
1184,132,0.8888888889000001,(color == 'green' and shape == 'square'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, True, False]",0.8702501072000001
1185,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, False, False, True, False]",0.0052239716
1186,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, False, False, True, False]",0.6792629433
1187,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'green' and x['shape'] == 'square')""",-6.6200732065,-6.6245743319,-0.0045011254,"[False, False, False, False, False, False, False, True, False]",0.7579669782
1188,133,0.8888888889000001,(shape == 'triangle' and color == 'green'),False,42,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, False, True]",0.4065200531
1189,133,0.7777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'triangle'),42,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'triangle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, False, False, True]",0.0024145792
1190,133,0.8888888889000001,(shape == 'triangle' and color == 'green'),False,42,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, False, True]",0.7059086092
1191,133,0.7777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'circle'),42,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'circle')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, False, False, True]",2.31e-06
1192,133,0.7777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'square'),42,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1,"""lambda x: (x['color'] == 'blue' and x['shape'] == 'square')""",-6.6200732065,-21.8253790009,-15.2053057944,"[False, False, False, False, False, False, False, False, True]",2.3210000000000003e-06
1193,133,0.8888888889000001,(shape == 'triangle' and color == 'green'),False,42,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, False, True]",0.8743131015000001
1194,133,0.8888888889000001,(shape == 'triangle' and color == 'green'),False,42,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, False, True]",0.9852384316
1195,133,0.8888888889000001,(shape == 'triangle' and color == 'green'),False,42,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0,"""lambda x: False""",-1.3862943611,-8.991197821,-7.6049034599,"[False, False, False, False, False, False, False, False, True]",0.9853009964
1196,133,0.7777777778,(shape == 'triangle' and color == 'green'),(shape == 'triangle'),42,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')",1,3,"""lambda x: (x['shape'] == 'triangle')""",-1.7917594692,-16.9970652636,-15.2053057944,"[False, False, False, False, False, False, False, False, True]",9.7958e-05
