,Problem_num,accuracy,tr_code_concat,gen_code_concat,true_code_size,gen_code_size,num_stims_seen,stims_seen,passed_tests,failed_tests,tr_code_full,gen_code_full,tr_domain,gen_domain
0,1,0.5555555555555556,True,(color == 'red' or shape == 'circle'),4,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",9,5
1,1,0.5555555555555556,True,(color == 'red' or shape == 'square'),4,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: True""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",9,5
2,1,1.0,True,True,4,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
3,1,1.0,True,True,4,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
4,1,1.0,True,True,4,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
5,1,1.0,True,True,4,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
6,1,1.0,True,True,4,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
7,1,1.0,True,True,4,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
8,1,1.0,True,True,4,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: True""","def categorize(color, shape):
	return True",9,9
9,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
10,2,0.6666666666666666,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
11,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
12,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6
13,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(color == 'red' or color == 'blue'),53,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6
14,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
15,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
16,2,0.8888888888888888,(not (shape == 'triangle') or not (color == 'green')),True,53,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
17,2,0.7777777777777778,(not (shape == 'triangle') or not (color == 'green')),(not shape == 'triangle'),53,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not shape == 'triangle')",8,6
18,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
19,3,0.6666666666666666,(not (shape == 'circle') or not (color == 'green')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
20,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
21,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
22,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
23,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return True",8,9
24,3,0.7777777777777778,(not (shape == 'circle') or not (color == 'green')),(not color == 'green'),51,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",8,6
25,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),(color != 'green' or shape == 'square'),51,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return (color != 'green' or shape == 'square')",8,7
26,3,0.8888888888888888,(not (shape == 'circle') or not (color == 'green')),((color == 'green' and shape == 'square') or (not color == 'green')),51,68,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'square') or (not color == 'green'))",8,7
27,4,0.6666666666666666,not (color == 'green'),True,22,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9
28,4,0.6666666666666666,not (color == 'green'),(color == 'red' or shape == 'square'),22,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
29,4,0.6666666666666666,not (color == 'green'),True,22,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9
30,4,0.6666666666666666,not (color == 'green'),True,22,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9
31,4,1.0,not (color == 'green'),(color == 'red' or color == 'blue'),22,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
32,4,0.6666666666666666,not (color == 'green'),True,22,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return True",6,9
33,4,1.0,not (color == 'green'),(not color == 'green'),22,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6
34,4,1.0,not (color == 'green'),(not color == 'green'),22,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6
35,4,1.0,not (color == 'green'),(not color == 'green'),22,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['color']=='green')""","def categorize(color, shape):
	return (not color == 'green')",6,6
36,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True",8,9
37,5,0.6666666666666666,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'square'),74,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
38,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(True),74,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (True)",8,9
39,5,0.6666666666666666,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or shape == 'circle'),74,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5
40,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),True,74,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return True",8,9
41,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),not (color == 'blue' and shape == 'triangle'),74,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return not (color == 'blue' and shape == 'triangle')",8,8
42,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9
43,5,0.8888888888888888,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),74,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9
44,5,1.0,(not (color == 'blue') or (color == 'green' or not (shape == 'triangle'))),((not color == 'blue') or (not shape == 'triangle')),74,52,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or (x['color']=='green' or not (x['shape']=='triangle')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'triangle'))",8,8
45,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),True,50,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",8,9
46,6,0.4444444444444444,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
47,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",8,9
48,6,0.6666666666666666,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle'),50,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5
49,6,0.8888888888888888,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or shape == 'circle' or shape == 'triangle'),50,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')",8,7
50,6,0.6666666666666666,(not (shape == 'square') or not (color == 'blue')),(color == 'red' or color == 'blue' or shape == 'triangle'),50,58,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')",8,7
51,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",8,8
52,6,1.0,(not (shape == 'square') or not (color == 'blue')),((not color == 'blue') or (not shape == 'square')),50,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",8,8
53,6,1.0,(not (shape == 'square') or not (color == 'blue')),(not (color == 'blue' and shape == 'square')),50,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or not (x['color']=='blue'))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",8,8
54,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9
55,7,0.5555555555555556,(not (color == 'blue') or shape == 'circle'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,3
56,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9
57,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
58,7,0.8888888888888888,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",7,8
59,7,0.7777777777777778,(not (color == 'blue') or shape == 'circle'),(color == 'red' or shape == 'circle'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
60,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",7,7
61,7,1.0,(not (color == 'blue') or shape == 'circle'),(color == 'red' or color == 'green' or shape == 'circle'),44,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",7,7
62,7,0.8888888888888888,(not (color == 'blue') or shape == 'circle'),(not (color == 'blue' and shape == 'square')),44,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",7,8
63,8,0.4444444444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'circle'),50,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5
64,8,0.6666666666666666,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
65,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),True,50,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",8,9
66,8,0.4444444444444444,(not (color == 'blue') or not (shape == 'circle')),(color == 'red'),50,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",8,3
67,8,0.6666666666666666,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
68,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7
69,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7
70,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'green' or color == 'red' or shape == 'square'),50,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or color == 'red' or shape == 'square')",8,7
71,8,0.8888888888888888,(not (color == 'blue') or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),50,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7
72,9,0.5555555555555556,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
73,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
74,9,0.7777777777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3
75,9,0.7777777777777778,(shape == 'square' or color == 'red'),(color == 'red'),37,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3
76,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
77,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
78,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
79,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
80,9,1.0,(shape == 'square' or color == 'red'),(color == 'red' or shape == 'square'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
81,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),True,46,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return True",7,9
82,10,0.5555555555555556,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
83,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(True),46,6,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (True)",7,9
84,10,0.8888888888888888,(not (color == 'blue') or shape == 'triangle'),(not color == 'blue'),46,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (not color == 'blue')",7,6
85,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
86,10,0.7777777777777778,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or shape == 'triangle'),46,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
87,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7
88,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7
89,10,1.0,(not (color == 'blue') or shape == 'triangle'),(color == 'red' or color == 'green' or shape == 'triangle'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='blue') or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'triangle')",7,7
90,11,0.6666666666666666,not (color == 'blue'),(color == 'red' or shape == 'circle'),21,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
91,11,0.6666666666666666,not (color == 'blue'),(color == 'red' or shape == 'square'),21,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
92,11,0.6666666666666666,not (color == 'blue'),True,21,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return True",6,9
93,11,0.6666666666666666,not (color == 'blue'),(color == 'red'),21,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')",6,3
94,11,1.0,not (color == 'blue'),(not color == 'blue'),21,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (not color == 'blue')",6,6
95,11,0.6666666666666666,not (color == 'blue'),(color == 'red'),21,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red')",6,3
96,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6
97,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6
98,11,1.0,not (color == 'blue'),(color == 'red' or color == 'green'),21,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",6,6
99,12,1.0,color == 'red',(color == 'red'),14,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
100,12,0.7777777777777778,color == 'red',(color == 'red' or shape == 'square'),14,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5
101,12,1.0,color == 'red',(color == 'red'),14,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
102,12,1.0,color == 'red',(color == 'red'),14,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
103,12,1.0,color == 'red',(color == 'red'),14,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
104,12,1.0,color == 'red',(color == 'red'),14,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
105,12,1.0,color == 'red',(color == 'red'),14,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
106,12,1.0,color == 'red',(color == 'red'),14,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
107,12,1.0,color == 'red',(color == 'red'),14,16,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='red'""","def categorize(color, shape):
	return (color == 'red')",3,3
108,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True",8,9
109,13,0.4444444444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
110,13,0.4444444444444444,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or shape == 'square'),51,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
111,13,0.6666666666666666,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),51,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",8,7
112,13,0.5555555555555556,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue'),51,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",8,6
113,13,0.6666666666666666,(not (shape == 'triangle') or not (color == 'red')),(color == 'blue' or color == 'red' or shape == 'circle'),51,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",8,7
114,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),51,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",8,9
115,13,0.8888888888888888,(not (shape == 'triangle') or not (color == 'red')),True,51,4,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return True",8,9
116,13,1.0,(not (shape == 'triangle') or not (color == 'red')),(not (color == 'red' and shape == 'triangle')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='triangle') or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'triangle'))",8,8
117,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'circle'),46,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
118,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
119,14,0.5555555555555556,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),46,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
120,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),46,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",7,7
121,14,0.6666666666666666,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue'),46,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
122,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'blue' or color == 'red' or shape == 'circle'),46,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",7,7
123,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),True,46,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True",7,9
124,14,0.7777777777777778,(color == 'blue' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),46,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9
125,14,0.8888888888888888,(color == 'blue' or not (shape == 'triangle')),(not shape == 'triangle'),46,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
126,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'circle'),25,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
127,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
128,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or shape == 'square'),25,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
129,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7
130,15,0.7777777777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4
131,15,0.7777777777777778,not (shape == 'triangle'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),25,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4
132,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or color == 'green'),25,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9
133,15,0.6666666666666666,not (shape == 'triangle'),(color == 'red' or color == 'blue' or shape == 'circle'),25,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7
134,15,1.0,not (shape == 'triangle'),(not shape == 'triangle'),25,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: not (x['shape']=='triangle')""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6
135,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),True,44,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",7,9
136,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'circle'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
137,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
138,16,0.5555555555555556,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
139,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')",7,7
140,16,0.7777777777777778,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",7,5
141,16,0.8888888888888888,(color == 'blue' or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),44,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",7,6
142,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",7,7
143,16,1.0,(color == 'blue' or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),44,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",7,7
144,17,0.6666666666666666,not (shape == 'square'),r == 'red' and shape == 'circle':,23,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5
145,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'circle'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
146,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
147,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
148,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or shape == 'triangle'),23,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
149,17,0.7777777777777778,not (shape == 'square'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),23,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",6,4
150,17,0.6666666666666666,not (shape == 'square'),(color == 'red' or color == 'blue' or shape == 'circle'),23,56,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7
151,17,1.0,not (shape == 'square'),(shape == 'circle' or shape == 'triangle'),23,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return (shape == 'circle' or shape == 'triangle')",6,6
152,17,1.0,not (shape == 'square'),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle')),23,104,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'triangle'))",6,6
153,18,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
154,18,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or shape == 'circle'),92,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
155,18,0.2222222222222222,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red'),92,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3
156,18,0.5555555555555556,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue'),92,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
157,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4
158,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'blue' or (color == 'red' and shape == 'circle')),92,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4
159,18,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(color == 'red' or color == 'blue' or color == 'green'),92,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9
160,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),(not shape == 'triangle'),92,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6
161,18,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (not (shape == 'triangle') and color == 'green'))),((color == 'red' and shape == 'circle') or (color == 'blue')),92,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (not (x['shape']=='triangle') and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))",6,4
162,19,0.5555555555555556,(color == 'green' or shape == 'circle'),True,39,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return True",5,9
163,19,0.5555555555555556,(color == 'green' or shape == 'circle'),(color == 'red' and shape == 'circle'),39,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",5,1
164,19,0.3333333333333333,(color == 'green' or shape == 'circle'),(color == 'red'),39,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",5,3
165,19,0.6666666666666666,(color == 'green' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),39,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",5,2
166,19,0.2222222222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6
167,19,0.2222222222222222,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue'),39,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6
168,19,0.5555555555555556,(color == 'green' or shape == 'circle'),(color == 'red' or color == 'blue' or color == 'green'),39,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",5,9
169,19,1.0,(color == 'green' or shape == 'circle'),(color == 'green' or shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')",5,5
170,19,0.7777777777777778,(color == 'green' or shape == 'circle'),(color == 'green' or (not shape == 'square')),39,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",5,7
171,20,0.7777777777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",3,5
172,20,0.7777777777777778,shape == 'circle',(color == 'red' or shape == 'circle'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",3,5
173,20,0.5555555555555556,shape == 'circle',(color == 'red'),17,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red')",3,3
174,20,0.8888888888888888,shape == 'circle',(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),17,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",3,2
175,20,0.4444444444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",3,6
176,20,0.4444444444444444,shape == 'circle',(color == 'red' or color == 'blue'),17,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",3,6
177,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9
178,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9
179,20,0.3333333333333333,shape == 'circle',(color == 'red' or color == 'blue' or color == 'green'),17,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: x['shape']=='circle'""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",3,9
180,21,0.1111111111111111,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),False,78,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return False",8,0
181,21,0.4444444444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square'),78,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",8,5
182,21,0.4444444444444444,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),78,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5
183,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7
184,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7
185,21,0.6666666666666666,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),78,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",8,7
186,21,0.7777777777777778,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),78,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",8,6
187,21,0.8888888888888888,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),78,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",8,7
188,21,0.8888888888888888,(not (shape == 'circle') or (not (color == 'red') or not (shape == 'circle'))),True,78,4,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or (not (x['color']=='red') or not (x['shape']=='circle')))""","def categorize(color, shape):
	return True",8,9
189,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
190,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
191,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
192,22,0.5555555555555556,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),44,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",7,3
193,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
194,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),(color == 'red' or shape == 'square' or shape == 'triangle'),44,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
195,22,0.7777777777777778,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),44,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",7,5
196,22,0.8888888888888888,(not (shape == 'circle') or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),44,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",7,6
197,22,0.8888888888888888,(not (shape == 'circle') or color == 'blue'),(color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle'),44,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (not (x['shape']=='circle') or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square' or shape == 'triangle')",7,8
198,23,0.3333333333333333,not (shape == 'circle'),False,23,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return False",6,0
199,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
200,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
201,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'triangle'),23,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
202,23,0.6666666666666666,not (shape == 'circle'),(color == 'red' or shape == 'square'),23,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
203,23,0.8888888888888888,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
204,23,0.8888888888888888,not (shape == 'circle'),(color == 'red' or shape == 'square' or shape == 'triangle'),23,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
205,23,0.7777777777777778,not (shape == 'circle'),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),23,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",6,4
206,23,1.0,not (shape == 'circle'),(shape == 'square' or shape == 'triangle'),23,42,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['shape']=='circle')""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",6,6
207,24,0.5555555555555556,(not (shape == 'circle') and not (color == 'blue')),False,51,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0
208,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'square'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
209,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
210,24,0.6666666666666666,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
211,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2
212,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2
213,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2
214,24,0.7777777777777778,(not (shape == 'circle') and not (color == 'blue')),(color == 'red' and (shape == 'square' or shape == 'triangle')),51,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2
215,24,1.0,(not (shape == 'circle') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='circle') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))",4,4
216,25,0.6666666666666666,shape == 'square',False,17,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return False",3,0
217,25,0.7777777777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5
218,25,0.7777777777777778,shape == 'square',(color == 'red' and shape == 'square'),17,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",3,1
219,25,0.7777777777777778,shape == 'square',(color == 'red' or shape == 'square'),17,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5
220,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2
221,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2
222,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2
223,25,0.8888888888888888,shape == 'square',((color == 'red' or color == 'blue') and shape == 'square'),17,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",3,2
224,25,1.0,shape == 'square',((color == 'red' or color == 'blue' or color == 'green') and shape == 'square'),17,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['shape']=='square'""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and shape == 'square')",3,3
225,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
226,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
227,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' and shape == 'triangle'),45,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",7,1
228,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5
229,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5
230,26,0.7777777777777778,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or shape == 'triangle'),45,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",7,5
231,26,1.0,(shape == 'triangle' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'triangle'),45,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",7,7
232,26,0.8888888888888888,(shape == 'triangle' or not (color == 'red')),(not color == 'red'),45,20,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not color == 'red')",7,6
233,26,0.3333333333333333,(shape == 'triangle' or not (color == 'red')),(color == 'red' or shape == 'triangle'),45,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
234,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),True,41,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return True",5,9
235,27,0.3333333333333333,(shape == 'triangle' or color == 'green'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
236,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1
237,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1
238,27,0.5555555555555556,(shape == 'triangle' or color == 'green'),(color == 'red' and shape == 'triangle'),41,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1
239,27,0.7777777777777778,(shape == 'triangle' or color == 'green'),(shape == 'triangle'),41,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')",5,3
240,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5
241,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5
242,27,1.0,(shape == 'triangle' or color == 'green'),(color == 'green' or shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",5,5
243,28,0.6666666666666666,shape == 'triangle',False,19,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return False",3,0
244,28,0.7777777777777778,shape == 'triangle',(color == 'blue' and shape == 'triangle'),19,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",3,1
245,28,0.7777777777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",3,1
246,28,0.7777777777777778,shape == 'triangle',(color == 'red' and shape == 'triangle'),19,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",3,1
247,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3
248,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3
249,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3
250,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3
251,28,1.0,shape == 'triangle',(shape == 'triangle'),19,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['shape']=='triangle'""","def categorize(color, shape):
	return (shape == 'triangle')",3,3
252,29,0.7777777777777778,(shape == 'triangle' and not (color == 'green')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return False",2,0
253,29,0.4444444444444444,(shape == 'triangle' and not (color == 'green')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
254,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
255,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
256,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(color == 'red' and shape == 'triangle'),48,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
257,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2
258,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2
259,29,0.8888888888888888,(shape == 'triangle' and not (color == 'green')),(shape == 'triangle'),48,21,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return (shape == 'triangle')",2,3
260,29,1.0,(shape == 'triangle' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'triangle'),48,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",2,2
261,30,0.4444444444444444,not (color == 'red'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),20,92,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))",6,3
262,30,0.6666666666666666,not (color == 'red'),(color == 'green' or shape == 'square'),20,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",6,5
263,30,0.4444444444444444,not (color == 'red'),(color == 'blue' and shape == 'square'),20,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",6,1
264,30,0.4444444444444444,not (color == 'red'),(color == 'blue' and shape == 'circle'),20,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",6,1
265,30,0.6666666666666666,not (color == 'red'),(color == 'blue' or shape == 'square'),20,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5
266,30,0.6666666666666666,not (color == 'red'),(color == 'blue'),20,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue')",6,3
267,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6
268,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6
269,30,1.0,not (color == 'red'),(color == 'blue' or color == 'green'),20,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: not (x['color']=='red')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",6,6
270,31,1.0,color == 'blue',(color == 'blue'),15,17,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
271,31,0.3333333333333333,color == 'blue',(color == 'red' or shape == 'square'),15,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5
272,31,1.0,color == 'blue',(color == 'blue'),15,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
273,31,1.0,color == 'blue',(color == 'blue'),15,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
274,31,1.0,color == 'blue',(color == 'blue'),15,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
275,31,1.0,color == 'blue',(color == 'blue'),15,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
276,31,1.0,color == 'blue',(color == 'blue'),15,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
277,31,1.0,color == 'blue',(color == 'blue'),15,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
278,31,1.0,color == 'blue',(color == 'blue'),15,17,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: x['color']=='blue'""","def categorize(color, shape):
	return (color == 'blue')",3,3
279,32,0.4444444444444444,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'circle'),61,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
280,32,0.2222222222222222,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
281,32,0.8888888888888888,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'green'),61,18,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green')",4,3
282,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1
283,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1
284,32,0.6666666666666666,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' and shape == 'circle'),61,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1
285,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6
286,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),61,67,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')",4,4
287,32,0.7777777777777778,(color == 'green' or (color == 'blue' and shape == 'circle')),(color == 'blue' or color == 'green'),61,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6
288,33,0.7777777777777778,(shape == 'circle' and not (color == 'red')),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0
289,33,0.6666666666666666,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),44,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
290,33,0.7777777777777778,(shape == 'circle' and not (color == 'red')),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0
291,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
292,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
293,33,0.8888888888888888,(shape == 'circle' and not (color == 'red')),(color == 'blue' and shape == 'circle'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
294,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6
295,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6
296,33,0.5555555555555556,(shape == 'circle' and not (color == 'red')),(color == 'blue' or color == 'green'),44,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",2,6
297,34,0.7777777777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0
298,34,0.2222222222222222,(shape == 'triangle' and not (color == 'red')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
299,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
300,34,0.7777777777777778,(shape == 'triangle' and not (color == 'red')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return False",2,0
301,34,0.6666666666666666,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
302,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
303,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
304,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(color == 'blue' and shape == 'triangle'),46,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
305,34,0.8888888888888888,(shape == 'triangle' and not (color == 'red')),(shape == 'triangle'),46,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'triangle')",2,3
306,35,0.6666666666666666,color == 'green',False,16,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0
307,35,0.3333333333333333,color == 'green',(color == 'red' or shape == 'square'),16,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",3,5
308,35,0.5555555555555556,color == 'green',(color == 'blue' and shape == 'square'),16,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",3,1
309,35,0.6666666666666666,color == 'green',False,16,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0
310,35,0.7777777777777778,color == 'green',(color == 'green' and shape == 'square'),16,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",3,1
311,35,0.6666666666666666,color == 'green',False,16,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: x['color']=='green'""","def categorize(color, shape):
	return False",3,0
312,35,1.0,color == 'green',(color == 'green'),16,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3
313,35,1.0,color == 'green',(color == 'green'),16,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3
314,35,1.0,color == 'green',(color == 'green'),16,18,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: x['color']=='green'""","def categorize(color, shape):
	return (color == 'green')",3,3
315,36,1.0,False,False,5,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0
316,36,0.4444444444444444,False,(color == 'red' or shape == 'square'),5,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",0,5
317,36,1.0,False,False,5,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0
318,36,0.8888888888888888,False,(color == 'blue' and shape == 'square'),5,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",0,1
319,36,0.8888888888888888,False,(color == 'blue' and shape == 'square'),5,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: False""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",0,1
320,36,1.0,False,False,5,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0
321,36,1.0,False,False,5,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0
322,36,1.0,False,False,5,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0
323,36,1.0,False,False,5,5,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: False""","def categorize(color, shape):
	return False",0,0
324,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
325,37,0.6666666666666666,(not (color == 'green') or not (shape == 'square')),(color == 'red' or shape == 'circle'),51,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",8,5
326,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
327,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
328,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
329,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
330,37,0.8888888888888888,(not (color == 'green') or not (shape == 'square')),True,51,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
331,37,1.0,(not (color == 'green') or not (shape == 'square')),not (color == 'green' and shape == 'square'),51,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return not (color == 'green' and shape == 'square')",8,8
332,37,1.0,(not (color == 'green') or not (shape == 'square')),(not (color == 'green' and shape == 'square')),51,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='green') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",8,8
333,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,5
334,38,0.5555555555555556,(not (color == 'green') or shape == 'circle'),(color == 'red'),45,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",7,3
335,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9
336,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
337,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
338,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9
339,38,0.7777777777777778,(not (color == 'green') or shape == 'circle'),True,45,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return True",7,9
340,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8
341,38,0.8888888888888888,(not (color == 'green') or shape == 'circle'),(not (color == 'green' and shape == 'square')),45,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') or x['shape']=='circle')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8
342,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9
343,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
344,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9
345,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
346,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue'),45,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
347,39,0.7777777777777778,(shape == 'square' or not (color == 'green')),True,45,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9
348,39,0.8888888888888888,(shape == 'square' or not (color == 'green')),(not color == 'green'),45,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6
349,39,1.0,(shape == 'square' or not (color == 'green')),((not color == 'green') or (shape == 'square')),45,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return ((not color == 'green') or (shape == 'square'))",7,7
350,39,1.0,(shape == 'square' or not (color == 'green')),(color == 'red' or color == 'blue' or shape == 'square'),45,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",7,7
351,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9
352,40,0.5555555555555556,(shape == 'triangle' or not (color == 'green')),(color == 'red'),47,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",7,3
353,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9
354,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
355,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(color == 'red' or color == 'blue'),47,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
356,40,0.7777777777777778,(shape == 'triangle' or not (color == 'green')),True,47,4,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return True",7,9
357,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6
358,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6
359,40,0.8888888888888888,(shape == 'triangle' or not (color == 'green')),(not color == 'green'),47,22,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or not (x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'green')",7,6
360,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9
361,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
362,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9
363,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),True,45,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9
364,41,0.7777777777777778,(not (shape == 'triangle') or color == 'red'),(color == 'red' or shape == 'circle'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
365,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
366,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
367,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
368,41,0.8888888888888888,(not (shape == 'triangle') or color == 'red'),(not shape == 'triangle'),45,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (not (x['shape']=='triangle') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
369,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),r == 'red' and shape == 'circle':,82,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5
370,42,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
371,42,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9
372,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
373,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
374,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6
375,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6
376,42,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(not shape == 'triangle'),82,25,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6
377,42,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'square' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7
378,43,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
379,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
380,43,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),True,82,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9
381,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
382,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
383,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(not shape == 'triangle'),82,25,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'triangle')",6,6
384,43,0.7777777777777778,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square'),82,77,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle' or shape == 'square')",6,8
385,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7
386,43,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'circle' and color == 'blue'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7
387,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
388,44,0.5555555555555556,(not (shape == 'square') or color == 'red'),(color == 'red'),43,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",7,3
389,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9
390,44,0.7777777777777778,(not (shape == 'square') or color == 'red'),True,43,4,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return True",7,9
391,44,1.0,(not (shape == 'square') or color == 'red'),(color == 'red' or (not shape == 'square')),43,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))",7,7
392,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),((not color == 'blue') or (not shape == 'square')),43,50,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",7,8
393,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')",7,6
394,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not (color == 'green' and shape == 'square')),43,46,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not (color == 'green' and shape == 'square'))",7,8
395,44,0.8888888888888888,(not (shape == 'square') or color == 'red'),(not shape == 'square'),43,23,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='red')""","def categorize(color, shape):
	return (not shape == 'square')",7,6
396,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),r == 'red' and shape == 'circle':,84,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",6,5
397,45,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3
398,45,0.6666666666666666,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9
399,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
400,45,0.8888888888888888,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(color == 'red' or (not shape == 'square')),84,43,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'square'))",6,7
401,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not (color == 'blue' and shape == 'square')),84,45,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not (color == 'blue' and shape == 'square'))",6,8
402,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8
403,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),(not shape == 'square'),84,23,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return (not shape == 'square')",6,6
404,45,0.7777777777777778,(color == 'red' or (shape == 'circle' or (shape == 'triangle' and color == 'blue'))),((not color == 'blue') or (not shape == 'square')),84,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['shape']=='triangle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8
405,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
406,46,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red'),83,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3
407,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
408,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
409,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
410,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or shape == 'circle'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
411,46,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9
412,46,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),(color == 'red' or color == 'green' or shape == 'circle'),83,57,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'circle')",6,7
413,46,0.7777777777777778,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'square'))),((not color == 'blue') or (not shape == 'square')),83,50,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square')))""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",6,8
414,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
415,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red')",6,3
416,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9
417,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
418,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
419,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
420,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),True,85,4,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9
421,47,0.6666666666666666,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or color == 'blue' or color == 'green'),85,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9
422,47,0.8888888888888888,(color == 'red' or (shape == 'circle' or (color == 'green' and shape == 'triangle'))),(color == 'red' or shape == 'circle' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'triangle')",6,7
423,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
424,48,0.7777777777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3
425,48,0.7777777777777778,(shape == 'circle' or color == 'red'),(color == 'red'),37,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3
426,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
427,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
428,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
429,48,0.5555555555555556,(shape == 'circle' or color == 'red'),(color == 'red' or color == 'blue' or color == 'green'),37,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",5,9
430,48,0.6666666666666666,(shape == 'circle' or color == 'red'),((not color == 'blue') or (not shape == 'square')),37,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return ((not color == 'blue') or (not shape == 'square'))",5,8
431,48,1.0,(shape == 'circle' or color == 'red'),(color == 'red' or shape == 'circle'),37,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
432,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),True,43,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",7,9
433,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
434,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),True,43,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return True",7,9
435,49,0.5555555555555556,(color == 'red' or not (shape == 'circle')),(color == 'red'),43,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",7,3
436,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
437,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
438,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
439,49,0.7777777777777778,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square'),43,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
440,49,1.0,(color == 'red' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),43,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='red' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
441,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9
442,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3
443,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),True,84,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return True",6,9
444,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red'),84,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red')",6,3
445,50,0.6666666666666666,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square'),84,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
446,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
447,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
448,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
449,50,0.8888888888888888,(shape == 'triangle' or (color == 'red' or (shape == 'square' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='red' or (x['shape']=='square' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
450,51,0.5555555555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",7,3
451,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
452,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),True,44,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return True",7,9
453,51,0.5555555555555556,(shape == 'square' or not (color == 'blue')),(color == 'red'),44,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",7,3
454,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
455,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or shape == 'square'),44,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
456,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",7,7
457,51,0.7777777777777778,(shape == 'square' or not (color == 'blue')),(color == 'red' or (not shape == 'triangle')),44,45,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))",7,7
458,51,1.0,(shape == 'square' or not (color == 'blue')),(color == 'red' or color == 'green' or shape == 'square'),44,57,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",7,7
459,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),83,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
460,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
461,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),True,83,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return True",6,9
462,52,0.6666666666666666,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red'),83,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red')",6,3
463,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
464,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
465,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or color == 'green' or shape == 'square'),83,57,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'green' or shape == 'square')",6,7
466,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),83,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
467,52,0.8888888888888888,(shape == 'square' or (color == 'red' or (color == 'green' and shape == 'circle'))),(color == 'red' or (not shape == 'triangle')),83,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or (not shape == 'triangle'))",6,7
468,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9
469,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
470,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9
471,53,0.6666666666666666,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3
472,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
473,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
474,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
475,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),85,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
476,53,0.8888888888888888,(shape == 'square' or (color == 'red' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square' or shape == 'triangle'),85,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
477,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",4,3
478,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
479,54,0.6666666666666666,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'circle'),59,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
480,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red'),59,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",4,3
481,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
482,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
483,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
484,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
485,54,0.8888888888888888,(color == 'red' or (color == 'blue' and shape == 'square')),(color == 'red' or shape == 'square'),59,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='blue' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
486,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9
487,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3
488,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),True,85,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return True",6,9
489,55,0.6666666666666666,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red'),85,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red')",6,3
490,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
491,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
492,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
493,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
494,55,0.8888888888888888,(color == 'red' or (shape == 'triangle' or (shape == 'square' and color == 'green'))),(color == 'red' or shape == 'triangle'),85,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
495,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'circle'),39,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
496,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
497,56,0.5555555555555556,(shape == 'triangle' or color == 'red'),True,39,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return True",5,9
498,56,0.7777777777777778,(shape == 'triangle' or color == 'red'),(color == 'red'),39,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",5,3
499,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
500,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
501,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
502,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
503,56,1.0,(shape == 'triangle' or color == 'red'),(color == 'red' or shape == 'triangle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
504,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
505,57,0.6666666666666666,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'square'),60,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
506,57,0.4444444444444444,(color == 'red' or (color == 'green' and shape == 'circle')),True,60,4,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return True",4,9
507,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
508,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
509,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
510,57,0.7777777777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6
511,57,0.7777777777777778,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or color == 'green'),60,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6
512,57,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'circle')),(color == 'red' or shape == 'circle'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
513,58,0.5555555555555556,(color == 'red' or (not (shape == 'circle') and color == 'green')),True,66,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return True",5,9
514,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3
515,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3
516,58,0.8888888888888888,(color == 'red' or (not (shape == 'circle') and color == 'green')),(not color == 'blue'),66,21,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (not color == 'blue')",5,6
517,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'triangle'),66,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
518,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3
519,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red'),66,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",5,3
520,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square'),66,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
521,58,0.7777777777777778,(color == 'red' or (not (shape == 'circle') and color == 'green')),(color == 'red' or shape == 'square' or shape == 'triangle'),66,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (not (x['shape']=='circle') and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",5,7
522,59,0.6666666666666666,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'circle'),60,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
523,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
524,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
525,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
526,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
527,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
528,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red'),60,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
529,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
530,59,0.8888888888888888,(color == 'red' or (shape == 'square' and color == 'green')),(color == 'red' or shape == 'square'),60,37,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='red' or (x['shape']=='square' and x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
531,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
532,60,0.6666666666666666,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),62,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
533,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
534,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
535,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
536,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
537,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
538,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red'),62,16,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
539,60,0.8888888888888888,(color == 'red' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),62,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='red' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
540,61,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(shape == 'circle'),82,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')",6,3
541,61,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3
542,61,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red'),82,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",6,3
543,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or shape == 'circle'),82,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",6,7
544,61,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
545,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'blue' or color == 'red' or shape == 'circle'),82,56,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'red' or shape == 'circle')",6,7
546,61,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or color == 'green'),82,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9
547,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))",6,7
548,61,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'square'))),(color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle')),82,79,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or (color == 'green' and shape == 'circle'))",6,7
549,62,0.4444444444444444,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'circle'),82,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
550,62,0.6666666666666666,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
551,62,0.6666666666666666,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or shape == 'square'),82,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
552,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),82,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4
553,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
554,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'blue' or (not shape == 'triangle')),82,46,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",6,7
555,62,0.7777777777777778,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue'),82,35,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",6,6
556,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7
557,62,0.8888888888888888,(color == 'blue' or (shape == 'square' or (color == 'red' and shape == 'circle'))),(color == 'red' or color == 'blue' or shape == 'square'),82,56,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='square' or (x['color']=='red' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'square')",6,7
558,63,0.7777777777777778,(color == 'green' or not (shape == 'triangle')),True,47,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return True",7,9
559,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
560,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
561,63,0.6666666666666666,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",7,4
562,63,0.7777777777777778,(color == 'green' or not (shape == 'triangle')),(color == 'red' or shape == 'circle' or shape == 'square'),47,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle' or shape == 'square')",7,7
563,63,0.6666666666666666,(color == 'green' or not (shape == 'triangle')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),47,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",7,4
564,63,0.8888888888888888,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
565,63,0.5555555555555556,(color == 'green' or not (shape == 'triangle')),(color == 'red' or color == 'blue' or shape == 'circle'),47,56,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",7,7
566,63,0.8888888888888888,(color == 'green' or not (shape == 'triangle')),(not shape == 'triangle'),47,25,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (not shape == 'triangle')",7,6
567,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
568,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red' or shape == 'square'),54,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
569,64,0.6666666666666666,(not (shape == 'triangle') and not (color == 'green')),(color == 'red'),54,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
570,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
571,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
572,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
573,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
574,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
575,64,1.0,(not (shape == 'triangle') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),54,82,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='triangle') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
576,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),True,83,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return True",6,9
577,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
578,65,0.4444444444444444,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red'),83,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red')",6,3
579,65,0.5555555555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4
580,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or shape == 'circle'),83,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
581,65,0.5555555555555556,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),83,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",6,4
582,65,0.6666666666666666,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'red' or color == 'blue' or color == 'green'),83,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",6,9
583,65,0.7777777777777778,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square')),83,102,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue' or color == 'green') and (shape == 'circle' or shape == 'square'))",6,6
584,65,0.8888888888888888,(shape == 'circle' or (color == 'green' or (shape == 'square' and color == 'red'))),(color == 'green' or (not shape == 'triangle')),83,47,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' or (x['shape']=='square' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'triangle'))",6,7
585,66,0.8888888888888888,(shape == 'circle' or (shape == 'square' and color == 'red')),(shape == 'circle'),61,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'circle')",4,3
586,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'square'),61,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
587,66,0.6666666666666666,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red'),61,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')",4,3
588,66,0.6666666666666666,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or shape == 'circle'),61,56,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'circle')",4,7
589,66,0.8888888888888888,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or shape == 'circle'),61,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
590,66,0.7777777777777778,(shape == 'circle' or (shape == 'square' and color == 'red')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square')),61,82,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'square'))",4,4
591,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9
592,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9
593,66,0.4444444444444444,(shape == 'circle' or (shape == 'square' and color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),61,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9
594,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
595,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
596,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
597,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),53,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
598,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or shape == 'circle'),53,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
599,67,0.6666666666666666,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red'),53,16,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
600,67,0.7777777777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6
601,67,0.7777777777777778,(not (color == 'blue') and not (shape == 'triangle')),(color == 'red' or color == 'green'),53,36,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",4,6
602,67,1.0,(not (color == 'blue') and not (shape == 'triangle')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square')),53,83,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'square'))",4,4
603,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),True,49,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return True",8,9
604,68,0.2222222222222222,(not (color == 'red') or not (shape == 'square')),(color == 'red'),49,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red')",8,3
605,68,0.4444444444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5
606,68,0.4444444444444444,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle'),49,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",8,5
607,68,0.6666666666666666,(not (color == 'red') or not (shape == 'square')),(color == 'red' or shape == 'triangle' or shape == 'circle'),49,60,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle' or shape == 'circle')",8,7
608,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),(color == 'blue' or (not shape == 'square')),49,44,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",8,7
609,68,0.7777777777777778,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),49,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",8,6
610,68,0.8888888888888888,(not (color == 'red') or not (shape == 'square')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),49,303,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",8,7
611,68,1.0,(not (color == 'red') or not (shape == 'square')),(not (color == 'red' and shape == 'square')),49,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') or not (x['shape']=='square'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))",8,8
612,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return True",6,9
613,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
614,69,0.4444444444444444,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
615,69,0.6666666666666666,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",6,3
616,69,0.7777777777777778,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4
617,69,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5
618,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",6,6
619,69,0.8888888888888888,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'blue' or (not shape == 'square')),84,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7
620,69,1.0,(shape == 'circle' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",6,6
621,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),True,109,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return True",6,9
622,70,0.4444444444444444,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'circle'),109,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
623,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
624,70,0.6666666666666666,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or shape == 'triangle'),109,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
625,70,0.7777777777777778,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),109,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4
626,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),109,215,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5
627,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'red' or color == 'blue' or shape == 'triangle'),109,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or shape == 'triangle')",6,7
628,70,0.8888888888888888,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),(color == 'blue' or shape == 'circle' or shape == 'triangle'),109,61,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle' or shape == 'triangle')",6,7
629,70,1.0,(shape == 'triangle' or (shape == 'triangle' or (color == 'blue' or (shape == 'circle' and color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),109,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' or (x['shape']=='triangle' or (x['color']=='blue' or (x['shape']=='circle' and x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))",6,6
630,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
631,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
632,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
633,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
634,71,0.5555555555555556,(not (shape == 'square') or color == 'green'),(color == 'red' or shape == 'triangle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
635,71,0.6666666666666666,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",7,4
636,71,0.6666666666666666,(not (shape == 'square') or color == 'green'),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),45,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",7,4
637,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or shape == 'circle' or shape == 'triangle'),45,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle' or shape == 'triangle')",7,7
638,71,1.0,(not (shape == 'square') or color == 'green'),(color == 'green' or (not shape == 'square')),45,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') or x['color']=='green')""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",7,7
639,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
640,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red'),52,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red')",4,3
641,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
642,72,0.8888888888888888,(not (shape == 'square') and not (color == 'green')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),52,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",4,3
643,72,0.6666666666666666,(not (shape == 'square') and not (color == 'green')),(color == 'red' or shape == 'triangle'),52,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
644,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4
645,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4
646,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4
647,72,1.0,(not (shape == 'square') and not (color == 'green')),((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4
648,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
649,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'circle'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
650,73,0.5555555555555556,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
651,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),66,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",5,2
652,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",5,2
653,73,0.6666666666666666,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),66,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",5,2
654,73,0.7777777777777778,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",5,3
655,73,0.8888888888888888,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",5,4
656,73,1.0,(color == 'green' or (not (shape == 'square') and color == 'red')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (not (x['shape']=='square') and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",5,5
657,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,3
658,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red'),51,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,3
659,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
660,74,0.7777777777777778,(not (shape == 'square') and not (color == 'blue')),(color == 'red' and (shape == 'circle' or shape == 'triangle')),51,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",4,2
661,74,0.7777777777777778,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),51,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",4,2
662,74,0.6666666666666666,(not (shape == 'square') and not (color == 'blue')),(color == 'red' or shape == 'triangle'),51,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
663,74,0.8888888888888888,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",4,3
664,74,0.8888888888888888,(not (shape == 'square') and not (color == 'blue')),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),51,128,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",4,3
665,74,1.0,(not (shape == 'square') and not (color == 'blue')),((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle')),51,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['shape']=='square') and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'circle' or shape == 'triangle'))",4,4
666,75,0.6666666666666666,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'circle'),44,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5
667,75,0.8888888888888888,(not (shape == 'square') and color == 'red'),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",2,3
668,75,0.6666666666666666,(not (shape == 'square') and color == 'red'),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",2,5
669,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2
670,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",2,2
671,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2
672,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2
673,75,1.0,(not (shape == 'square') and color == 'red'),(color == 'red' and (shape == 'circle' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and (shape == 'circle' or shape == 'triangle'))",2,2
674,75,1.0,(not (shape == 'square') and color == 'red'),((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle')),44,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['shape']=='square') and x['color']=='red')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'red' and shape == 'triangle'))",2,2
675,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
676,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' or shape == 'circle'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",7,5
677,76,0.3333333333333333,(shape == 'circle' or not (color == 'red')),(color == 'red' and shape == 'circle'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",7,1
678,76,0.4444444444444444,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue'),43,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",7,6
679,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (not shape == 'triangle')),43,46,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",7,7
680,76,0.6666666666666666,(shape == 'circle' or not (color == 'red')),(color == 'blue' or (color == 'red' and shape == 'circle')),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",7,4
681,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9
682,76,0.8888888888888888,(shape == 'circle' or not (color == 'red')),(not (color == 'red' and shape == 'square')),43,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (not (color == 'red' and shape == 'square'))",7,8
683,76,0.7777777777777778,(shape == 'circle' or not (color == 'red')),(color == 'red' or color == 'blue' or color == 'green'),43,55,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",7,9
684,77,0.5555555555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
685,77,0.5555555555555556,(color == 'blue' or shape == 'circle'),(color == 'red' or shape == 'circle'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
686,77,0.3333333333333333,(color == 'blue' or shape == 'circle'),(color == 'red'),38,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red')",5,3
687,77,0.6666666666666666,(color == 'blue' or shape == 'circle'),(color == 'red' or color == 'blue'),38,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",5,6
688,77,0.8888888888888888,(color == 'blue' or shape == 'circle'),(color == 'blue' or (color == 'red' and shape == 'circle')),38,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",5,4
689,77,0.8888888888888888,(color == 'blue' or shape == 'circle'),((color == 'red' and shape == 'circle') or (color == 'blue')),38,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue'))",5,4
690,77,0.7777777777777778,(color == 'blue' or shape == 'circle'),(color == 'blue' or color == 'green' or shape == 'circle'),38,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",5,7
691,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')",5,5
692,77,1.0,(color == 'blue' or shape == 'circle'),(color == 'blue' or shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'circle')",5,5
693,78,0.6666666666666666,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),True,84,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return True",6,9
694,78,0.4444444444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' or shape == 'circle'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
695,78,0.4444444444444444,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'red' and shape == 'circle'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",6,1
696,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",6,2
697,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4
698,78,0.5555555555555556,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or (color == 'red' and shape == 'circle')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'circle'))",6,4
699,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",6,7
700,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),(color == 'blue' or color == 'green' or shape == 'circle'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'circle')",6,7
701,78,0.8888888888888888,(color == 'green' or (shape == 'circle' or (color == 'blue' and shape == 'square'))),((color == 'red' and shape == 'circle') or (not color == 'red')),84,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['color']=='blue' and x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (not color == 'red'))",6,7
702,79,0.4444444444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' or shape == 'circle'),91,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
703,79,0.4444444444444444,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle'),91,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",6,1
704,79,0.2222222222222222,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red'),91,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red')",6,3
705,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')),91,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'))",6,2
706,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' or color == 'blue') and shape == 'circle'),91,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')",6,2
707,79,0.5555555555555556,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),91,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",6,2
708,79,0.6666666666666666,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),91,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",6,3
709,79,0.7777777777777778,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),91,171,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",6,4
710,79,1.0,(color == 'green' or (shape == 'circle' or (shape == 'triangle' and not (color == 'red')))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green'),91,148,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='circle' or (x['shape']=='triangle' and not (x['color']=='red'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green')",6,6
711,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(shape == 'circle'),73,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (shape == 'circle')",5,3
712,80,0.5555555555555556,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' or shape == 'circle'),73,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
713,80,0.3333333333333333,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red'),73,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red')",5,3
714,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),73,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",5,2
715,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' or color == 'blue') and shape == 'circle'),73,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'circle')",5,2
716,80,0.6666666666666666,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),73,85,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",5,2
717,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",5,3
718,80,0.7777777777777778,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle')),73,127,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle'))",5,3
719,80,1.0,(shape == 'circle' or (not (color == 'red') and not (shape == 'square'))),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle')),73,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='circle' or (not (x['color']=='red') and not (x['shape']=='square')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'triangle'))",5,5
720,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
721,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'circle'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
722,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'circle'),63,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",4,1
723,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6
724,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6
725,81,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue'),63,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6
726,81,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'red' or color == 'blue' or color == 'green'),63,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9
727,81,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or shape == 'circle'),63,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'circle')",4,5
728,81,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'square')),(color == 'green' or (not shape == 'square')),63,45,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' or (not shape == 'square'))",4,7
729,82,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
730,82,0.6666666666666666,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'circle'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
731,82,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red'),65,16,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
732,82,0.7777777777777778,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle'),65,81,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle')",4,2
733,82,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6
734,82,0.3333333333333333,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue'),65,35,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue')",4,6
735,82,0.4444444444444444,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(color == 'red' or color == 'blue' or color == 'green'),65,55,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or color == 'blue' or color == 'green')",4,9
736,82,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'triangle')),(shape == 'circle'),65,19,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'circle')",4,3
737,82,0.8888888888888888,(shape == 'circle' or (color == 'green' and shape == 'triangle')),((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle')),65,129,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='circle' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'circle') or (color == 'blue' and shape == 'circle') or (color == 'green' and shape == 'triangle'))",4,3
738,83,0.6666666666666666,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5
739,83,0.6666666666666666,(not (color == 'blue') and shape == 'circle'),(color == 'red' or shape == 'circle'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",2,5
740,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1
741,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1
742,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1
743,83,0.8888888888888888,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1
744,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')",2,2
745,83,1.0,(not (color == 'blue') and shape == 'circle'),(color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle'),45,82,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle') or (color == 'green' and shape == 'circle')",2,2
746,83,0.5555555555555556,(not (color == 'blue') and shape == 'circle'),(color == 'red' or color == 'green'),45,36,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='blue') and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or color == 'green')",2,6
747,84,0.7777777777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",1,3
748,84,0.7777777777777778,(shape == 'circle' and color == 'red'),(color == 'red'),38,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red')",1,3
749,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
750,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
751,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
752,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
753,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
754,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
755,84,1.0,(shape == 'circle' and color == 'red'),(color == 'red' and shape == 'circle'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == True"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='red')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
756,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
757,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
758,85,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'triangle'),84,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
759,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle')),84,127,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle'))",6,3
760,85,0.7777777777777778,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square')),84,170,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square'))",6,4
761,85,0.6666666666666666,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),(color == 'red' or shape == 'square' or shape == 'triangle'),84,60,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",6,7
762,85,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle')),84,215,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle'))",6,5
763,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",6,6
764,85,1.0,(shape == 'square' or (color == 'blue' or (color == 'red' and shape == 'triangle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),84,259,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='red' and x['shape']=='triangle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'circle') or (color == 'blue' and shape == 'square') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",6,6
765,86,0.3333333333333333,(color == 'green' or not (shape == 'circle')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",7,5
766,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
767,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
768,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'triangle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",7,5
769,86,0.5555555555555556,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
770,86,0.6666666666666666,(color == 'green' or not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),45,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",7,4
771,86,0.8888888888888888,(color == 'green' or not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),45,42,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",7,6
772,86,0.7777777777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
773,86,0.7777777777777778,(color == 'green' or not (shape == 'circle')),(color == 'red' or shape == 'square' or shape == 'triangle'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' or not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",7,7
774,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red'),52,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
775,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
776,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
777,87,0.6666666666666666,(not (color == 'green') and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
778,87,0.7777777777777778,(not (color == 'green') and not (shape == 'circle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),52,84,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",4,2
779,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4
780,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4
781,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4
782,87,1.0,(not (color == 'green') and not (shape == 'circle')),((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle')),52,84,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='green') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4
783,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
784,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
785,88,0.4444444444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
786,88,0.4444444444444444,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'triangle'),85,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",6,5
787,88,0.6666666666666666,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),(color == 'red' or shape == 'square'),85,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
788,88,0.5555555555555556,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),85,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",6,2
789,88,0.7777777777777778,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle')),85,171,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle'))",6,4
790,88,0.8888888888888888,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square')),85,215,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'blue' and shape == 'square'))",6,5
791,88,1.0,(shape == 'square' or (color == 'green' or (shape == 'triangle' and color == 'red'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),85,261,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' or (x['shape']=='triangle' and x['color']=='red')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",6,6
792,89,0.6666666666666666,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
793,89,0.8888888888888888,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
794,89,0.4444444444444444,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'triangle'),63,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",4,5
795,89,0.7777777777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),63,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",4,2
796,89,0.8888888888888888,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square'),63,37,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
797,89,0.7777777777777778,(shape == 'square' or (color == 'red' and shape == 'triangle')),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),63,84,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",4,2
798,89,0.6666666666666666,(shape == 'square' or (color == 'red' and shape == 'triangle')),(color == 'red' or shape == 'square' or shape == 'triangle'),63,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'triangle')",4,7
799,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))",4,4
800,89,1.0,(shape == 'square' or (color == 'red' and shape == 'triangle')),(shape == 'square' or (color == 'red' and shape == 'triangle')),63,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='red' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'red' and shape == 'triangle'))",4,4
801,90,0.5555555555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),True,70,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return True",5,9
802,90,0.5555555555555556,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'square'),70,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
803,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
804,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
805,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
806,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
807,90,0.7777777777777778,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(color == 'red' or shape == 'triangle'),70,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
808,90,0.8888888888888888,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),(shape == 'square' or shape == 'triangle'),70,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",5,6
809,90,0.8888888888888888,(shape == 'triangle' or (shape == 'square' and not (color == 'blue'))),((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle')),70,85,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='square' and not (x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and (shape == 'square' or shape == 'triangle'))",5,4
810,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),r == 'red' and shape == 'circle':,66,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",5,5
811,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'square'),66,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
812,91,0.5555555555555556,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' or shape == 'triangle'),66,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",5,5
813,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle')),66,84,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle'))",5,2
814,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",5,2
815,91,0.6666666666666666,(color == 'green' or (color == 'red' and not (shape == 'circle'))),(color == 'red' and (shape == 'square' or shape == 'triangle')),66,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",5,2
816,91,0.7777777777777778,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle')),66,128,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle'))",5,3
817,91,0.8888888888888888,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square')),66,172,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square'))",5,4
818,91,1.0,(color == 'green' or (color == 'red' and not (shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle')),66,218,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['color']=='red' and not (x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'red' and shape == 'triangle') or (color == 'green' and shape == 'circle') or (color == 'green' and shape == 'square') or (color == 'green' and shape == 'triangle'))",5,5
819,92,0.8888888888888888,(color == 'red' and not (shape == 'circle')),r == 'red':,44,11,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	if color == 'red':",2,3
820,92,0.8888888888888888,(color == 'red' and not (shape == 'circle')),(color == 'red'),44,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",2,3
821,92,0.6666666666666666,(color == 'red' and not (shape == 'circle')),(color == 'red' or shape == 'triangle'),44,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'triangle')",2,5
822,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2
823,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2
824,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2
825,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2
826,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2
827,92,1.0,(color == 'red' and not (shape == 'circle')),(color == 'red' and (shape == 'square' or shape == 'triangle')),44,63,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and (shape == 'square' or shape == 'triangle'))",2,2
828,93,0.5555555555555556,(shape == 'square' or not (color == 'red')),(shape == 'square'),43,19,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (shape == 'square')",7,3
829,93,0.3333333333333333,(shape == 'square' or not (color == 'red')),(color == 'red' or shape == 'square'),43,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",7,5
830,93,0.3333333333333333,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square'),43,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",7,1
831,93,0.4444444444444444,(shape == 'square' or not (color == 'red')),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),43,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",7,2
832,93,0.4444444444444444,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),43,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')",7,2
833,93,0.6666666666666666,(shape == 'square' or not (color == 'red')),(color == 'red' and shape == 'square') or (color == 'blue'),43,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')",7,4
834,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",7,7
835,93,1.0,(shape == 'square' or not (color == 'red')),(color == 'blue' or color == 'green' or shape == 'square'),43,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",7,7
836,93,0.7777777777777778,(shape == 'square' or not (color == 'red')),(color == 'blue' or shape == 'square'),43,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or not (x['color']=='red'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",7,5
837,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
838,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' or shape == 'square'),84,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
839,94,0.4444444444444444,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1
840,94,0.5555555555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2
841,94,0.5555555555555556,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' or color == 'blue') and shape == 'square'),84,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",6,2
842,94,0.7777777777777778,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or (color == 'red' and shape == 'square')),84,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or (color == 'red' and shape == 'square'))",6,4
843,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7
844,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7
845,94,0.8888888888888888,(shape == 'square' or (color == 'blue' or (color == 'green' and shape == 'circle'))),((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle')),84,105,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['color']=='green' and x['shape']=='circle')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'circle'))",6,5
846,95,0.2222222222222222,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
847,95,0.4444444444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
848,95,0.4444444444444444,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'red' and shape == 'square'),86,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1
849,95,0.5555555555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),86,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2
850,95,0.5555555555555556,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' or color == 'blue') and shape == 'square'),86,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",6,2
851,95,0.7777777777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))",6,4
852,95,0.7777777777777778,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),((color == 'red' and shape == 'square') or (color == 'blue')),86,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue'))",6,4
853,95,0.8888888888888888,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5
854,95,0.8888888888888888,(shape == 'square' or (color == 'blue' or (shape == 'triangle' and color == 'green'))),(color == 'blue' or shape == 'square'),86,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='blue' or (x['shape']=='triangle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5
855,96,0.5555555555555556,(shape == 'square' or color == 'blue'),True,38,4,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return True",5,9
856,96,0.5555555555555556,(shape == 'square' or color == 'blue'),(color == 'red' or shape == 'square'),38,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
857,96,0.5555555555555556,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",5,1
858,96,0.6666666666666666,(shape == 'square' or color == 'blue'),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),38,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",5,2
859,96,0.6666666666666666,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'),38,81,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')",5,2
860,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5
861,96,0.8888888888888888,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue'),38,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue')",5,4
862,96,1.0,(shape == 'square' or color == 'blue'),(color == 'blue' or shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5
863,96,1.0,(shape == 'square' or color == 'blue'),(color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square'),38,103,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' or x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'blue') or (color == 'green' and shape == 'square')",5,5
864,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'circle'),84,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
865,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1
866,97,0.4444444444444444,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' and shape == 'square'),84,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",6,1
867,97,0.5555555555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2
868,97,0.6666666666666666,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'red' or shape == 'square' or shape == 'circle'),84,58,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square' or shape == 'circle')",6,7
869,97,0.5555555555555556,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle')),84,83,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'blue' and shape == 'circle'))",6,2
870,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7
871,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7
872,97,0.8888888888888888,(color == 'green' or (shape == 'square' or (shape == 'circle' and color == 'blue'))),(color == 'blue' or color == 'green' or shape == 'square'),84,58,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='square' or (x['shape']=='circle' and x['color']=='blue')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'square')",6,7
873,98,0.4444444444444444,(color == 'green' or shape == 'square'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return False",5,0
874,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
875,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' and shape == 'square'),39,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",5,1
876,98,0.5555555555555556,(color == 'green' or shape == 'square'),(color == 'red' or shape == 'square'),39,37,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
877,98,0.6666666666666666,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",5,2
878,98,0.6666666666666666,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square'),39,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",5,2
879,98,0.7777777777777778,(color == 'green' or shape == 'square'),((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle'),39,103,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square') or (color == 'green' and shape == 'circle')",5,3
880,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",5,5
881,98,1.0,(color == 'green' or shape == 'square'),(color == 'green' or shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",5,5
882,99,0.5555555555555556,(shape == 'square' or (color == 'green' and shape == 'triangle')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False",4,0
883,99,0.6666666666666666,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
884,99,0.6666666666666666,(shape == 'square' or (color == 'green' and shape == 'triangle')),(color == 'red' and shape == 'square'),65,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1
885,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2
886,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2
887,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2
888,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2
889,99,0.7777777777777778,(shape == 'square' or (color == 'green' and shape == 'triangle')),((color == 'red' or color == 'blue') and shape == 'square'),65,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",4,2
890,99,1.0,(shape == 'square' or (color == 'green' and shape == 'triangle')),(shape == 'square' or (color == 'green' and shape == 'triangle')),65,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='square' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (shape == 'square' or (color == 'green' and shape == 'triangle'))",4,4
891,100,0.7777777777777778,(shape == 'square' and not (color == 'green')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return False",2,0
892,100,0.6666666666666666,(shape == 'square' and not (color == 'green')),(color == 'red' or shape == 'square'),46,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
893,100,0.8888888888888888,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
894,100,0.8888888888888888,(shape == 'square' and not (color == 'green')),(color == 'red' and shape == 'square'),46,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
895,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2
896,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2
897,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2
898,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2
899,100,1.0,(shape == 'square' and not (color == 'green')),((color == 'red' or color == 'blue') and shape == 'square'),46,59,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='green'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'square')",2,2
900,101,0.4444444444444444,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red'),60,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red')",4,3
901,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1
902,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1
903,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1
904,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1
905,101,0.6666666666666666,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square'),60,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",4,1
906,101,0.7777777777777778,(color == 'green' or (shape == 'square' and color == 'red')),(color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle'),60,82,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square') or (color == 'green' and shape == 'circle')",4,2
907,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))",4,4
908,101,1.0,(color == 'green' or (shape == 'square' and color == 'red')),((color == 'red' and shape == 'square') or (color == 'green')),60,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' or (x['shape']=='square' and x['color']=='red'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green'))",4,4
909,102,0.7777777777777778,(shape == 'square' and not (color == 'blue')),False,45,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",2,0
910,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
911,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
912,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
913,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
914,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
915,102,0.8888888888888888,(shape == 'square' and not (color == 'blue')),(color == 'red' and shape == 'square'),45,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",2,1
916,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square')),45,84,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'square') or (color == 'green' and shape == 'square'))",2,2
917,102,1.0,(shape == 'square' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'square'),45,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'square')",2,2
918,103,0.8888888888888888,(color == 'red' and shape == 'square'),False,38,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == True""]","""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0
919,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
920,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
921,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
922,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
923,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
924,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
925,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
926,103,1.0,(color == 'red' and shape == 'square'),(color == 'red' and shape == 'square'),38,38,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == True"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' and shape == 'square')",1,1
927,104,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'circle'),86,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
928,104,0.2222222222222222,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'red' or shape == 'square'),86,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
929,104,0.6666666666666666,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle'),86,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle')",6,3
930,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
931,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
932,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or shape == 'triangle'),86,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
933,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(shape == 'triangle' or color == 'blue' or color == 'green'),86,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (shape == 'triangle' or color == 'blue' or color == 'green')",6,7
934,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7
935,104,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'circle' and color == 'green'))),(color == 'blue' or (not shape == 'square')),86,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'circle') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='green')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'square'))",6,7
936,105,0.3333333333333333,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),False,111,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return False",6,0
937,105,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' or shape == 'square'),111,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",6,5
938,105,0.4444444444444444,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'red' and shape == 'triangle'),111,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",6,1
939,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
940,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
941,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
942,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'triangle'),111,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
943,105,0.6666666666666666,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or shape == 'square'),111,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",6,5
944,105,0.8888888888888888,(color == 'blue' or (shape == 'triangle' or (shape == 'triangle' or (shape == 'square' and color == 'green')))),(color == 'blue' or (not shape == 'circle')),111,44,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['shape']=='triangle' or (x['shape']=='triangle' or (x['shape']=='square' and x['color']=='green'))))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'circle'))",6,7
945,106,0.3333333333333333,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'circle'),40,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",5,5
946,106,0.3333333333333333,(color == 'blue' or shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
947,106,0.5555555555555556,(color == 'blue' or shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1
948,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
949,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
950,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
951,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
952,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
953,106,1.0,(color == 'blue' or shape == 'triangle'),(color == 'blue' or shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='blue' or x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
954,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' or shape == 'circle'),108,37,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",6,5
955,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' and shape == 'triangle'),108,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",6,1
956,107,0.4444444444444444,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'red' and shape == 'triangle'),108,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",6,1
957,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
958,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
959,107,0.6666666666666666,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or shape == 'triangle'),108,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",6,5
960,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7
961,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7
962,107,0.8888888888888888,(color == 'green' or (shape == 'triangle' or (color == 'green' or (color == 'blue' and shape == 'circle')))),(color == 'blue' or color == 'green' or shape == 'triangle'),108,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' or (x['color']=='green' or (x['color']=='blue' and x['shape']=='circle'))))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",6,7
963,108,0.4444444444444444,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),False,75,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return False",5,0
964,108,0.5555555555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue'),75,17,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue')",5,3
965,108,0.5555555555555556,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'red' and shape == 'triangle'),75,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",5,1
966,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
967,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
968,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or shape == 'triangle'),75,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",5,5
969,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",5,7
970,108,0.8888888888888888,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),((not color == 'red') and (not shape == 'square')),75,50,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return ((not color == 'red') and (not shape == 'square'))",5,4
971,108,0.7777777777777778,(shape == 'triangle' or (not (shape == 'square') and not (color == 'red'))),(color == 'blue' or color == 'green' or shape == 'triangle'),75,60,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (not (x['shape']=='square') and not (x['color']=='red')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green' or shape == 'triangle')",5,7
972,109,0.5555555555555556,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),False,64,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0
973,109,0.2222222222222222,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' or shape == 'square'),64,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
974,109,0.6666666666666666,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'red' and shape == 'triangle'),64,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1
975,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5
976,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5
977,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5
978,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5
979,109,0.8888888888888888,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),(color == 'blue' or shape == 'triangle'),64,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5
980,109,0.7777777777777778,(shape == 'triangle' or (shape == 'circle' and color == 'blue')),((color == 'blue' or color == 'red') and shape == 'triangle'),64,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['shape']=='circle' and x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'red') and shape == 'triangle')",4,2
981,110,0.5555555555555556,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(False),65,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (False)",4,0
982,110,0.4444444444444444,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red'),65,16,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red')",4,3
983,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3
984,110,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1
985,110,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1
986,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3
987,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5
988,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5
989,110,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'circle')),(color == 'green' or shape == 'triangle'),65,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5
990,111,0.5555555555555556,(shape == 'triangle' or (color == 'green' and shape == 'square')),False,65,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return False",4,0
991,111,0.4444444444444444,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' or shape == 'square'),65,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
992,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3
993,111,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1
994,111,0.6666666666666666,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle'),65,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",4,1
995,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(shape == 'triangle'),65,21,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (shape == 'triangle')",4,3
996,111,0.7777777777777778,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' or color == 'blue') and shape == 'triangle'),65,61,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'blue') and shape == 'triangle')",4,2
997,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),(color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'),65,129,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')",4,3
998,111,0.8888888888888888,(shape == 'triangle' or (color == 'green' and shape == 'square')),((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square')),65,131,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' or (x['color']=='green' and x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'red' and shape == 'triangle') or (color == 'blue' and shape == 'triangle') or (color == 'green' and shape == 'square'))",4,3
999,112,0.7777777777777778,(shape == 'triangle' and not (color == 'blue')),False,47,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return False",2,0
1000,112,0.4444444444444444,(shape == 'triangle' and not (color == 'blue')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
1001,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
1002,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
1003,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
1004,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
1005,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
1006,112,0.8888888888888888,(shape == 'triangle' and not (color == 'blue')),(color == 'red' and shape == 'triangle'),47,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",2,1
1007,112,1.0,(shape == 'triangle' and not (color == 'blue')),((color == 'red' or color == 'green') and shape == 'triangle'),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['shape']=='triangle' and not (x['color']=='blue'))""","def categorize(color, shape):
	return ((color == 'red' or color == 'green') and shape == 'triangle')",2,2
1008,113,0.8888888888888888,(color == 'red' and shape == 'triangle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'triangle') == True""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return False",1,0
1009,113,0.5555555555555556,(color == 'red' and shape == 'triangle'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5
1010,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1011,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1012,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1013,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1014,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1015,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1016,113,1.0,(color == 'red' and shape == 'triangle'),(color == 'red' and shape == 'triangle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == True"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='red' and x['shape']=='triangle')""","def categorize(color, shape):
	return (color == 'red' and shape == 'triangle')",1,1
1017,114,0.3333333333333333,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),r == 'red' and shape == 'circle':,69,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",5,1
1018,114,0.5555555555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'square'),69,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",5,1
1019,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5
1020,114,0.5555555555555556,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' and shape == 'circle'),69,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",5,1
1021,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or shape == 'square'),69,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5
1022,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue'),69,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3
1023,114,0.8888888888888888,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",5,6
1024,114,0.8888888888888888,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or color == 'green'),69,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",5,6
1025,114,0.7777777777777778,(color == 'blue' or (color == 'green' and not (shape == 'triangle'))),(color == 'blue' or (not shape == 'triangle')),69,46,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and not (x['shape']=='triangle')))""","def categorize(color, shape):
	return (color == 'blue' or (not shape == 'triangle'))",5,7
1026,115,0.4444444444444444,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),False,71,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return False",5,0
1027,115,0.3333333333333333,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'red' or shape == 'square'),71,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",5,5
1028,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3
1029,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3
1030,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5
1031,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3
1032,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue'),71,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue')",5,3
1033,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square'),71,38,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square')",5,5
1034,115,0.7777777777777778,(color == 'blue' or (not (color == 'red') and not (shape == 'circle'))),(color == 'blue' or shape == 'square' or shape == 'triangle'),71,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (not (x['color']=='red') and not (x['shape']=='circle')))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'square' or shape == 'triangle')",5,7
1035,116,0.5555555555555556,(color == 'blue' or (color == 'green' and shape == 'triangle')),False,63,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return False",4,0
1036,116,0.6666666666666666,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'square'),63,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1
1037,116,0.6666666666666666,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1
1038,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1039,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1040,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1041,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1042,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue'),63,17,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1043,116,0.8888888888888888,(color == 'blue' or (color == 'green' and shape == 'triangle')),(color == 'blue' or shape == 'triangle'),63,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='blue' or (x['color']=='green' and x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or shape == 'triangle')",4,5
1044,117,0.5555555555555556,(not (color == 'red') and not (shape == 'triangle')),(False),52,7,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (False)",4,0
1045,117,0.4444444444444444,(not (color == 'red') and not (shape == 'triangle')),(color == 'red' or shape == 'square'),52,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
1046,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),52,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1
1047,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),52,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1
1048,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1049,117,0.6666666666666666,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue'),52,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1050,117,0.7777777777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6
1051,117,0.7777777777777778,(not (color == 'red') and not (shape == 'triangle')),(color == 'blue' or color == 'green'),52,37,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' or color == 'green')",4,6
1052,117,1.0,(not (color == 'red') and not (shape == 'triangle')),((color == 'blue' or color == 'green') and not shape == 'triangle'),52,67,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return ((color == 'blue' or color == 'green') and not shape == 'triangle')",4,4
1053,118,0.7777777777777778,(color == 'blue' and not (shape == 'triangle')),(color == shape),47,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == shape)",2,0
1054,118,0.4444444444444444,(color == 'blue' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),47,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
1055,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3
1056,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3
1057,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3
1058,118,0.8888888888888888,(color == 'blue' and not (shape == 'triangle')),(color == 'blue'),47,17,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3
1059,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))",2,2
1060,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (not shape == 'triangle')),47,47,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (not shape == 'triangle'))",2,2
1061,118,1.0,(color == 'blue' and not (shape == 'triangle')),(color == 'blue' and (shape == 'circle' or shape == 'square')),47,62,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'square'))",2,2
1062,119,0.5555555555555556,(not (color == 'red') and not (shape == 'square')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",4,0
1063,119,0.4444444444444444,(not (color == 'red') and not (shape == 'square')),(color == 'red' or shape == 'circle'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",4,5
1064,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),(not color == 'red'),50,20,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (not color == 'red')",4,6
1065,119,0.6666666666666666,(not (color == 'red') and not (shape == 'square')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1066,119,0.6666666666666666,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and shape == 'circle'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",4,1
1067,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",4,2
1068,119,0.7777777777777778,(not (color == 'red') and not (shape == 'square')),((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle')),50,87,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or (color == 'blue' and shape == 'triangle'))",4,2
1069,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4
1070,119,1.0,(not (color == 'red') and not (shape == 'square')),((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='square'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'circle' or shape == 'triangle'))",4,4
1071,120,0.7777777777777778,(color == 'blue' and not (shape == 'square')),r == 'red' and shape == 'circle':,45,33,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	if color == 'red' and shape == 'circle':",2,0
1072,120,0.2222222222222222,(color == 'blue' and not (shape == 'square')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
1073,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),45,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
1074,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
1075,120,0.8888888888888888,(color == 'blue' and not (shape == 'square')),(color == 'blue' and shape == 'circle'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
1076,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2
1077,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2
1078,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2
1079,120,1.0,(color == 'blue' and not (shape == 'square')),(color == 'blue' and (shape == 'circle' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'circle' or shape == 'triangle'))",2,2
1080,121,0.8888888888888888,(shape == 'circle' and color == 'blue'),False,39,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0
1081,121,0.3333333333333333,(shape == 'circle' and color == 'blue'),(color == 'red' or shape == 'square'),39,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5
1082,121,0.7777777777777778,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),39,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1083,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1084,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1085,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1086,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1087,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1088,121,1.0,(shape == 'circle' and color == 'blue'),(color == 'blue' and shape == 'circle'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == True"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='circle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1089,122,0.5555555555555556,(not (color == 'red') and not (shape == 'circle')),False,50,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",4,0
1090,122,0.4444444444444444,(not (color == 'red') and not (shape == 'circle')),(color == 'red' or shape == 'square'),50,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
1091,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1
1092,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue'),50,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')",4,3
1093,122,0.6666666666666666,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and shape == 'square'),50,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",4,1
1094,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",4,2
1095,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),50,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",4,2
1096,122,0.7777777777777778,(not (color == 'red') and not (shape == 'circle')),(shape == 'square' or shape == 'triangle'),50,42,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (shape == 'square' or shape == 'triangle')",4,6
1097,122,1.0,(not (color == 'red') and not (shape == 'circle')),((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle')),50,86,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (not (x['color']=='red') and not (x['shape']=='circle'))""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and (shape == 'square' or shape == 'triangle'))",4,4
1098,123,0.6666666666666666,(color == 'blue' and not (shape == 'circle')),(color == 'red' and shape == 'circle'),45,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",2,1
1099,123,0.4444444444444444,(color == 'blue' and not (shape == 'circle')),(color == 'red' or shape == 'square'),45,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
1100,123,0.7777777777777778,(color == 'blue' and not (shape == 'circle')),False,45,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0
1101,123,0.8888888888888888,(color == 'blue' and not (shape == 'circle')),(color == 'blue'),45,17,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue')",2,3
1102,123,0.8888888888888888,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and shape == 'square'),45,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1103,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2
1104,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2
1105,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2
1106,123,1.0,(color == 'blue' and not (shape == 'circle')),(color == 'blue' and (shape == 'square' or shape == 'triangle')),45,64,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='blue' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'blue' and (shape == 'square' or shape == 'triangle'))",2,2
1107,124,0.7777777777777778,(not (color == 'red') and shape == 'square'),False,44,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False",2,0
1108,124,0.6666666666666666,(not (color == 'red') and shape == 'square'),(color == 'red' or shape == 'square'),44,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
1109,124,0.7777777777777778,(not (color == 'red') and shape == 'square'),False,44,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return False",2,0
1110,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'circle'),44,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
1111,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1112,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1113,124,0.8888888888888888,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square'),44,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1114,124,1.0,(not (color == 'red') and shape == 'square'),(color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square'),44,83,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square') or (color == 'green' and shape == 'square')",2,2
1115,124,1.0,(not (color == 'red') and shape == 'square'),((color == 'green' or color == 'blue') and shape == 'square'),44,61,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (not (x['color']=='red') and x['shape']=='square')""","def categorize(color, shape):
	return ((color == 'green' or color == 'blue') and shape == 'square')",2,2
1116,125,0.7777777777777778,(shape == 'square' and color == 'blue'),(color == 'red' and shape == 'circle'),39,38,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' and shape == 'circle')",1,1
1117,125,0.7777777777777778,(shape == 'square' and color == 'blue'),((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square')),39,92,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return ((color == 'green' and shape == 'circle') or ((not color == 'green') and shape == 'square'))",1,3
1118,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1119,125,0.8888888888888888,(shape == 'square' and color == 'blue'),False,39,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == True""]","""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0
1120,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1121,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1122,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1123,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1124,125,1.0,(shape == 'square' and color == 'blue'),(color == 'blue' and shape == 'square'),39,39,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == True"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='square' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1125,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red'),63,16,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red')",4,0
1126,126,0.2222222222222222,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'red' or shape == 'square'),63,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",4,5
1127,126,0.6666666666666666,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1
1128,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0
1129,126,0.5555555555555556,(color == 'green' or (shape == 'triangle' and color == 'blue')),False,63,5,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False""]","[""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return False",4,0
1130,126,0.6666666666666666,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'blue' and shape == 'triangle'),63,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",4,1
1131,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5
1132,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5
1133,126,0.8888888888888888,(color == 'green' or (shape == 'triangle' and color == 'blue')),(color == 'green' or shape == 'triangle'),63,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False""]","""lambda x: (x['color']=='green' or (x['shape']=='triangle' and x['color']=='blue'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'triangle')",4,5
1134,127,0.8888888888888888,(shape == 'triangle' and color == 'blue'),False,41,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0
1135,127,0.3333333333333333,(shape == 'triangle' and color == 'blue'),(color == 'red' or shape == 'square'),41,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'square') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5
1136,127,0.8888888888888888,(shape == 'triangle' and color == 'blue'),False,41,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return False",1,0
1137,127,0.7777777777777778,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'circle'),41,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1138,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1139,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1140,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1141,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1142,127,1.0,(shape == 'triangle' and color == 'blue'),(color == 'blue' and shape == 'triangle'),41,41,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == True"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['shape']=='triangle' and x['color']=='blue')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1143,128,0.7777777777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False",2,0
1144,128,0.4444444444444444,(color == 'green' and not (shape == 'triangle')),(color == 'red' or shape == 'square'),48,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",2,5
1145,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1146,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'circle'),48,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",2,1
1147,128,0.6666666666666666,(color == 'green' and not (shape == 'triangle')),(color == 'blue' and shape == 'square'),48,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1148,128,0.7777777777777778,(color == 'green' and not (shape == 'triangle')),False,48,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return False",2,0
1149,128,0.8888888888888888,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')",2,3
1150,128,0.8888888888888888,(color == 'green' and not (shape == 'triangle')),(color == 'green'),48,18,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green')",2,3
1151,128,1.0,(color == 'green' and not (shape == 'triangle')),(color == 'green' and (not shape == 'triangle')),48,48,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='triangle'))""","def categorize(color, shape):
	return (color == 'green' and (not shape == 'triangle'))",2,2
1152,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0
1153,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'triangle'),46,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",2,1
1154,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1155,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0
1156,129,0.6666666666666666,(color == 'green' and not (shape == 'square')),(color == 'blue' and shape == 'square'),46,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",2,1
1157,129,0.7777777777777778,(color == 'green' and not (shape == 'square')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return False",2,0
1158,129,0.8888888888888888,(color == 'green' and not (shape == 'square')),(color == 'green'),46,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('green', 'square') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green')",2,3
1159,129,0.8888888888888888,(color == 'green' and not (shape == 'square')),(color == 'green' and shape == 'circle'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",2,1
1160,129,1.0,(color == 'green' and not (shape == 'square')),(color == 'green' and (shape == 'circle' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='square'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'circle' or shape == 'triangle'))",2,2
1161,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0
1162,130,0.5555555555555556,(color == 'green' and shape == 'circle'),(color == 'red' or shape == 'circle'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'red' or shape == 'circle')",1,5
1163,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0
1164,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'circle'),40,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1165,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1166,130,0.8888888888888888,(color == 'green' and shape == 'circle'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'circle') == True""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return False",1,0
1167,130,0.7777777777777778,(color == 'green' and shape == 'circle'),(color == 'green'),40,18,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True""]","[""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]","""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green')",1,3
1168,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",1,1
1169,130,1.0,(color == 'green' and shape == 'circle'),(color == 'green' and shape == 'circle'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == True"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='circle')""","def categorize(color, shape):
	return (color == 'green' and shape == 'circle')",1,1
1170,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0
1171,131,0.6666666666666666,(color == 'green' and not (shape == 'circle')),(color == 'green' or shape == 'square'),46,39,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' or shape == 'square')",2,5
1172,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0
1173,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0
1174,131,0.8888888888888888,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",2,1
1175,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0
1176,131,0.7777777777777778,(color == 'green' and not (shape == 'circle')),False,46,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False""]","[""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return False",2,0
1177,131,0.8888888888888888,(color == 'green' and not (shape == 'circle')),(color == 'green' and shape == 'square'),46,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",2,1
1178,131,1.0,(color == 'green' and not (shape == 'circle')),(color == 'green' and (shape == 'square' or shape == 'triangle')),46,65,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == True""]",[],"""lambda x: (x['color']=='green' and not (x['shape']=='circle'))""","def categorize(color, shape):
	return (color == 'green' and (shape == 'square' or shape == 'triangle'))",2,2
1179,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0
1180,132,0.5555555555555556,(color == 'green' and shape == 'square'),(color == 'red' or shape == 'square'),40,37,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'red' or shape == 'square')",1,5
1181,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0
1182,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0
1183,132,0.7777777777777778,(color == 'green' and shape == 'square'),(color == 'blue' and shape == 'square'),40,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1184,132,0.8888888888888888,(color == 'green' and shape == 'square'),False,40,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'triangle') == False""]","[""assert categorize('green', 'square') == True""]","""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return False",1,0
1185,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1
1186,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1
1187,132,1.0,(color == 'green' and shape == 'square'),(color == 'green' and shape == 'square'),40,40,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == True"", ""assert categorize('green', 'triangle') == False""]",[],"""lambda x: (x['color']=='green' and x['shape']=='square')""","def categorize(color, shape):
	return (color == 'green' and shape == 'square')",1,1
1188,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,1,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0
1189,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'triangle'),42,41,2,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'triangle')",1,1
1190,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,3,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0
1191,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'circle'),42,39,4,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'circle') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'circle')",1,1
1192,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(color == 'blue' and shape == 'square'),42,39,5,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (color == 'blue' and shape == 'square')",1,1
1193,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,6,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0
1194,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,7,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0
1195,133,0.8888888888888888,(shape == 'triangle' and color == 'green'),False,42,5,8,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('blue', 'triangle') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False""]","[""assert categorize('green', 'triangle') == True""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return False",1,0
1196,133,0.7777777777777778,(shape == 'triangle' and color == 'green'),(shape == 'triangle'),42,21,9,"[{'shape': 'circle', 'color': 'red', 'alpha': 0.999}, {'shape': 'square', 'color': 'red', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'red', 'alpha': 0.999}, {'shape': 'circle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'square', 'color': 'blue', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'blue', 'alpha': 0.999}, {'shape': 'circle', 'color': 'green', 'alpha': 0.999}, {'shape': 'square', 'color': 'green', 'alpha': 0.999}, {'shape': 'triangle', 'color': 'green', 'alpha': 0.999}]","[""assert categorize('red', 'circle') == False"", ""assert categorize('red', 'square') == False"", ""assert categorize('blue', 'circle') == False"", ""assert categorize('blue', 'square') == False"", ""assert categorize('green', 'circle') == False"", ""assert categorize('green', 'square') == False"", ""assert categorize('green', 'triangle') == True""]","[""assert categorize('red', 'triangle') == False"", ""assert categorize('blue', 'triangle') == False""]","""lambda x: (x['shape']=='triangle' and x['color']=='green')""","def categorize(color, shape):
	return (shape == 'triangle')",1,3
